{"ast":null,"code":"import { PointerLockControls } from 'three/examples/jsm/controls/PointerLockControls';\nimport { Vector3 } from 'three';\nimport { CameraProjections, dimension, IfcComponent, NavigationModes } from '../../../base-types';\nimport { LiteEvent } from '../../../utils/LiteEvent';\nexport class FirstPersonControl extends IfcComponent {\n  constructor(context, camera, ifcCamera) {\n    super(context);\n    this.enabled = false;\n    this.mode = NavigationModes.FirstPerson;\n    this.onChange = new LiteEvent();\n    this.onUnlock = new LiteEvent();\n    this.onChangeProjection = new LiteEvent();\n    this.prevTime = performance.now();\n    this.velocity = new Vector3();\n    this.direction = new Vector3();\n    this.speed = 200;\n    this.keyBinding = {\n      forward: {\n        active: false,\n        keys: ['KeyW', 'ArrowUp']\n      },\n      back: {\n        active: false,\n        keys: ['KeyS', 'ArrowDown']\n      },\n      right: {\n        active: false,\n        keys: ['KeyD', 'ArrowRight']\n      },\n      left: {\n        active: false,\n        keys: ['KeyA', 'ArrowLeft']\n      },\n      up: {\n        active: false,\n        keys: ['KeyR']\n      },\n      down: {\n        active: false,\n        keys: ['KeyF']\n      }\n    };\n    this.controlsMap = {\n      [dimension.z]: [this.keyBinding.forward, this.keyBinding.back],\n      [dimension.x]: [this.keyBinding.right, this.keyBinding.left],\n      [dimension.y]: [this.keyBinding.up, this.keyBinding.down]\n    };\n    this.dimensions = [dimension.x, dimension.y, dimension.z];\n\n    this.onKeyDown = event => {\n      const found = this.getControl(event);\n      if (found) found.active = true;\n    };\n\n    this.onKeyUp = event => {\n      const found = this.getControl(event);\n      if (found) found.active = false;\n    };\n\n    this.ifcCamera = ifcCamera;\n    this.controls = new PointerLockControls(camera, context.getDomElement());\n    this.controls.addEventListener('unlock', event => {\n      ifcCamera.setNavigationMode(NavigationModes.Orbit);\n      this.onUnlock.trigger(event);\n    });\n    this.controls.addEventListener('change', event => {\n      this.onChange.trigger(event);\n    });\n    context.getScene().add(this.controls.getObject());\n  }\n\n  get projection() {\n    return CameraProjections.Perspective;\n  }\n\n  toggle(active) {\n    if (active && this.ifcCamera.projection === CameraProjections.Orthographic) {\n      this.ifcCamera.toggleProjection();\n    }\n\n    this.enabled = active;\n    if (active) this.enable();else this.disable();\n  }\n\n  update(_delta) {\n    if (this.enabled && this.controls.isLocked) {\n      const currentTime = performance.now();\n      const delta = (currentTime - this.prevTime) / 1000;\n      this.move(delta);\n      this.prevTime = currentTime;\n    }\n  }\n  /**\r\n   * @deprecated Use onChange.on() instead.\r\n   */\n\n\n  submitOnChange(action) {\n    this.onChange.on(action);\n  }\n  /**\r\n   * @deprecated Use onChange.on() instead.\r\n   */\n\n\n  submitOnUnlock(action) {\n    this.onUnlock.on(action);\n  }\n\n  enable() {\n    if (!this.controls.isLocked) this.controls.lock();\n    document.addEventListener('keydown', this.onKeyDown);\n    document.addEventListener('keyup', this.onKeyUp);\n  }\n\n  disable() {\n    if (this.controls.isLocked) this.controls.unlock();\n    document.removeEventListener('keydown', this.onKeyDown);\n    document.removeEventListener('keyup', this.onKeyUp);\n  }\n\n  move(delta) {\n    this.applySmoothDeceleration(delta);\n    this.updateDirections();\n    this.updateVelocity(delta);\n    this.moveCamera(delta);\n  }\n\n  applySmoothDeceleration(delta) {\n    this.dimensions.forEach(dim => {\n      this.velocity[dim] -= this.velocity[dim] * 10.0 * delta;\n    });\n  }\n\n  updateDirections() {\n    this.dimensions.forEach(dim => this.updateDirection(dim));\n    this.direction.normalize(); // this ensures consistent movements in all directions\n  }\n\n  updateDirection(dim) {\n    const controls = this.controlsMap[dim];\n    const oneDirection = controls[0];\n    const oppositeDirection = controls[1];\n    this.direction[dim] = Number(oneDirection.active) - Number(oppositeDirection.active);\n  }\n\n  updateVelocity(delta) {\n    this.dimensions.forEach(dimension => {\n      const controls = this.controlsMap[dimension];\n      const isActive = controls.find(control => control.active);\n\n      if (isActive) {\n        this.velocity[dimension] -= this.direction[dimension] * this.speed * delta;\n      }\n    });\n  }\n\n  moveCamera(delta) {\n    this.controls.moveRight(-this.velocity.x * delta);\n    this.controls.moveForward(-this.velocity.z * delta);\n    this.controls.getObject().position.y -= this.velocity.y * delta;\n  }\n\n  getControl(event) {\n    const controlValues = Object.values(this.keyBinding);\n    return controlValues.find(control => control.keys.indexOf(event.code) > -1);\n  }\n\n}","map":{"version":3,"sources":["../../../../src/components/context/camera/FirstPersonControl.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { PointerLockControls } from 'three/examples/jsm/controls/PointerLockControls';\r\nimport { Vector3 } from 'three';\r\nimport { CameraProjections, dimension, IfcComponent, NavigationModes } from '../../../base-types';\r\nimport { LiteEvent } from '../../../utils/LiteEvent';\r\nexport class FirstPersonControl extends IfcComponent {\r\n    constructor(context, camera, ifcCamera) {\r\n        super(context);\r\n        this.enabled = false;\r\n        this.mode = NavigationModes.FirstPerson;\r\n        this.onChange = new LiteEvent();\r\n        this.onUnlock = new LiteEvent();\r\n        this.onChangeProjection = new LiteEvent();\r\n        this.prevTime = performance.now();\r\n        this.velocity = new Vector3();\r\n        this.direction = new Vector3();\r\n        this.speed = 200;\r\n        this.keyBinding = {\r\n            forward: {\r\n                active: false,\r\n                keys: ['KeyW', 'ArrowUp']\r\n            },\r\n            back: {\r\n                active: false,\r\n                keys: ['KeyS', 'ArrowDown']\r\n            },\r\n            right: {\r\n                active: false,\r\n                keys: ['KeyD', 'ArrowRight']\r\n            },\r\n            left: {\r\n                active: false,\r\n                keys: ['KeyA', 'ArrowLeft']\r\n            },\r\n            up: {\r\n                active: false,\r\n                keys: ['KeyR']\r\n            },\r\n            down: {\r\n                active: false,\r\n                keys: ['KeyF']\r\n            }\r\n        };\r\n        this.controlsMap = {\r\n            [dimension.z]: [this.keyBinding.forward, this.keyBinding.back],\r\n            [dimension.x]: [this.keyBinding.right, this.keyBinding.left],\r\n            [dimension.y]: [this.keyBinding.up, this.keyBinding.down]\r\n        };\r\n        this.dimensions = [dimension.x, dimension.y, dimension.z];\r\n        this.onKeyDown = (event) => {\r\n            const found = this.getControl(event);\r\n            if (found)\r\n                found.active = true;\r\n        };\r\n        this.onKeyUp = (event) => {\r\n            const found = this.getControl(event);\r\n            if (found)\r\n                found.active = false;\r\n        };\r\n        this.ifcCamera = ifcCamera;\r\n        this.controls = new PointerLockControls(camera, context.getDomElement());\r\n        this.controls.addEventListener('unlock', (event) => {\r\n            ifcCamera.setNavigationMode(NavigationModes.Orbit);\r\n            this.onUnlock.trigger(event);\r\n        });\r\n        this.controls.addEventListener('change', (event) => {\r\n            this.onChange.trigger(event);\r\n        });\r\n        context.getScene().add(this.controls.getObject());\r\n    }\r\n    get projection() {\r\n        return CameraProjections.Perspective;\r\n    }\r\n    toggle(active) {\r\n        if (active && this.ifcCamera.projection === CameraProjections.Orthographic) {\r\n            this.ifcCamera.toggleProjection();\r\n        }\r\n        this.enabled = active;\r\n        if (active)\r\n            this.enable();\r\n        else\r\n            this.disable();\r\n    }\r\n    update(_delta) {\r\n        if (this.enabled && this.controls.isLocked) {\r\n            const currentTime = performance.now();\r\n            const delta = (currentTime - this.prevTime) / 1000;\r\n            this.move(delta);\r\n            this.prevTime = currentTime;\r\n        }\r\n    }\r\n    /**\r\n     * @deprecated Use onChange.on() instead.\r\n     */\r\n    submitOnChange(action) {\r\n        this.onChange.on(action);\r\n    }\r\n    /**\r\n     * @deprecated Use onChange.on() instead.\r\n     */\r\n    submitOnUnlock(action) {\r\n        this.onUnlock.on(action);\r\n    }\r\n    enable() {\r\n        if (!this.controls.isLocked)\r\n            this.controls.lock();\r\n        document.addEventListener('keydown', this.onKeyDown);\r\n        document.addEventListener('keyup', this.onKeyUp);\r\n    }\r\n    disable() {\r\n        if (this.controls.isLocked)\r\n            this.controls.unlock();\r\n        document.removeEventListener('keydown', this.onKeyDown);\r\n        document.removeEventListener('keyup', this.onKeyUp);\r\n    }\r\n    move(delta) {\r\n        this.applySmoothDeceleration(delta);\r\n        this.updateDirections();\r\n        this.updateVelocity(delta);\r\n        this.moveCamera(delta);\r\n    }\r\n    applySmoothDeceleration(delta) {\r\n        this.dimensions.forEach((dim) => {\r\n            this.velocity[dim] -= this.velocity[dim] * 10.0 * delta;\r\n        });\r\n    }\r\n    updateDirections() {\r\n        this.dimensions.forEach((dim) => this.updateDirection(dim));\r\n        this.direction.normalize(); // this ensures consistent movements in all directions\r\n    }\r\n    updateDirection(dim) {\r\n        const controls = this.controlsMap[dim];\r\n        const oneDirection = controls[0];\r\n        const oppositeDirection = controls[1];\r\n        this.direction[dim] = Number(oneDirection.active) - Number(oppositeDirection.active);\r\n    }\r\n    updateVelocity(delta) {\r\n        this.dimensions.forEach((dimension) => {\r\n            const controls = this.controlsMap[dimension];\r\n            const isActive = controls.find((control) => control.active);\r\n            if (isActive) {\r\n                this.velocity[dimension] -= this.direction[dimension] * this.speed * delta;\r\n            }\r\n        });\r\n    }\r\n    moveCamera(delta) {\r\n        this.controls.moveRight(-this.velocity.x * delta);\r\n        this.controls.moveForward(-this.velocity.z * delta);\r\n        this.controls.getObject().position.y -= this.velocity.y * delta;\r\n    }\r\n    getControl(event) {\r\n        const controlValues = Object.values(this.keyBinding);\r\n        return controlValues.find((control) => control.keys.indexOf(event.code) > -1);\r\n    }\r\n}\r\n//# sourceMappingURL=FirstPersonControl.js.map"]},"metadata":{},"sourceType":"module"}