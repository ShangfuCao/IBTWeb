{"ast":null,"code":"import _classCallCheck from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { MeshBasicMaterial } from 'three';\nexport var VisibilityManager = /*#__PURE__*/function () {\n  function VisibilityManager(loader, context) {\n    _classCallCheck(this, VisibilityManager);\n\n    this.modelMaterials = {};\n    this.invisibleMaterial = new MeshBasicMaterial({\n      visible: false\n    });\n    this.ifc = loader;\n    this.context = context;\n    this.scene = this.context.getScene();\n  }\n\n  _createClass(VisibilityManager, [{\n    key: \"isolateItems\",\n    value: function isolateItems(modelID, ids) {\n      var removePrevious = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var material = arguments.length > 3 ? arguments[3] : undefined;\n      this.isolate(modelID, ids, removePrevious);\n      this.changeModelMaterial(modelID, material);\n      this.makeIsolatedItemsPickable(modelID);\n    }\n  }, {\n    key: \"removeIsolation\",\n    value: function removeIsolation(modelID) {\n      var mesh = this.context.items.ifcModels.find(function (ifcMesh) {\n        return ifcMesh.modelID === modelID;\n      });\n\n      if (mesh) {\n        this.ifc.ifcManager.removeSubset(modelID, this.scene);\n        this.context.items.pickableIfcModels.push(mesh);\n        this.restoreModelMaterial(modelID);\n        this.makeOriginalModelPickable(modelID);\n      }\n    }\n  }, {\n    key: \"changeModelMaterial\",\n    value: function changeModelMaterial(modelID, material) {\n      var mesh = this.getMesh(modelID);\n\n      if (mesh) {\n        this.modelMaterials[mesh.modelID] = mesh.material;\n        mesh.material = material || this.invisibleMaterial;\n      }\n    }\n  }, {\n    key: \"restoreModelMaterial\",\n    value: function restoreModelMaterial(modelID) {\n      var mesh = this.getMesh(modelID);\n\n      if (this.modelMaterials[modelID] && mesh) {\n        mesh.material = this.modelMaterials[modelID];\n      }\n    }\n  }, {\n    key: \"makeOriginalModelPickable\",\n    value: function makeOriginalModelPickable(model) {\n      var originalModel = this.context.items.ifcModels.find(function (mesh) {\n        return mesh.modelID === model;\n      });\n\n      if (originalModel) {\n        this.removePickableItem(model);\n        this.context.items.pickableIfcModels.push(originalModel);\n      }\n    }\n  }, {\n    key: \"removePickableItem\",\n    value: function removePickableItem(modelID) {\n      this.context.items.pickableIfcModels = this.context.items.pickableIfcModels.filter(function (ifcMesh) {\n        return ifcMesh.modelID !== modelID;\n      });\n    }\n  }, {\n    key: \"makeIsolatedItemsPickable\",\n    value: function makeIsolatedItemsPickable(model) {\n      this.removePickableItem(model);\n      var isolatedItems = this.ifc.ifcManager.getSubset(model);\n\n      if (isolatedItems) {\n        isolatedItems.modelID = model;\n        this.context.items.pickableIfcModels.push(isolatedItems);\n      }\n    }\n  }, {\n    key: \"getMesh\",\n    value: function getMesh(modelID) {\n      return this.context.items.ifcModels.find(function (model) {\n        return model.modelID === modelID;\n      });\n    }\n  }, {\n    key: \"isolate\",\n    value: function isolate(modelID, ids, removePrevious) {\n      if (ids.length === 0) {\n        this.ifc.ifcManager.removeSubset(modelID, this.scene);\n        return;\n      }\n\n      this.ifc.ifcManager.createSubset({\n        scene: this.scene,\n        ids: ids,\n        modelID: modelID,\n        removePrevious: removePrevious\n      });\n    }\n  }]);\n\n  return VisibilityManager;\n}();","map":{"version":3,"sources":["../../../src/components/ifc/visibility-manager.ts"],"names":[],"mappings":";;AACA,SAAmB,iBAAnB,QAAmD,OAAnD;AAIA,WAAa,iBAAb;AAOE,6BAAY,MAAZ,EAA+B,OAA/B,EAA+C;AAAA;;AAJvC,SAAA,cAAA,GAA+D,EAA/D;AAES,SAAA,iBAAA,GAAoB,IAAI,iBAAJ,CAAsB;AAAE,MAAA,OAAO,EAAE;AAAX,KAAtB,CAApB;AAGf,SAAK,GAAL,GAAW,MAAX;AACA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,KAAL,GAAa,KAAK,OAAL,CAAa,QAAb,EAAb;AACD;;AAXH;AAAA;AAAA,WAaE,sBAAa,OAAb,EAA8B,GAA9B,EAAuF;AAAA,UAA1C,cAA0C,uEAAzB,IAAyB;AAAA,UAAnB,QAAmB;AACrF,WAAK,OAAL,CAAa,OAAb,EAAsB,GAAtB,EAA2B,cAA3B;AACA,WAAK,mBAAL,CAAyB,OAAzB,EAAkC,QAAlC;AACA,WAAK,yBAAL,CAA+B,OAA/B;AACD;AAjBH;AAAA;AAAA,WAmBE,yBAAgB,OAAhB,EAA+B;AAC7B,UAAM,IAAI,GAAG,KAAK,OAAL,CAAa,KAAb,CAAmB,SAAnB,CAA6B,IAA7B,CAAkC,UAAC,OAAD;AAAA,eAAa,OAAO,CAAC,OAAR,KAAoB,OAAjC;AAAA,OAAlC,CAAb;;AACA,UAAI,IAAJ,EAAU;AACR,aAAK,GAAL,CAAS,UAAT,CAAoB,YAApB,CAAiC,OAAjC,EAA0C,KAAK,KAA/C;AACA,aAAK,OAAL,CAAa,KAAb,CAAmB,iBAAnB,CAAqC,IAArC,CAA0C,IAA1C;AACA,aAAK,oBAAL,CAA0B,OAA1B;AACA,aAAK,yBAAL,CAA+B,OAA/B;AACD;AACF;AA3BH;AAAA;AAAA,WA6BU,6BAAoB,OAApB,EAAqC,QAArC,EAAwD;AAC9D,UAAM,IAAI,GAAG,KAAK,OAAL,CAAa,OAAb,CAAb;;AACA,UAAI,IAAJ,EAAU;AACR,aAAK,cAAL,CAAoB,IAAI,CAAC,OAAzB,IAAoC,IAAI,CAAC,QAAzC;AACA,QAAA,IAAI,CAAC,QAAL,GAAgB,QAAQ,IAAI,KAAK,iBAAjC;AACD;AACF;AAnCH;AAAA;AAAA,WAqCU,8BAAqB,OAArB,EAAoC;AAC1C,UAAM,IAAI,GAAG,KAAK,OAAL,CAAa,OAAb,CAAb;;AACA,UAAI,KAAK,cAAL,CAAoB,OAApB,KAAgC,IAApC,EAA0C;AACxC,QAAA,IAAI,CAAC,QAAL,GAAgB,KAAK,cAAL,CAAoB,OAApB,CAAhB;AACD;AACF;AA1CH;AAAA;AAAA,WA4CU,mCAA0B,KAA1B,EAAuC;AAC7C,UAAM,aAAa,GAAG,KAAK,OAAL,CAAa,KAAb,CAAmB,SAAnB,CAA6B,IAA7B,CAAkC,UAAC,IAAD;AAAA,eAAU,IAAI,CAAC,OAAL,KAAiB,KAA3B;AAAA,OAAlC,CAAtB;;AACA,UAAI,aAAJ,EAAmB;AACjB,aAAK,kBAAL,CAAwB,KAAxB;AACA,aAAK,OAAL,CAAa,KAAb,CAAmB,iBAAnB,CAAqC,IAArC,CAA0C,aAA1C;AACD;AACF;AAlDH;AAAA;AAAA,WAoDU,4BAAmB,OAAnB,EAAkC;AACxC,WAAK,OAAL,CAAa,KAAb,CAAmB,iBAAnB,GAAuC,KAAK,OAAL,CAAa,KAAb,CAAmB,iBAAnB,CAAqC,MAArC,CACrC,UAAC,OAAD,EAAY;AACV,eAAO,OAAO,CAAC,OAAR,KAAoB,OAA3B;AACD,OAHoC,CAAvC;AAKD;AA1DH;AAAA;AAAA,WA4DU,mCAA0B,KAA1B,EAAuC;AAC7C,WAAK,kBAAL,CAAwB,KAAxB;AACA,UAAM,aAAa,GAAG,KAAK,GAAL,CAAS,UAAT,CAAoB,SAApB,CAA8B,KAA9B,CAAtB;;AACA,UAAI,aAAJ,EAAmB;AACjB,QAAA,aAAa,CAAC,OAAd,GAAwB,KAAxB;AACA,aAAK,OAAL,CAAa,KAAb,CAAmB,iBAAnB,CAAqC,IAArC,CAA0C,aAA1C;AACD;AACF;AAnEH;AAAA;AAAA,WAqEU,iBAAQ,OAAR,EAAuB;AAC7B,aAAO,KAAK,OAAL,CAAa,KAAb,CAAmB,SAAnB,CAA6B,IAA7B,CAAkC,UAAC,KAAD;AAAA,eAAW,KAAK,CAAC,OAAN,KAAkB,OAA7B;AAAA,OAAlC,CAAP;AACD;AAvEH;AAAA;AAAA,WAyEU,iBAAQ,OAAR,EAAyB,GAAzB,EAAwC,cAAxC,EAA+D;AACrE,UAAI,GAAG,CAAC,MAAJ,KAAe,CAAnB,EAAsB;AACpB,aAAK,GAAL,CAAS,UAAT,CAAoB,YAApB,CAAiC,OAAjC,EAA0C,KAAK,KAA/C;AACA;AACD;;AACD,WAAK,GAAL,CAAS,UAAT,CAAoB,YAApB,CAAiC;AAC/B,QAAA,KAAK,EAAE,KAAK,KADmB;AAE/B,QAAA,GAAG,EAAH,GAF+B;AAG/B,QAAA,OAAO,EAAP,OAH+B;AAI/B,QAAA,cAAc,EAAd;AAJ+B,OAAjC;AAMD;AApFH;;AAAA;AAAA","sourceRoot":"","sourcesContent":["import { MeshBasicMaterial } from 'three';\r\nexport class VisibilityManager {\r\n    constructor(loader, context) {\r\n        this.modelMaterials = {};\r\n        this.invisibleMaterial = new MeshBasicMaterial({ visible: false });\r\n        this.ifc = loader;\r\n        this.context = context;\r\n        this.scene = this.context.getScene();\r\n    }\r\n    isolateItems(modelID, ids, removePrevious = true, material) {\r\n        this.isolate(modelID, ids, removePrevious);\r\n        this.changeModelMaterial(modelID, material);\r\n        this.makeIsolatedItemsPickable(modelID);\r\n    }\r\n    removeIsolation(modelID) {\r\n        const mesh = this.context.items.ifcModels.find((ifcMesh) => ifcMesh.modelID === modelID);\r\n        if (mesh) {\r\n            this.ifc.ifcManager.removeSubset(modelID, this.scene);\r\n            this.context.items.pickableIfcModels.push(mesh);\r\n            this.restoreModelMaterial(modelID);\r\n            this.makeOriginalModelPickable(modelID);\r\n        }\r\n    }\r\n    changeModelMaterial(modelID, material) {\r\n        const mesh = this.getMesh(modelID);\r\n        if (mesh) {\r\n            this.modelMaterials[mesh.modelID] = mesh.material;\r\n            mesh.material = material || this.invisibleMaterial;\r\n        }\r\n    }\r\n    restoreModelMaterial(modelID) {\r\n        const mesh = this.getMesh(modelID);\r\n        if (this.modelMaterials[modelID] && mesh) {\r\n            mesh.material = this.modelMaterials[modelID];\r\n        }\r\n    }\r\n    makeOriginalModelPickable(model) {\r\n        const originalModel = this.context.items.ifcModels.find((mesh) => mesh.modelID === model);\r\n        if (originalModel) {\r\n            this.removePickableItem(model);\r\n            this.context.items.pickableIfcModels.push(originalModel);\r\n        }\r\n    }\r\n    removePickableItem(modelID) {\r\n        this.context.items.pickableIfcModels = this.context.items.pickableIfcModels.filter((ifcMesh) => {\r\n            return ifcMesh.modelID !== modelID;\r\n        });\r\n    }\r\n    makeIsolatedItemsPickable(model) {\r\n        this.removePickableItem(model);\r\n        const isolatedItems = this.ifc.ifcManager.getSubset(model);\r\n        if (isolatedItems) {\r\n            isolatedItems.modelID = model;\r\n            this.context.items.pickableIfcModels.push(isolatedItems);\r\n        }\r\n    }\r\n    getMesh(modelID) {\r\n        return this.context.items.ifcModels.find((model) => model.modelID === modelID);\r\n    }\r\n    isolate(modelID, ids, removePrevious) {\r\n        if (ids.length === 0) {\r\n            this.ifc.ifcManager.removeSubset(modelID, this.scene);\r\n            return;\r\n        }\r\n        this.ifc.ifcManager.createSubset({\r\n            scene: this.scene,\r\n            ids,\r\n            modelID,\r\n            removePrevious\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=visibility-manager.js.map"]},"metadata":{},"sourceType":"module"}