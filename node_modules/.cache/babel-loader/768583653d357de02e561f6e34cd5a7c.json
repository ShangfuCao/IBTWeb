{"ast":null,"code":"import { CylinderGeometry, DoubleSide, Mesh, MeshBasicMaterial, Object3D, Plane, PlaneGeometry } from 'three';\nimport { TransformControls } from 'three/examples/jsm/controls/TransformControls';\nimport { IfcComponent } from '../../../base-types';\nexport class IfcPlane extends IfcComponent {\n  constructor(context, origin, normal, onStartDragging, onEndDragging, planeSize) {\n    super(context);\n    this.arrowBoundingBox = new Mesh();\n\n    this.removeFromScene = () => {\n      const scene = this.context.getScene();\n      scene.remove(this.helper);\n      scene.remove(this.controls);\n    };\n\n    this.planeSize = planeSize;\n    this.context = context;\n    this.plane = new Plane();\n    this.planeMesh = this.getPlaneMesh();\n    this.visible = true;\n    this.normal = normal;\n    this.origin = origin;\n    this.helper = this.createHelper();\n    this.controls = this.newTransformControls();\n    this.setupEvents(onStartDragging, onEndDragging);\n    this.plane.setFromNormalAndCoplanarPoint(normal, origin);\n  }\n\n  setVisibility(visible) {\n    this.visible = visible;\n    this.helper.visible = visible;\n    this.controls.visible = visible;\n  }\n\n  newTransformControls() {\n    const camera = this.context.getCamera();\n    const container = this.context.getDomElement();\n    const controls = new TransformControls(camera, container);\n    this.initializeControls(controls);\n    const scene = this.context.getScene();\n    scene.add(controls);\n    return controls;\n  }\n\n  initializeControls(controls) {\n    controls.attach(this.helper);\n    controls.showX = false;\n    controls.showY = false;\n    controls.setSpace('local');\n    this.createArrowBoundingBox();\n    controls.children[0].children[0].add(this.arrowBoundingBox);\n  }\n\n  createArrowBoundingBox() {\n    this.arrowBoundingBox.geometry = new CylinderGeometry(0.18, 0.18, 1.2);\n    this.arrowBoundingBox.material = IfcPlane.hiddenMaterial;\n    this.arrowBoundingBox.rotateX(Math.PI / 2);\n    this.arrowBoundingBox.updateMatrix();\n    this.arrowBoundingBox.geometry.applyMatrix4(this.arrowBoundingBox.matrix);\n  }\n\n  setupEvents(onStart, onEnd) {\n    this.controls.addEventListener('change', () => {\n      this.plane.setFromNormalAndCoplanarPoint(this.normal, this.helper.position);\n    });\n    this.controls.addEventListener('dragging-changed', event => {\n      this.visible = !event.value;\n      this.context.toggleCameraControls(this.visible, {\n        preventOrbitAdjustment: true\n      });\n      if (event.value) onStart();else onEnd();\n    });\n    this.context.ifcCamera.currentNavMode.onChangeProjection.on(camera => {\n      this.controls.camera = camera;\n    });\n  }\n\n  createHelper() {\n    const helper = new Object3D();\n    helper.lookAt(this.normal);\n    helper.position.copy(this.origin);\n    const scene = this.context.getScene();\n    scene.add(helper);\n    helper.add(this.planeMesh);\n    return helper;\n  }\n\n  getPlaneMesh() {\n    const planeGeom = new PlaneGeometry(this.planeSize, this.planeSize, 1);\n    return new Mesh(planeGeom, IfcPlane.planeMaterial);\n  }\n\n}\nIfcPlane.hiddenMaterial = new MeshBasicMaterial({\n  visible: false\n});\nIfcPlane.planeMaterial = new MeshBasicMaterial({\n  color: 0xffff00,\n  side: DoubleSide,\n  transparent: true,\n  opacity: 0.2\n});","map":{"version":3,"sources":["../../../../src/components/display/clipping-planes/planes.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { CylinderGeometry, DoubleSide, Mesh, MeshBasicMaterial, Object3D, Plane, PlaneGeometry } from 'three';\r\nimport { TransformControls } from 'three/examples/jsm/controls/TransformControls';\r\nimport { IfcComponent } from '../../../base-types';\r\nexport class IfcPlane extends IfcComponent {\r\n    constructor(context, origin, normal, onStartDragging, onEndDragging, planeSize) {\r\n        super(context);\r\n        this.arrowBoundingBox = new Mesh();\r\n        this.removeFromScene = () => {\r\n            const scene = this.context.getScene();\r\n            scene.remove(this.helper);\r\n            scene.remove(this.controls);\r\n        };\r\n        this.planeSize = planeSize;\r\n        this.context = context;\r\n        this.plane = new Plane();\r\n        this.planeMesh = this.getPlaneMesh();\r\n        this.visible = true;\r\n        this.normal = normal;\r\n        this.origin = origin;\r\n        this.helper = this.createHelper();\r\n        this.controls = this.newTransformControls();\r\n        this.setupEvents(onStartDragging, onEndDragging);\r\n        this.plane.setFromNormalAndCoplanarPoint(normal, origin);\r\n    }\r\n    setVisibility(visible) {\r\n        this.visible = visible;\r\n        this.helper.visible = visible;\r\n        this.controls.visible = visible;\r\n    }\r\n    newTransformControls() {\r\n        const camera = this.context.getCamera();\r\n        const container = this.context.getDomElement();\r\n        const controls = new TransformControls(camera, container);\r\n        this.initializeControls(controls);\r\n        const scene = this.context.getScene();\r\n        scene.add(controls);\r\n        return controls;\r\n    }\r\n    initializeControls(controls) {\r\n        controls.attach(this.helper);\r\n        controls.showX = false;\r\n        controls.showY = false;\r\n        controls.setSpace('local');\r\n        this.createArrowBoundingBox();\r\n        controls.children[0].children[0].add(this.arrowBoundingBox);\r\n    }\r\n    createArrowBoundingBox() {\r\n        this.arrowBoundingBox.geometry = new CylinderGeometry(0.18, 0.18, 1.2);\r\n        this.arrowBoundingBox.material = IfcPlane.hiddenMaterial;\r\n        this.arrowBoundingBox.rotateX(Math.PI / 2);\r\n        this.arrowBoundingBox.updateMatrix();\r\n        this.arrowBoundingBox.geometry.applyMatrix4(this.arrowBoundingBox.matrix);\r\n    }\r\n    setupEvents(onStart, onEnd) {\r\n        this.controls.addEventListener('change', () => {\r\n            this.plane.setFromNormalAndCoplanarPoint(this.normal, this.helper.position);\r\n        });\r\n        this.controls.addEventListener('dragging-changed', (event) => {\r\n            this.visible = !event.value;\r\n            this.context.toggleCameraControls(this.visible, { preventOrbitAdjustment: true });\r\n            if (event.value)\r\n                onStart();\r\n            else\r\n                onEnd();\r\n        });\r\n        this.context.ifcCamera.currentNavMode.onChangeProjection.on((camera) => {\r\n            this.controls.camera = camera;\r\n        });\r\n    }\r\n    createHelper() {\r\n        const helper = new Object3D();\r\n        helper.lookAt(this.normal);\r\n        helper.position.copy(this.origin);\r\n        const scene = this.context.getScene();\r\n        scene.add(helper);\r\n        helper.add(this.planeMesh);\r\n        return helper;\r\n    }\r\n    getPlaneMesh() {\r\n        const planeGeom = new PlaneGeometry(this.planeSize, this.planeSize, 1);\r\n        return new Mesh(planeGeom, IfcPlane.planeMaterial);\r\n    }\r\n}\r\nIfcPlane.hiddenMaterial = new MeshBasicMaterial({ visible: false });\r\nIfcPlane.planeMaterial = new MeshBasicMaterial({\r\n    color: 0xffff00,\r\n    side: DoubleSide,\r\n    transparent: true,\r\n    opacity: 0.2\r\n});\r\n//# sourceMappingURL=planes.js.map"]},"metadata":{},"sourceType":"module"}