{"ast":null,"code":"import _defineProperty from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { OrthographicCamera, PerspectiveCamera, Vector3 } from 'three';\nimport { IfcComponent, NavigationModes } from '../../../base-types';\nimport { LiteEvent } from '../../../utils/LiteEvent';\nimport { FirstPersonControl } from './FirstPersonControl';\nimport { OrbitControl } from './OrbitControl';\nvar frustumSize = 50;\nexport var IfcCamera = /*#__PURE__*/function (_IfcComponent) {\n  _inherits(IfcCamera, _IfcComponent);\n\n  var _super = _createSuper(IfcCamera);\n\n  function IfcCamera(context) {\n    var _this$navMode;\n\n    var _this;\n\n    _classCallCheck(this, IfcCamera);\n\n    _this = _super.call(this, context);\n    _this.onChange = new LiteEvent();\n    _this.onUnlock = new LiteEvent();\n    _this.onChangeProjection = new LiteEvent();\n    _this.context = context;\n\n    var dims = _this.context.getDimensions();\n\n    var aspect = dims.x / dims.y;\n    _this.perspectiveCamera = new PerspectiveCamera(45, aspect, 0.1, 1000);\n    _this.orthographicCamera = new OrthographicCamera(frustumSize * aspect / -2, frustumSize * aspect / 2, frustumSize / 2, frustumSize / -2, 0.1, 1000);\n\n    _this.setupCamera();\n\n    _this.navMode = (_this$navMode = {}, _defineProperty(_this$navMode, NavigationModes.Orbit, new OrbitControl(_this.context, _this.perspectiveCamera, _this.orthographicCamera)), _defineProperty(_this$navMode, NavigationModes.FirstPerson, new FirstPersonControl(_this.context, _this.perspectiveCamera, _assertThisInitialized(_this))), _this$navMode);\n    _this.currentNavMode = _this.navMode[NavigationModes.Orbit];\n\n    _this.currentNavMode.toggle(true, {\n      preventTargetAdjustment: true\n    });\n\n    Object.values(_this.navMode).forEach(function (mode) {\n      mode.onChange.on(_this.onChange.trigger);\n      mode.onUnlock.on(_this.onUnlock.trigger);\n      mode.onChangeProjection.on(_this.onChangeProjection.trigger);\n    });\n    return _this;\n  }\n\n  _createClass(IfcCamera, [{\n    key: \"target\",\n    get: function get() {\n      var orbitControls = this.navMode[NavigationModes.Orbit];\n      return orbitControls.target;\n    }\n  }, {\n    key: \"activeCamera\",\n    get: function get() {\n      return this.currentNavMode.mode === NavigationModes.FirstPerson ? this.perspectiveCamera : this.navMode[NavigationModes.Orbit].activeCamera;\n    }\n  }, {\n    key: \"projection\",\n    get: function get() {\n      return this.navMode[NavigationModes.Orbit].projection;\n    },\n    set: function set(projection) {\n      this.navMode[NavigationModes.Orbit].projection = projection;\n    }\n  }, {\n    key: \"updateAspect\",\n    value: function updateAspect() {\n      var dims = this.context.getDimensions();\n      var aspect = dims.x / dims.y;\n      this.perspectiveCamera.aspect = dims.x / dims.y;\n      this.perspectiveCamera.updateProjectionMatrix();\n      this.orthographicCamera.left = -frustumSize * aspect / 2;\n      this.orthographicCamera.right = frustumSize * aspect / 2;\n      this.orthographicCamera.top = frustumSize / 2;\n      this.orthographicCamera.bottom = -frustumSize / 2;\n      this.orthographicCamera.updateProjectionMatrix();\n    }\n    /**\r\n     * @deprecated Use onChange.on() instead.\r\n     */\n\n  }, {\n    key: \"submitOnChange\",\n    value: function submitOnChange(action) {\n      this.onChange.on(action);\n    }\n    /**\r\n     * @deprecated Use onUnlock.on() instead.\r\n     */\n\n  }, {\n    key: \"submitOnUnlock\",\n    value: function submitOnUnlock(action) {\n      this.onUnlock.on(action);\n    }\n  }, {\n    key: \"setNavigationMode\",\n    value: function setNavigationMode(mode) {\n      this.currentNavMode.toggle(false);\n      this.currentNavMode = this.navMode[mode];\n      this.currentNavMode.toggle(true);\n    }\n  }, {\n    key: \"setOrbitControlsButtons\",\n    value: function setOrbitControlsButtons(buttons) {\n      var orbitControls = this.setOrbitControls();\n      orbitControls.setOrbitControlsButtons(buttons);\n    }\n  }, {\n    key: \"toggleCameraControls\",\n    value: function toggleCameraControls(active, options) {\n      this.currentNavMode.toggle(active, options);\n    }\n  }, {\n    key: \"toggleProjection\",\n    value: function toggleProjection() {\n      this.navMode[NavigationModes.Orbit].toggleProjection();\n    }\n  }, {\n    key: \"targetItem\",\n    value: function targetItem(mesh) {\n      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var orbitControls = this.setOrbitControls();\n      orbitControls.targetItem(mesh, duration);\n    }\n  }, {\n    key: \"goTo\",\n    value: function goTo(position, target) {\n      var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var orbitControls = this.setOrbitControls();\n      orbitControls.goTo(position, target, duration);\n    }\n  }, {\n    key: \"goToHomeView\",\n    value: function goToHomeView() {\n      var orbitControls = this.setOrbitControls();\n      orbitControls.goToHomeView();\n    }\n  }, {\n    key: \"setHomeView\",\n    value: function setHomeView(camera, target) {\n      var orbitControls = this.navMode[NavigationModes.Orbit];\n      orbitControls.homeView = {\n        camera: camera,\n        target: target\n      };\n    }\n  }, {\n    key: \"unlock\",\n    value: function unlock() {\n      var firstPerson = this.navMode[NavigationModes.FirstPerson];\n      firstPerson.controls.unlock();\n    }\n  }, {\n    key: \"setOrbitControls\",\n    value: function setOrbitControls() {\n      this.setNavigationMode(NavigationModes.Orbit);\n      return this.currentNavMode;\n    }\n  }, {\n    key: \"setupCamera\",\n    value: function setupCamera() {\n      this.perspectiveCamera.position.z = 10;\n      this.perspectiveCamera.position.y = 10;\n      this.perspectiveCamera.position.x = 10;\n      this.perspectiveCamera.lookAt(new Vector3(0, 0, 0));\n      this.orthographicCamera.position.z = 10;\n      this.orthographicCamera.position.y = 10;\n      this.orthographicCamera.position.x = 10;\n      this.orthographicCamera.lookAt(new Vector3(0, 0, 0));\n    }\n  }]);\n\n  return IfcCamera;\n}(IfcComponent);","map":{"version":3,"sources":["../../../../src/components/context/camera/camera.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { OrthographicCamera, PerspectiveCamera, Vector3 } from 'three';\r\nimport { IfcComponent, NavigationModes } from '../../../base-types';\r\nimport { LiteEvent } from '../../../utils/LiteEvent';\r\nimport { FirstPersonControl } from './FirstPersonControl';\r\nimport { OrbitControl } from './OrbitControl';\r\nconst frustumSize = 50;\r\nexport class IfcCamera extends IfcComponent {\r\n    constructor(context) {\r\n        super(context);\r\n        this.onChange = new LiteEvent();\r\n        this.onUnlock = new LiteEvent();\r\n        this.onChangeProjection = new LiteEvent();\r\n        this.context = context;\r\n        const dims = this.context.getDimensions();\r\n        const aspect = dims.x / dims.y;\r\n        this.perspectiveCamera = new PerspectiveCamera(45, aspect, 0.1, 1000);\r\n        this.orthographicCamera = new OrthographicCamera((frustumSize * aspect) / -2, (frustumSize * aspect) / 2, frustumSize / 2, frustumSize / -2, 0.1, 1000);\r\n        this.setupCamera();\r\n        this.navMode = {\r\n            [NavigationModes.Orbit]: new OrbitControl(this.context, this.perspectiveCamera, this.orthographicCamera),\r\n            [NavigationModes.FirstPerson]: new FirstPersonControl(this.context, this.perspectiveCamera, this)\r\n        };\r\n        this.currentNavMode = this.navMode[NavigationModes.Orbit];\r\n        this.currentNavMode.toggle(true, { preventTargetAdjustment: true });\r\n        Object.values(this.navMode).forEach((mode) => {\r\n            mode.onChange.on(this.onChange.trigger);\r\n            mode.onUnlock.on(this.onUnlock.trigger);\r\n            mode.onChangeProjection.on(this.onChangeProjection.trigger);\r\n        });\r\n    }\r\n    get target() {\r\n        const orbitControls = this.navMode[NavigationModes.Orbit];\r\n        return orbitControls.target;\r\n    }\r\n    get activeCamera() {\r\n        return this.currentNavMode.mode === NavigationModes.FirstPerson\r\n            ? this.perspectiveCamera\r\n            : this.navMode[NavigationModes.Orbit].activeCamera;\r\n    }\r\n    get projection() {\r\n        return this.navMode[NavigationModes.Orbit].projection;\r\n    }\r\n    set projection(projection) {\r\n        this.navMode[NavigationModes.Orbit].projection = projection;\r\n    }\r\n    updateAspect() {\r\n        const dims = this.context.getDimensions();\r\n        const aspect = dims.x / dims.y;\r\n        this.perspectiveCamera.aspect = dims.x / dims.y;\r\n        this.perspectiveCamera.updateProjectionMatrix();\r\n        this.orthographicCamera.left = (-frustumSize * aspect) / 2;\r\n        this.orthographicCamera.right = (frustumSize * aspect) / 2;\r\n        this.orthographicCamera.top = frustumSize / 2;\r\n        this.orthographicCamera.bottom = -frustumSize / 2;\r\n        this.orthographicCamera.updateProjectionMatrix();\r\n    }\r\n    /**\r\n     * @deprecated Use onChange.on() instead.\r\n     */\r\n    submitOnChange(action) {\r\n        this.onChange.on(action);\r\n    }\r\n    /**\r\n     * @deprecated Use onUnlock.on() instead.\r\n     */\r\n    submitOnUnlock(action) {\r\n        this.onUnlock.on(action);\r\n    }\r\n    setNavigationMode(mode) {\r\n        this.currentNavMode.toggle(false);\r\n        this.currentNavMode = this.navMode[mode];\r\n        this.currentNavMode.toggle(true);\r\n    }\r\n    setOrbitControlsButtons(buttons) {\r\n        const orbitControls = this.setOrbitControls();\r\n        orbitControls.setOrbitControlsButtons(buttons);\r\n    }\r\n    toggleCameraControls(active, options) {\r\n        this.currentNavMode.toggle(active, options);\r\n    }\r\n    toggleProjection() {\r\n        this.navMode[NavigationModes.Orbit].toggleProjection();\r\n    }\r\n    targetItem(mesh, duration = 1) {\r\n        const orbitControls = this.setOrbitControls();\r\n        orbitControls.targetItem(mesh, duration);\r\n    }\r\n    goTo(position, target, duration = 0) {\r\n        const orbitControls = this.setOrbitControls();\r\n        orbitControls.goTo(position, target, duration);\r\n    }\r\n    goToHomeView() {\r\n        const orbitControls = this.setOrbitControls();\r\n        orbitControls.goToHomeView();\r\n    }\r\n    setHomeView(camera, target) {\r\n        const orbitControls = this.navMode[NavigationModes.Orbit];\r\n        orbitControls.homeView = { camera, target };\r\n    }\r\n    unlock() {\r\n        const firstPerson = this.navMode[NavigationModes.FirstPerson];\r\n        firstPerson.controls.unlock();\r\n    }\r\n    setOrbitControls() {\r\n        this.setNavigationMode(NavigationModes.Orbit);\r\n        return this.currentNavMode;\r\n    }\r\n    setupCamera() {\r\n        this.perspectiveCamera.position.z = 10;\r\n        this.perspectiveCamera.position.y = 10;\r\n        this.perspectiveCamera.position.x = 10;\r\n        this.perspectiveCamera.lookAt(new Vector3(0, 0, 0));\r\n        this.orthographicCamera.position.z = 10;\r\n        this.orthographicCamera.position.y = 10;\r\n        this.orthographicCamera.position.x = 10;\r\n        this.orthographicCamera.lookAt(new Vector3(0, 0, 0));\r\n    }\r\n}\r\n//# sourceMappingURL=camera.js.map"]},"metadata":{},"sourceType":"module"}