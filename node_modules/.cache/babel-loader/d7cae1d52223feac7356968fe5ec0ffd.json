{"ast":null,"code":"import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { IfcComponent } from '../../base-types';\nexport class GLTFManager extends IfcComponent {\n  constructor(context) {\n    super(context);\n    this.loader = new GLTFLoader();\n    this.GLTFModels = {};\n    this.context = context;\n  }\n\n  async load(modelID, url) {\n    const loaded = await this.loader.loadAsync(url);\n    const mesh = loaded.scene;\n    this.GLTFModels[modelID] = mesh;\n    this.context.getScene().add(mesh);\n  }\n\n  getModel(modelID) {\n    if (!this.GLTFModels[modelID]) {\n      throw new Error('The requested GLTF model does not exist!');\n    }\n\n    return this.GLTFModels[modelID];\n  }\n\n}","map":{"version":3,"sources":["../../../src/components/import-export/glTF.ts"],"names":[],"mappings":"AAAA,SAAe,UAAf,QAAiC,uCAAjC;AAEA,SAAkB,YAAlB,QAAsC,kBAAtC;AAEA,OAAM,MAAO,WAAP,SAA2B,YAA3B,CAAuC;AAK3C,EAAA,WAAA,CAAY,OAAZ,EAA4B;AAC1B,UAAM,OAAN;AAJM,SAAA,MAAA,GAAS,IAAI,UAAJ,EAAT;AACA,SAAA,UAAA,GAA2C,EAA3C;AAIN,SAAK,OAAL,GAAe,OAAf;AACD;;AAES,QAAJ,IAAI,CAAC,OAAD,EAAkB,GAAlB,EAA6B;AACrC,UAAM,MAAM,GAAI,MAAM,KAAK,MAAL,CAAY,SAAZ,CAAsB,GAAtB,CAAtB;AACA,UAAM,IAAI,GAAG,MAAM,CAAC,KAApB;AACA,SAAK,UAAL,CAAgB,OAAhB,IAA2B,IAA3B;AACA,SAAK,OAAL,CAAa,QAAb,GAAwB,GAAxB,CAA4B,IAA5B;AACD;;AAED,EAAA,QAAQ,CAAC,OAAD,EAAgB;AACtB,QAAI,CAAC,KAAK,UAAL,CAAgB,OAAhB,CAAL,EAA+B;AAC7B,YAAM,IAAI,KAAJ,CAAU,0CAAV,CAAN;AACD;;AACD,WAAO,KAAK,UAAL,CAAgB,OAAhB,CAAP;AACD;;AAtB0C","sourceRoot":"","sourcesContent":["import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { IfcComponent } from '../../base-types';\r\nexport class GLTFManager extends IfcComponent {\r\n    constructor(context) {\r\n        super(context);\r\n        this.loader = new GLTFLoader();\r\n        this.GLTFModels = {};\r\n        this.context = context;\r\n    }\r\n    async load(modelID, url) {\r\n        const loaded = (await this.loader.loadAsync(url));\r\n        const mesh = loaded.scene;\r\n        this.GLTFModels[modelID] = mesh;\r\n        this.context.getScene().add(mesh);\r\n    }\r\n    getModel(modelID) {\r\n        if (!this.GLTFModels[modelID]) {\r\n            throw new Error('The requested GLTF model does not exist!');\r\n        }\r\n        return this.GLTFModels[modelID];\r\n    }\r\n}\r\n//# sourceMappingURL=glTF.js.map"]},"metadata":{},"sourceType":"module"}