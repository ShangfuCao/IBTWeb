{"ast":null,"code":"import _classCallCheck from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { Box3, MathUtils, MOUSE, Vector3 } from 'three';\nimport { CameraProjections, IfcComponent, NavigationModes } from '../../../base-types';\nimport { LiteEvent } from '../../../utils/LiteEvent';\nexport var OrbitControl = /*#__PURE__*/function (_IfcComponent) {\n  _inherits(OrbitControl, _IfcComponent);\n\n  var _super = _createSuper(OrbitControl);\n\n  function OrbitControl(context, perspectiveCamera, orthographicCamera) {\n    var _this;\n\n    _classCallCheck(this, OrbitControl);\n\n    _this = _super.call(this, context);\n    _this.context = context;\n    _this.perspectiveCamera = perspectiveCamera;\n    _this.orthographicCamera = orthographicCamera;\n    _this.enabled = true;\n    _this.mode = NavigationModes.Orbit;\n    _this.onChange = new LiteEvent();\n    _this.onUnlock = new LiteEvent();\n    _this.onChangeProjection = new LiteEvent();\n    _this.currentTarget = new Vector3();\n    _this.startView = {\n      target: new Vector3(),\n      camera: new Vector3(20, 20, 20)\n    };\n\n    _this.targetItem = function (mesh, duration) {\n      var center = _this.context.getCenter(mesh);\n\n      var cameraEnd = new Vector3().subVectors(_this.perspectiveCamera.position, _this.currentTarget).add(center);\n\n      _this.context.getAnimator().move(_this.perspectiveCamera.position, cameraEnd, duration);\n\n      _this.context.getAnimator().move(_this.orbitControls.target, center, duration);\n    };\n\n    _this.currentCamera = _this.perspectiveCamera;\n    _this.orbitControls = new OrbitControls(_this.perspectiveCamera, context.getDomElement()); // this.orbitControls.minDistance = 1;\n    // this.orbitControls.maxDistance = 500;\n    // this.orbitControls.minZoom = 1;\n    // this.orbitControls.maxZoom = 500;\n\n    _this.orbitControls.addEventListener('change', function (event) {\n      _this.currentTarget.copy(_this.orbitControls.target);\n\n      _this.onChange.trigger(event);\n    });\n\n    _this.setupOrbitControls();\n\n    return _this;\n  }\n\n  _createClass(OrbitControl, [{\n    key: \"activeCamera\",\n    get: function get() {\n      return this.orbitControls.object;\n    }\n  }, {\n    key: \"target\",\n    get: function get() {\n      return this.orbitControls.target;\n    }\n  }, {\n    key: \"minDistance\",\n    set: function set(min) {\n      this.orbitControls.minDistance = min;\n    }\n  }, {\n    key: \"maxDistance\",\n    set: function set(max) {\n      this.orbitControls.maxDistance = max;\n    }\n  }, {\n    key: \"homeView\",\n    set: function set(_ref) {\n      var camera = _ref.camera,\n          target = _ref.target;\n      this.startView.camera = camera;\n      this.startView.target = target;\n    }\n  }, {\n    key: \"projection\",\n    get: function get() {\n      return this.activeCamera === this.perspectiveCamera ? CameraProjections.Perspective : CameraProjections.Orthographic;\n    },\n    set: function set(projection) {\n      if (this.projection === projection) return;\n\n      if (projection === CameraProjections.Orthographic) {\n        // Matching orthographic camera to perspective camera\n        // Resource: https://stackoverflow.com/questions/48758959/what-is-required-to-convert-threejs-perspective-camera-to-orthographic\n        var lineOfSight = new Vector3();\n        this.perspectiveCamera.getWorldDirection(lineOfSight);\n        var distance = this.target.clone().sub(this.perspectiveCamera.position);\n        var depth = distance.dot(lineOfSight);\n        var dims = this.context.getDimensions();\n        var aspect = dims.x / dims.y;\n        var height = depth * 2 * Math.atan(this.perspectiveCamera.fov * (Math.PI / 180) / 2);\n        var width = height * aspect;\n        this.orthographicCamera.zoom = 1;\n        this.orthographicCamera.left = width / -2;\n        this.orthographicCamera.right = width / 2;\n        this.orthographicCamera.top = height / 2;\n        this.orthographicCamera.bottom = height / -2;\n        this.orthographicCamera.updateProjectionMatrix();\n        this.orthographicCamera.position.copy(this.perspectiveCamera.position);\n        this.orthographicCamera.quaternion.copy(this.perspectiveCamera.quaternion);\n        this.orbitControls.object = this.orthographicCamera;\n        this.currentCamera = this.orthographicCamera;\n      } else {\n        this.perspectiveCamera.position.copy(this.orthographicCamera.position);\n        this.perspectiveCamera.quaternion.copy(this.orthographicCamera.quaternion);\n        this.perspectiveCamera.updateProjectionMatrix();\n        this.orbitControls.object = this.perspectiveCamera;\n        this.currentCamera = this.perspectiveCamera;\n      }\n    }\n  }, {\n    key: \"setOrbitControlsButtons\",\n    value: function setOrbitControlsButtons(buttons) {\n      this.orbitControls.mouseButtons = {\n        LEFT: buttons.left,\n        MIDDLE: buttons.middle,\n        RIGHT: buttons.right\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update(_delta) {\n      if (this.enabled) {\n        this.orbitControls.update();\n      }\n    }\n    /**\r\n     * @deprecated Use onChange.on() instead.\r\n     */\n\n  }, {\n    key: \"submitOnChange\",\n    value: function submitOnChange(action) {\n      this.onChange.on(action);\n    }\n    /**\r\n     * @deprecated Use onChange.on() instead.\r\n     */\n\n  }, {\n    key: \"submitOnUnlock\",\n    value: function submitOnUnlock(action) {\n      this.onUnlock.on(action);\n    }\n  }, {\n    key: \"toggleProjection\",\n    value: function toggleProjection() {\n      if (this.activeCamera === this.perspectiveCamera) {\n        this.projection = CameraProjections.Orthographic;\n      } else {\n        this.projection = CameraProjections.Perspective;\n      }\n\n      this.onChangeProjection.trigger(this.activeCamera);\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle(active, options) {\n      var preventAdjustment = options !== undefined && options.preventOrbitAdjustment;\n\n      if (active && !preventAdjustment) {\n        this.adjustTarget();\n      }\n\n      this.enabled = active;\n      this.orbitControls.enabled = active;\n    }\n  }, {\n    key: \"goTo\",\n    value: function goTo(position, target, duration) {\n      this.context.getAnimator().move(this.currentCamera.position, position, duration);\n      this.context.getAnimator().move(this.orbitControls.target, target, duration);\n    }\n  }, {\n    key: \"goToHomeView\",\n    value: function goToHomeView() {\n      this.context.getAnimator().move(this.perspectiveCamera.position, this.startView.camera);\n      this.context.getAnimator().move(this.orbitControls.target, this.startView.target);\n    }\n  }, {\n    key: \"fitModelToFrame\",\n    value: function fitModelToFrame() {\n      if (!this.enabled) return;\n\n      var _this$getBoxCenterAnd = this.getBoxCenterAndDistance(),\n          boxCenter = _this$getBoxCenterAnd.boxCenter,\n          distance = _this$getBoxCenterAnd.distance;\n\n      var direction = new Vector3().subVectors(this.perspectiveCamera.position, boxCenter).multiply(new Vector3(1, 0, 1)).normalize();\n      this.perspectiveCamera.position.copy(direction.multiplyScalar(distance).add(boxCenter));\n      this.perspectiveCamera.updateProjectionMatrix();\n      this.orbitControls.target.set(boxCenter.x, boxCenter.y, boxCenter.z);\n    }\n  }, {\n    key: \"getBoxCenterAndDistance\",\n    value: function getBoxCenterAndDistance() {\n      var scene = this.context.getScene();\n      var box = new Box3().setFromObject(scene.children[scene.children.length - 1]);\n      var boxSize = box.getSize(new Vector3()).length();\n      var boxCenter = box.getCenter(new Vector3());\n      var halfSizeToFitOnScreen = boxSize * 0.5;\n      var halfFovY = MathUtils.degToRad(this.perspectiveCamera.fov * 0.5);\n      var distance = halfSizeToFitOnScreen / Math.tan(halfFovY);\n      return {\n        boxCenter: boxCenter,\n        distance: distance\n      };\n    }\n  }, {\n    key: \"adjustTarget\",\n    value: function adjustTarget() {\n      var cameraDir = new Vector3();\n      this.activeCamera.getWorldDirection(cameraDir);\n      cameraDir.multiplyScalar(20);\n      var center = new Vector3().addVectors(cameraDir, this.activeCamera.position);\n      this.orbitControls.target.set(center.x, center.y, center.z);\n    }\n  }, {\n    key: \"setupOrbitControls\",\n    value: function setupOrbitControls() {\n      this.orbitControls.enableDamping = true;\n      this.orbitControls.dampingFactor *= 2;\n      this.orbitControls.target.set(0, 0, 0);\n      var panWithMMB = this.context.options.panWithMMB || true;\n\n      if (panWithMMB) {\n        this.orbitControls.mouseButtons = {\n          RIGHT: MOUSE.RIGHT,\n          MIDDLE: MOUSE.RIGHT,\n          LEFT: MOUSE.LEFT\n        };\n      }\n    }\n  }]);\n\n  return OrbitControl;\n}(IfcComponent);","map":{"version":3,"sources":["../../../../src/components/context/camera/OrbitControl.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { Box3, MathUtils, MOUSE, Vector3 } from 'three';\r\nimport { CameraProjections, IfcComponent, NavigationModes } from '../../../base-types';\r\nimport { LiteEvent } from '../../../utils/LiteEvent';\r\nexport class OrbitControl extends IfcComponent {\r\n    constructor(context, perspectiveCamera, orthographicCamera) {\r\n        super(context);\r\n        this.context = context;\r\n        this.perspectiveCamera = perspectiveCamera;\r\n        this.orthographicCamera = orthographicCamera;\r\n        this.enabled = true;\r\n        this.mode = NavigationModes.Orbit;\r\n        this.onChange = new LiteEvent();\r\n        this.onUnlock = new LiteEvent();\r\n        this.onChangeProjection = new LiteEvent();\r\n        this.currentTarget = new Vector3();\r\n        this.startView = {\r\n            target: new Vector3(),\r\n            camera: new Vector3(20, 20, 20)\r\n        };\r\n        this.targetItem = (mesh, duration) => {\r\n            const center = this.context.getCenter(mesh);\r\n            const cameraEnd = new Vector3()\r\n                .subVectors(this.perspectiveCamera.position, this.currentTarget)\r\n                .add(center);\r\n            this.context.getAnimator().move(this.perspectiveCamera.position, cameraEnd, duration);\r\n            this.context.getAnimator().move(this.orbitControls.target, center, duration);\r\n        };\r\n        this.currentCamera = this.perspectiveCamera;\r\n        this.orbitControls = new OrbitControls(this.perspectiveCamera, context.getDomElement());\r\n        // this.orbitControls.minDistance = 1;\r\n        // this.orbitControls.maxDistance = 500;\r\n        // this.orbitControls.minZoom = 1;\r\n        // this.orbitControls.maxZoom = 500;\r\n        this.orbitControls.addEventListener('change', (event) => {\r\n            this.currentTarget.copy(this.orbitControls.target);\r\n            this.onChange.trigger(event);\r\n        });\r\n        this.setupOrbitControls();\r\n    }\r\n    get activeCamera() {\r\n        return this.orbitControls.object;\r\n    }\r\n    get target() {\r\n        return this.orbitControls.target;\r\n    }\r\n    set minDistance(min) {\r\n        this.orbitControls.minDistance = min;\r\n    }\r\n    set maxDistance(max) {\r\n        this.orbitControls.maxDistance = max;\r\n    }\r\n    set homeView({ camera, target }) {\r\n        this.startView.camera = camera;\r\n        this.startView.target = target;\r\n    }\r\n    get projection() {\r\n        return this.activeCamera === this.perspectiveCamera\r\n            ? CameraProjections.Perspective\r\n            : CameraProjections.Orthographic;\r\n    }\r\n    set projection(projection) {\r\n        if (this.projection === projection)\r\n            return;\r\n        if (projection === CameraProjections.Orthographic) {\r\n            // Matching orthographic camera to perspective camera\r\n            // Resource: https://stackoverflow.com/questions/48758959/what-is-required-to-convert-threejs-perspective-camera-to-orthographic\r\n            const lineOfSight = new Vector3();\r\n            this.perspectiveCamera.getWorldDirection(lineOfSight);\r\n            const distance = this.target.clone().sub(this.perspectiveCamera.position);\r\n            const depth = distance.dot(lineOfSight);\r\n            const dims = this.context.getDimensions();\r\n            const aspect = dims.x / dims.y;\r\n            const height = depth * 2 * Math.atan((this.perspectiveCamera.fov * (Math.PI / 180)) / 2);\r\n            const width = height * aspect;\r\n            this.orthographicCamera.zoom = 1;\r\n            this.orthographicCamera.left = width / -2;\r\n            this.orthographicCamera.right = width / 2;\r\n            this.orthographicCamera.top = height / 2;\r\n            this.orthographicCamera.bottom = height / -2;\r\n            this.orthographicCamera.updateProjectionMatrix();\r\n            this.orthographicCamera.position.copy(this.perspectiveCamera.position);\r\n            this.orthographicCamera.quaternion.copy(this.perspectiveCamera.quaternion);\r\n            this.orbitControls.object = this.orthographicCamera;\r\n            this.currentCamera = this.orthographicCamera;\r\n        }\r\n        else {\r\n            this.perspectiveCamera.position.copy(this.orthographicCamera.position);\r\n            this.perspectiveCamera.quaternion.copy(this.orthographicCamera.quaternion);\r\n            this.perspectiveCamera.updateProjectionMatrix();\r\n            this.orbitControls.object = this.perspectiveCamera;\r\n            this.currentCamera = this.perspectiveCamera;\r\n        }\r\n    }\r\n    setOrbitControlsButtons(buttons) {\r\n        this.orbitControls.mouseButtons = {\r\n            LEFT: buttons.left,\r\n            MIDDLE: buttons.middle,\r\n            RIGHT: buttons.right\r\n        };\r\n    }\r\n    update(_delta) {\r\n        if (this.enabled) {\r\n            this.orbitControls.update();\r\n        }\r\n    }\r\n    /**\r\n     * @deprecated Use onChange.on() instead.\r\n     */\r\n    submitOnChange(action) {\r\n        this.onChange.on(action);\r\n    }\r\n    /**\r\n     * @deprecated Use onChange.on() instead.\r\n     */\r\n    submitOnUnlock(action) {\r\n        this.onUnlock.on(action);\r\n    }\r\n    toggleProjection() {\r\n        if (this.activeCamera === this.perspectiveCamera) {\r\n            this.projection = CameraProjections.Orthographic;\r\n        }\r\n        else {\r\n            this.projection = CameraProjections.Perspective;\r\n        }\r\n        this.onChangeProjection.trigger(this.activeCamera);\r\n    }\r\n    toggle(active, options) {\r\n        const preventAdjustment = options !== undefined && options.preventOrbitAdjustment;\r\n        if (active && !preventAdjustment) {\r\n            this.adjustTarget();\r\n        }\r\n        this.enabled = active;\r\n        this.orbitControls.enabled = active;\r\n    }\r\n    goTo(position, target, duration) {\r\n        this.context.getAnimator().move(this.currentCamera.position, position, duration);\r\n        this.context.getAnimator().move(this.orbitControls.target, target, duration);\r\n    }\r\n    goToHomeView() {\r\n        this.context.getAnimator().move(this.perspectiveCamera.position, this.startView.camera);\r\n        this.context.getAnimator().move(this.orbitControls.target, this.startView.target);\r\n    }\r\n    fitModelToFrame() {\r\n        if (!this.enabled)\r\n            return;\r\n        const { boxCenter, distance } = this.getBoxCenterAndDistance();\r\n        const direction = new Vector3()\r\n            .subVectors(this.perspectiveCamera.position, boxCenter)\r\n            .multiply(new Vector3(1, 0, 1))\r\n            .normalize();\r\n        this.perspectiveCamera.position.copy(direction.multiplyScalar(distance).add(boxCenter));\r\n        this.perspectiveCamera.updateProjectionMatrix();\r\n        this.orbitControls.target.set(boxCenter.x, boxCenter.y, boxCenter.z);\r\n    }\r\n    getBoxCenterAndDistance() {\r\n        const scene = this.context.getScene();\r\n        const box = new Box3().setFromObject(scene.children[scene.children.length - 1]);\r\n        const boxSize = box.getSize(new Vector3()).length();\r\n        const boxCenter = box.getCenter(new Vector3());\r\n        const halfSizeToFitOnScreen = boxSize * 0.5;\r\n        const halfFovY = MathUtils.degToRad(this.perspectiveCamera.fov * 0.5);\r\n        const distance = halfSizeToFitOnScreen / Math.tan(halfFovY);\r\n        return { boxCenter, distance };\r\n    }\r\n    adjustTarget() {\r\n        const cameraDir = new Vector3();\r\n        this.activeCamera.getWorldDirection(cameraDir);\r\n        cameraDir.multiplyScalar(20);\r\n        const center = new Vector3().addVectors(cameraDir, this.activeCamera.position);\r\n        this.orbitControls.target.set(center.x, center.y, center.z);\r\n    }\r\n    setupOrbitControls() {\r\n        this.orbitControls.enableDamping = true;\r\n        this.orbitControls.dampingFactor *= 2;\r\n        this.orbitControls.target.set(0, 0, 0);\r\n        const panWithMMB = this.context.options.panWithMMB || true;\r\n        if (panWithMMB) {\r\n            this.orbitControls.mouseButtons = {\r\n                RIGHT: MOUSE.RIGHT,\r\n                MIDDLE: MOUSE.RIGHT,\r\n                LEFT: MOUSE.LEFT\r\n            };\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=OrbitControl.js.map"]},"metadata":{},"sourceType":"module"}