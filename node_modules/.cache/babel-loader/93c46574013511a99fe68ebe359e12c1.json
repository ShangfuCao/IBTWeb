{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// @ts-ignore\nimport { computeBoundsTree, disposeBoundsTree, acceleratedRaycast } from 'three-mesh-bvh';\nimport { DoubleSide, MeshLambertMaterial } from 'three';\nimport { IFCLoader } from 'web-ifc-three/IFCLoader';\nimport { IfcComponent } from '../../base-types';\nimport { IfcSelection } from './selection';\nimport { VisibilityManager } from './visibility-manager';\nexport var IfcManager = /*#__PURE__*/function (_IfcComponent) {\n  _inherits(IfcManager, _IfcComponent);\n\n  var _super = _createSuper(IfcManager);\n\n  function IfcManager(context) {\n    var _this;\n\n    _classCallCheck(this, IfcManager);\n\n    _this = _super.call(this, context);\n    /**\r\n     * Highlights the item pointed by the cursor.\r\n     */\n\n    _this.prePickIfcItem = function () {\n      var found = _this.context.castRayIfc();\n\n      if (!found) {\n        _this.preselection.removeSelectionOfOtherModel();\n\n        return;\n      }\n\n      _this.preselection.pick(found);\n    };\n    /**\r\n     * Highlights the item pointed by the cursor and gets is properties.\r\n     * @focusSelection If true, animate the perspectiveCamera to focus the current selection\r\n     * @duration The length of the perspectiveCamera animation in seconds\r\n     */\n\n\n    _this.pickIfcItem = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var focusSelection,\n          duration,\n          found,\n          result,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              focusSelection = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;\n              duration = _args.length > 1 ? _args[1] : undefined;\n              found = _this.context.castRayIfc();\n\n              if (found) {\n                _context.next = 5;\n                break;\n              }\n\n              return _context.abrupt(\"return\", null);\n\n            case 5:\n              _context.next = 7;\n              return _this.selection.pick(found, focusSelection, duration);\n\n            case 7:\n              result = _context.sent;\n\n              if (!(result == null || result.modelID == null || result.id == null)) {\n                _context.next = 10;\n                break;\n              }\n\n              return _context.abrupt(\"return\", null);\n\n            case 10:\n              return _context.abrupt(\"return\", result);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    /**\r\n     * Highlights the item pointed by the cursor and gets is properties, without applying any material to it.\r\n     * @focusSelection If true, animate the perspectiveCamera to focus the current selection\r\n     * @duration The length of the perspectiveCamera animation in seconds\r\n     */\n\n    _this.highlightIfcItem = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var focusSelection,\n          duration,\n          found,\n          result,\n          _args2 = arguments;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              focusSelection = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : false;\n              duration = _args2.length > 1 ? _args2[1] : undefined;\n              found = _this.context.castRayIfc();\n\n              if (found) {\n                _context2.next = 5;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", null);\n\n            case 5:\n              _context2.next = 7;\n              return _this.highlight.pick(found, focusSelection, duration);\n\n            case 7:\n              result = _context2.sent;\n\n              if (!(result == null || result.modelID == null || result.id == null)) {\n                _context2.next = 10;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", null);\n\n            case 10:\n              return _context2.abrupt(\"return\", result);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    /**\r\n     * Highlights the item with the given ID.\r\n     * @modelID ID of the IFC model.\r\n     * @id Express ID of the item.\r\n     */\n\n    _this.pickIfcItemsByID = function (modelID, ids) {\n      var focusSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var duration = arguments.length > 3 ? arguments[3] : undefined;\n\n      _this.selection.pickByID(modelID, ids, focusSelection, duration);\n    };\n\n    _this.prepickIfcItemsByID = function (modelID, ids) {\n      var focusSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var duration = arguments.length > 3 ? arguments[3] : undefined;\n\n      _this.preselection.pickByID(modelID, ids, focusSelection, duration);\n    };\n\n    _this.highlightIfcItemsByID = function (modelID, ids) {\n      var focusSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var duration = arguments.length > 3 ? arguments[3] : undefined;\n\n      _this.highlight.pickByID(modelID, ids, focusSelection, duration);\n    };\n\n    _this.unpickIfcItems = function () {\n      _this.selection.unpick();\n    };\n\n    _this.unPrepickIfcItems = function () {\n      _this.preselection.unpick();\n    };\n\n    _this.unHighlightIfcItems = function () {\n      _this.highlight.unpick();\n    }; // TODO: Move to another file, cleanup\n\n\n    _this.newMats = {};\n    _this.context = context;\n    _this.loader = new IFCLoader();\n\n    _this.setupThreeMeshBVH();\n\n    _this.visibility = new VisibilityManager(_this.loader, _this.context);\n    _this.defSelectMat = _this.initializeDefMaterial(0xff33ff, 0.3);\n    _this.defPreselectMat = _this.initializeDefMaterial(0xffccff, 0.5);\n    _this.selectMat = context.options.selectMaterial || _this.defSelectMat;\n    _this.preselectMat = context.options.preselectMaterial || _this.defPreselectMat;\n    _this.preselection = new IfcSelection(context, _this.loader, _this.preselectMat);\n    _this.selection = new IfcSelection(context, _this.loader, _this.selectMat);\n    _this.highlight = new IfcSelection(context, _this.loader);\n    return _this;\n  }\n  /**\r\n   * Loads the given IFC in the current scene.\r\n   * @file IFC as File.\r\n   * @fitToFrame (optional) if true, brings the perspectiveCamera to the loaded IFC.\r\n   * @onError (optional) a callback function to report on loading errors\r\n   */\n\n\n  _createClass(IfcManager, [{\n    key: \"loadIfc\",\n    value: function () {\n      var _loadIfc = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(file) {\n        var fitToFrame,\n            onError,\n            url,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                fitToFrame = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : false;\n                onError = _args3.length > 2 ? _args3[2] : undefined;\n                url = URL.createObjectURL(file);\n                return _context3.abrupt(\"return\", this.loadIfcUrl(url, fitToFrame, undefined, onError));\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadIfc(_x) {\n        return _loadIfc.apply(this, arguments);\n      }\n\n      return loadIfc;\n    }()\n    /**\r\n     * Loads the given IFC in the current scene.\r\n     * @file IFC as URL.\r\n     * @fitToFrame (optional) if true, brings the perspectiveCamera to the loaded IFC.\r\n     * @onProgress (optional) a callback function to report on downloading progress\r\n     * @onError (optional) a callback function to report on loading errors\r\n     */\n\n  }, {\n    key: \"loadIfcUrl\",\n    value: function () {\n      var _loadIfcUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(url) {\n        var fitToFrame,\n            onProgress,\n            onError,\n            ifcModel,\n            _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                fitToFrame = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : false;\n                onProgress = _args4.length > 2 ? _args4[2] : undefined;\n                onError = _args4.length > 3 ? _args4[3] : undefined;\n                _context4.prev = 3;\n                _context4.next = 6;\n                return this.loader.loadAsync(url, onProgress);\n\n              case 6:\n                ifcModel = _context4.sent;\n                this.addIfcModel(ifcModel.mesh);\n                if (fitToFrame) this.context.fitToFrame();\n                return _context4.abrupt(\"return\", ifcModel);\n\n              case 12:\n                _context4.prev = 12;\n                _context4.t0 = _context4[\"catch\"](3);\n                console.error('Error loading IFC.');\n                console.error(_context4.t0);\n                if (onError) onError(_context4.t0);\n                return _context4.abrupt(\"return\", null);\n\n              case 18:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[3, 12]]);\n      }));\n\n      function loadIfcUrl(_x2) {\n        return _loadIfcUrl.apply(this, arguments);\n      }\n\n      return loadIfcUrl;\n    }()\n    /**\r\n     * Sets the relative path of web-ifc.wasm file in the project.\r\n     * Beware: you **must** serve this file in your page; this means\r\n     * that you have to copy this files from *node_modules/web-ifc*\r\n     * to your deployment directory.\r\n     *\r\n     * If you don't use this methods,\r\n     * IFC.js assumes that you are serving it in the root directory.\r\n     *\r\n     * Example if web-ifc.wasm is in dist/wasmDir:\r\n     * `ifcLoader.setWasmPath(\"dist/wasmDir/\");`\r\n     *\r\n     * @path Relative path to web-ifc.wasm.\r\n     */\n\n  }, {\n    key: \"setWasmPath\",\n    value: function setWasmPath(path) {\n      this.loader.ifcManager.setWasmPath(path);\n    }\n    /**\r\n     * Applies a configuration for [web-ifc](https://ifcjs.github.io/info/docs/Guide/web-ifc/Introduction).\r\n     */\n\n  }, {\n    key: \"applyWebIfcConfig\",\n    value: function applyWebIfcConfig(settings) {\n      this.loader.ifcManager.applyWebIfcConfig(settings);\n    }\n    /**\r\n     * Gets the spatial structure of the specified model.\r\n     * @modelID ID of the IFC model.\r\n     */\n\n  }, {\n    key: \"getSpatialStructure\",\n    value: function getSpatialStructure(modelID, includeProperties) {\n      return this.loader.ifcManager.getSpatialStructure(modelID, includeProperties);\n    }\n    /**\r\n     * Gets the properties of the specified item.\r\n     * @modelID ID of the IFC model.\r\n     * @id Express ID of the item.\r\n     * @indirect If true, also returns psets, qsets and type properties.\r\n     * @recursive If true, this gets the native properties of the referenced elements recursively.\r\n     */\n\n  }, {\n    key: \"getProperties\",\n    value: function () {\n      var _getProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(modelID, id, indirect, recursive) {\n        var props;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(modelID == null || id == null)) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", null);\n\n              case 2:\n                _context5.next = 4;\n                return this.loader.ifcManager.getItemProperties(modelID, id, recursive);\n\n              case 4:\n                props = _context5.sent;\n\n                if (!indirect) {\n                  _context5.next = 15;\n                  break;\n                }\n\n                _context5.next = 8;\n                return this.loader.ifcManager.getPropertySets(modelID, id, recursive);\n\n              case 8:\n                props.psets = _context5.sent;\n                _context5.next = 11;\n                return this.loader.ifcManager.getMaterialsProperties(modelID, id, recursive);\n\n              case 11:\n                props.mats = _context5.sent;\n                _context5.next = 14;\n                return this.loader.ifcManager.getTypeProperties(modelID, id, recursive);\n\n              case 14:\n                props.type = _context5.sent;\n\n              case 15:\n                return _context5.abrupt(\"return\", props);\n\n              case 16:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getProperties(_x3, _x4, _x5, _x6) {\n        return _getProperties.apply(this, arguments);\n      }\n\n      return getProperties;\n    }()\n    /**\r\n     * Gets the ID of the model pointed by the cursor.\r\n     */\n\n  }, {\n    key: \"getModelID\",\n    value: function getModelID() {\n      var found = this.context.castRayIfc();\n      if (!found) return null;\n      var mesh = found.object;\n      if (!mesh || mesh.modelID === undefined || mesh.modelID === null) return null;\n      return mesh.modelID;\n    }\n    /**\r\n     * Gets all the items of the specified type in the specified IFC model.\r\n     * @modelID ID of the IFC model.\r\n     * @type type of element. You can import the type from web-ifc.\r\n     * @verbose If true, also gets the properties for all the elements.\r\n     */\n\n  }, {\n    key: \"getAllItemsOfType\",\n    value: function getAllItemsOfType(modelID, type) {\n      var verbose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return this.loader.ifcManager.getAllItemsOfType(modelID, type, verbose);\n    }\n    /**\r\n     * Hides the selected items in the specified model\r\n     * @modelID ID of the IFC model.\r\n     * @ids Express ID of the elements.\r\n     */\n\n  }, {\n    key: \"hideItems\",\n    value: function hideItems(modelID, ids) {\n      this.loader.ifcManager.hideItems(modelID, ids);\n    }\n    /**\r\n     * Hides all the items of the specified model\r\n     * @modelID ID of the IFC model.\r\n     */\n\n  }, {\n    key: \"hideAllItems\",\n    value: function hideAllItems(modelID) {\n      this.loader.ifcManager.hideAllItems(modelID);\n    }\n    /**\r\n     * Shows all the items of the specified model\r\n     * @modelID ID of the IFC model.\r\n     * @ids Express ID of the elements.\r\n     */\n\n  }, {\n    key: \"showItems\",\n    value: function showItems(modelID, ids) {\n      this.loader.ifcManager.showItems(modelID, ids);\n    }\n    /**\r\n     * Shows all the items of the specified model\r\n     * @modelID ID of the IFC model.\r\n     */\n\n  }, {\n    key: \"showAllItems\",\n    value: function showAllItems(modelID) {\n      this.loader.ifcManager.showAllItems(modelID);\n    }\n    /**\r\n     * Makes an IFC model translucent\r\n     * @modelID ID of the IFC model.\r\n     * @translucent wether to activate or deactivate the translucency.\r\n     * @opacity the opacity of the translucent material.\r\n     * @selectable wether the translucent models are selectable with the mouse.\r\n     */\n\n  }, {\n    key: \"setModelTranslucency\",\n    value: function setModelTranslucency(modelID, translucent) {\n      var opacity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.2;\n      var selectable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var model = this.context.items.ifcModels.find(function (model) {\n        return model.modelID === modelID;\n      });\n      if (!model) return;\n\n      if (Array.isArray(model.material)) {\n        model.material.forEach(function (material) {\n          if (material.userData.opacity === undefined) {\n            material.userData = {\n              transparent: material.transparent,\n              opacity: material.opacity\n            };\n          }\n        });\n        if (!this.newMats[modelID]) this.newMats[modelID] = model.material.map(function (mat) {\n          return mat.clone();\n        });\n        var newMats = this.newMats[modelID];\n        newMats.forEach(function (mat) {\n          mat.opacity = translucent ? opacity : mat.userData.opacity;\n          mat.transparent = translucent ? true : mat.userData.transparent;\n        });\n        model.material = newMats;\n      }\n\n      if (translucent && !selectable) {\n        var index = this.context.items.pickableIfcModels.indexOf(model);\n        this.context.items.pickableIfcModels.splice(index, 1);\n      } else if (!this.context.items.pickableIfcModels.includes(model)) {\n        this.context.items.pickableIfcModels.push(model);\n      }\n    }\n  }, {\n    key: \"addIfcModel\",\n    value: function addIfcModel(ifcMesh) {\n      this.context.items.ifcModels.push(ifcMesh);\n      this.context.items.pickableIfcModels.push(ifcMesh);\n      this.context.getScene().add(ifcMesh);\n    }\n  }, {\n    key: \"setupThreeMeshBVH\",\n    value: function setupThreeMeshBVH() {\n      this.loader.ifcManager.setupThreeMeshBVH(computeBoundsTree, disposeBoundsTree, acceleratedRaycast);\n    }\n  }, {\n    key: \"initializeDefMaterial\",\n    value: function initializeDefMaterial(color, opacity) {\n      return new MeshLambertMaterial({\n        color: color,\n        opacity: opacity,\n        transparent: true,\n        depthTest: false,\n        side: DoubleSide\n      });\n    }\n  }]);\n\n  return IfcManager;\n}(IfcComponent);","map":{"version":3,"sources":["../../../src/components/ifc/ifc-manager.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// @ts-ignore\r\nimport { computeBoundsTree, disposeBoundsTree, acceleratedRaycast } from 'three-mesh-bvh';\r\nimport { DoubleSide, MeshLambertMaterial } from 'three';\r\nimport { IFCLoader } from 'web-ifc-three/IFCLoader';\r\nimport { IfcComponent } from '../../base-types';\r\nimport { IfcSelection } from './selection';\r\nimport { VisibilityManager } from './visibility-manager';\r\nexport class IfcManager extends IfcComponent {\r\n    constructor(context) {\r\n        super(context);\r\n        /**\r\n         * Highlights the item pointed by the cursor.\r\n         */\r\n        this.prePickIfcItem = () => {\r\n            const found = this.context.castRayIfc();\r\n            if (!found) {\r\n                this.preselection.removeSelectionOfOtherModel();\r\n                return;\r\n            }\r\n            this.preselection.pick(found);\r\n        };\r\n        /**\r\n         * Highlights the item pointed by the cursor and gets is properties.\r\n         * @focusSelection If true, animate the perspectiveCamera to focus the current selection\r\n         * @duration The length of the perspectiveCamera animation in seconds\r\n         */\r\n        this.pickIfcItem = async (focusSelection = false, duration) => {\r\n            const found = this.context.castRayIfc();\r\n            if (!found)\r\n                return null;\r\n            const result = await this.selection.pick(found, focusSelection, duration);\r\n            if (result == null || result.modelID == null || result.id == null)\r\n                return null;\r\n            return result;\r\n        };\r\n        /**\r\n         * Highlights the item pointed by the cursor and gets is properties, without applying any material to it.\r\n         * @focusSelection If true, animate the perspectiveCamera to focus the current selection\r\n         * @duration The length of the perspectiveCamera animation in seconds\r\n         */\r\n        this.highlightIfcItem = async (focusSelection = false, duration) => {\r\n            const found = this.context.castRayIfc();\r\n            if (!found)\r\n                return null;\r\n            const result = await this.highlight.pick(found, focusSelection, duration);\r\n            if (result == null || result.modelID == null || result.id == null)\r\n                return null;\r\n            return result;\r\n        };\r\n        /**\r\n         * Highlights the item with the given ID.\r\n         * @modelID ID of the IFC model.\r\n         * @id Express ID of the item.\r\n         */\r\n        this.pickIfcItemsByID = (modelID, ids, focusSelection = false, duration) => {\r\n            this.selection.pickByID(modelID, ids, focusSelection, duration);\r\n        };\r\n        this.prepickIfcItemsByID = (modelID, ids, focusSelection = false, duration) => {\r\n            this.preselection.pickByID(modelID, ids, focusSelection, duration);\r\n        };\r\n        this.highlightIfcItemsByID = (modelID, ids, focusSelection = false, duration) => {\r\n            this.highlight.pickByID(modelID, ids, focusSelection, duration);\r\n        };\r\n        this.unpickIfcItems = () => {\r\n            this.selection.unpick();\r\n        };\r\n        this.unPrepickIfcItems = () => {\r\n            this.preselection.unpick();\r\n        };\r\n        this.unHighlightIfcItems = () => {\r\n            this.highlight.unpick();\r\n        };\r\n        // TODO: Move to another file, cleanup\r\n        this.newMats = {};\r\n        this.context = context;\r\n        this.loader = new IFCLoader();\r\n        this.setupThreeMeshBVH();\r\n        this.visibility = new VisibilityManager(this.loader, this.context);\r\n        this.defSelectMat = this.initializeDefMaterial(0xff33ff, 0.3);\r\n        this.defPreselectMat = this.initializeDefMaterial(0xffccff, 0.5);\r\n        this.selectMat = context.options.selectMaterial || this.defSelectMat;\r\n        this.preselectMat = context.options.preselectMaterial || this.defPreselectMat;\r\n        this.preselection = new IfcSelection(context, this.loader, this.preselectMat);\r\n        this.selection = new IfcSelection(context, this.loader, this.selectMat);\r\n        this.highlight = new IfcSelection(context, this.loader);\r\n    }\r\n    /**\r\n     * Loads the given IFC in the current scene.\r\n     * @file IFC as File.\r\n     * @fitToFrame (optional) if true, brings the perspectiveCamera to the loaded IFC.\r\n     * @onError (optional) a callback function to report on loading errors\r\n     */\r\n    async loadIfc(file, fitToFrame = false, onError) {\r\n        const url = URL.createObjectURL(file);\r\n        return this.loadIfcUrl(url, fitToFrame, undefined, onError);\r\n    }\r\n    /**\r\n     * Loads the given IFC in the current scene.\r\n     * @file IFC as URL.\r\n     * @fitToFrame (optional) if true, brings the perspectiveCamera to the loaded IFC.\r\n     * @onProgress (optional) a callback function to report on downloading progress\r\n     * @onError (optional) a callback function to report on loading errors\r\n     */\r\n    async loadIfcUrl(url, fitToFrame = false, onProgress, onError) {\r\n        try {\r\n            const ifcModel = (await this.loader.loadAsync(url, onProgress));\r\n            this.addIfcModel(ifcModel.mesh);\r\n            if (fitToFrame)\r\n                this.context.fitToFrame();\r\n            return ifcModel;\r\n        }\r\n        catch (err) {\r\n            console.error('Error loading IFC.');\r\n            console.error(err);\r\n            if (onError)\r\n                onError(err);\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Sets the relative path of web-ifc.wasm file in the project.\r\n     * Beware: you **must** serve this file in your page; this means\r\n     * that you have to copy this files from *node_modules/web-ifc*\r\n     * to your deployment directory.\r\n     *\r\n     * If you don't use this methods,\r\n     * IFC.js assumes that you are serving it in the root directory.\r\n     *\r\n     * Example if web-ifc.wasm is in dist/wasmDir:\r\n     * `ifcLoader.setWasmPath(\"dist/wasmDir/\");`\r\n     *\r\n     * @path Relative path to web-ifc.wasm.\r\n     */\r\n    setWasmPath(path) {\r\n        this.loader.ifcManager.setWasmPath(path);\r\n    }\r\n    /**\r\n     * Applies a configuration for [web-ifc](https://ifcjs.github.io/info/docs/Guide/web-ifc/Introduction).\r\n     */\r\n    applyWebIfcConfig(settings) {\r\n        this.loader.ifcManager.applyWebIfcConfig(settings);\r\n    }\r\n    /**\r\n     * Gets the spatial structure of the specified model.\r\n     * @modelID ID of the IFC model.\r\n     */\r\n    getSpatialStructure(modelID, includeProperties) {\r\n        return this.loader.ifcManager.getSpatialStructure(modelID, includeProperties);\r\n    }\r\n    /**\r\n     * Gets the properties of the specified item.\r\n     * @modelID ID of the IFC model.\r\n     * @id Express ID of the item.\r\n     * @indirect If true, also returns psets, qsets and type properties.\r\n     * @recursive If true, this gets the native properties of the referenced elements recursively.\r\n     */\r\n    async getProperties(modelID, id, indirect, recursive) {\r\n        if (modelID == null || id == null)\r\n            return null;\r\n        const props = await this.loader.ifcManager.getItemProperties(modelID, id, recursive);\r\n        if (indirect) {\r\n            props.psets = await this.loader.ifcManager.getPropertySets(modelID, id, recursive);\r\n            props.mats = await this.loader.ifcManager.getMaterialsProperties(modelID, id, recursive);\r\n            props.type = await this.loader.ifcManager.getTypeProperties(modelID, id, recursive);\r\n        }\r\n        return props;\r\n    }\r\n    /**\r\n     * Gets the ID of the model pointed by the cursor.\r\n     */\r\n    getModelID() {\r\n        const found = this.context.castRayIfc();\r\n        if (!found)\r\n            return null;\r\n        const mesh = found.object;\r\n        if (!mesh || mesh.modelID === undefined || mesh.modelID === null)\r\n            return null;\r\n        return mesh.modelID;\r\n    }\r\n    /**\r\n     * Gets all the items of the specified type in the specified IFC model.\r\n     * @modelID ID of the IFC model.\r\n     * @type type of element. You can import the type from web-ifc.\r\n     * @verbose If true, also gets the properties for all the elements.\r\n     */\r\n    getAllItemsOfType(modelID, type, verbose = false) {\r\n        return this.loader.ifcManager.getAllItemsOfType(modelID, type, verbose);\r\n    }\r\n    /**\r\n     * Hides the selected items in the specified model\r\n     * @modelID ID of the IFC model.\r\n     * @ids Express ID of the elements.\r\n     */\r\n    hideItems(modelID, ids) {\r\n        this.loader.ifcManager.hideItems(modelID, ids);\r\n    }\r\n    /**\r\n     * Hides all the items of the specified model\r\n     * @modelID ID of the IFC model.\r\n     */\r\n    hideAllItems(modelID) {\r\n        this.loader.ifcManager.hideAllItems(modelID);\r\n    }\r\n    /**\r\n     * Shows all the items of the specified model\r\n     * @modelID ID of the IFC model.\r\n     * @ids Express ID of the elements.\r\n     */\r\n    showItems(modelID, ids) {\r\n        this.loader.ifcManager.showItems(modelID, ids);\r\n    }\r\n    /**\r\n     * Shows all the items of the specified model\r\n     * @modelID ID of the IFC model.\r\n     */\r\n    showAllItems(modelID) {\r\n        this.loader.ifcManager.showAllItems(modelID);\r\n    }\r\n    /**\r\n     * Makes an IFC model translucent\r\n     * @modelID ID of the IFC model.\r\n     * @translucent wether to activate or deactivate the translucency.\r\n     * @opacity the opacity of the translucent material.\r\n     * @selectable wether the translucent models are selectable with the mouse.\r\n     */\r\n    setModelTranslucency(modelID, translucent, opacity = 0.2, selectable = false) {\r\n        const model = this.context.items.ifcModels.find((model) => model.modelID === modelID);\r\n        if (!model)\r\n            return;\r\n        if (Array.isArray(model.material)) {\r\n            model.material.forEach((material) => {\r\n                if (material.userData.opacity === undefined) {\r\n                    material.userData = { transparent: material.transparent, opacity: material.opacity };\r\n                }\r\n            });\r\n            if (!this.newMats[modelID])\r\n                this.newMats[modelID] = model.material.map((mat) => mat.clone());\r\n            const newMats = this.newMats[modelID];\r\n            newMats.forEach((mat) => {\r\n                mat.opacity = translucent ? opacity : mat.userData.opacity;\r\n                mat.transparent = translucent ? true : mat.userData.transparent;\r\n            });\r\n            model.material = newMats;\r\n        }\r\n        if (translucent && !selectable) {\r\n            const index = this.context.items.pickableIfcModels.indexOf(model);\r\n            this.context.items.pickableIfcModels.splice(index, 1);\r\n        }\r\n        else if (!this.context.items.pickableIfcModels.includes(model)) {\r\n            this.context.items.pickableIfcModels.push(model);\r\n        }\r\n    }\r\n    addIfcModel(ifcMesh) {\r\n        this.context.items.ifcModels.push(ifcMesh);\r\n        this.context.items.pickableIfcModels.push(ifcMesh);\r\n        this.context.getScene().add(ifcMesh);\r\n    }\r\n    setupThreeMeshBVH() {\r\n        this.loader.ifcManager.setupThreeMeshBVH(computeBoundsTree, disposeBoundsTree, acceleratedRaycast);\r\n    }\r\n    initializeDefMaterial(color, opacity) {\r\n        return new MeshLambertMaterial({\r\n            color,\r\n            opacity,\r\n            transparent: true,\r\n            depthTest: false,\r\n            side: DoubleSide\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=ifc-manager.js.map"]},"metadata":{},"sourceType":"module"}