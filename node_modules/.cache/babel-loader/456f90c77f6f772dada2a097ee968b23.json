{"ast":null,"code":"import { BlendFunction, EffectComposer, EffectPass, NormalPass, RenderPass, SSAOEffect // @ts-ignore\n} from 'postprocessing';\nimport { WebGLRenderer } from 'three';\nimport { IfcEvent } from '../ifcEvent';\nexport class IfcPostproduction {\n  constructor(context, canvas) {\n    this.context = context;\n    this.setupEvents();\n    this.renderer = new WebGLRenderer({\n      canvas,\n      powerPreference: 'high-performance',\n      antialias: false,\n      stencil: false,\n      depth: false\n    });\n    this.renderer.localClippingEnabled = true;\n    this.composer = new EffectComposer(this.renderer);\n  }\n\n  get domElement() {\n    return this.renderer.domElement;\n  }\n\n  render() {\n    this.composer.render();\n  }\n\n  setSize(width, height) {\n    this.composer.setSize(width, height);\n  }\n\n  setupEvents() {\n    const createPasses = (scene, camera) => {\n      const normalPass = new NormalPass(scene, camera, {\n        resolutionScale: 1.0\n      });\n      this.ssaoEffect = new SSAOEffect(camera, normalPass.renderTarget.texture, {\n        blendFunction: BlendFunction.MULTIPLY,\n        // blendFunction: POSTPROCESSING.BlendFunction.ALPHA,\n        samples: 32,\n        rings: 5,\n        distanceThreshold: 0.0,\n        distanceFalloff: 1.0,\n        rangeThreshold: 0.0,\n        rangeFalloff: 1.0,\n        luminanceInfluence: 0.0,\n        scale: 0.6,\n        radius: 0.03,\n        bias: 0.03,\n        intensity: 10.0\n      });\n      this.ssaoEffect.ssaoMaterial.uniforms.fade.value = 1;\n      this.ssaoEffect.resolution.scale = 1.5;\n      this.ssaoEffect.blendMode.opacity.value = 1.2; // Scale, Bias and Opacity influence intensity.\n\n      this.ssaoEffect.blendMode.opacity.value = 1.0;\n      const renderPass = new RenderPass(scene, camera);\n      const effectPass = new EffectPass(camera, this.ssaoEffect);\n      effectPass.renderToScreen = true;\n      return [renderPass, normalPass, effectPass];\n    };\n\n    const setupPasses = (scene, camera) => {\n      const passes = createPasses(scene, camera);\n      passes.forEach(pass => this.composer.addPass(pass));\n    };\n\n    this.context.events.subscribe(IfcEvent.onCameraReady, () => {\n      const scene = this.context.getScene();\n      const camera = this.context.ifcCamera;\n      camera.onChangeProjection.on(camera => {\n        this.composer.removeAllPasses();\n        setupPasses(this.context.getScene(), camera);\n      });\n      setupPasses(scene, camera.activeCamera);\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../../src/components/context/renderer/postproduction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { BlendFunction, EffectComposer, EffectPass, NormalPass, RenderPass, SSAOEffect\r\n// @ts-ignore\r\n } from 'postprocessing';\r\nimport { WebGLRenderer } from 'three';\r\nimport { IfcEvent } from '../ifcEvent';\r\nexport class IfcPostproduction {\r\n    constructor(context, canvas) {\r\n        this.context = context;\r\n        this.setupEvents();\r\n        this.renderer = new WebGLRenderer({\r\n            canvas,\r\n            powerPreference: 'high-performance',\r\n            antialias: false,\r\n            stencil: false,\r\n            depth: false\r\n        });\r\n        this.renderer.localClippingEnabled = true;\r\n        this.composer = new EffectComposer(this.renderer);\r\n    }\r\n    get domElement() {\r\n        return this.renderer.domElement;\r\n    }\r\n    render() {\r\n        this.composer.render();\r\n    }\r\n    setSize(width, height) {\r\n        this.composer.setSize(width, height);\r\n    }\r\n    setupEvents() {\r\n        const createPasses = (scene, camera) => {\r\n            const normalPass = new NormalPass(scene, camera, {\r\n                resolutionScale: 1.0\r\n            });\r\n            this.ssaoEffect = new SSAOEffect(camera, normalPass.renderTarget.texture, {\r\n                blendFunction: BlendFunction.MULTIPLY,\r\n                // blendFunction: POSTPROCESSING.BlendFunction.ALPHA,\r\n                samples: 32,\r\n                rings: 5,\r\n                distanceThreshold: 0.0,\r\n                distanceFalloff: 1.0,\r\n                rangeThreshold: 0.0,\r\n                rangeFalloff: 1.0,\r\n                luminanceInfluence: 0.0,\r\n                scale: 0.6,\r\n                radius: 0.03,\r\n                bias: 0.03,\r\n                intensity: 10.0\r\n            });\r\n            this.ssaoEffect.ssaoMaterial.uniforms.fade.value = 1;\r\n            this.ssaoEffect.resolution.scale = 1.5;\r\n            this.ssaoEffect.blendMode.opacity.value = 1.2;\r\n            // Scale, Bias and Opacity influence intensity.\r\n            this.ssaoEffect.blendMode.opacity.value = 1.0;\r\n            const renderPass = new RenderPass(scene, camera);\r\n            const effectPass = new EffectPass(camera, this.ssaoEffect);\r\n            effectPass.renderToScreen = true;\r\n            return [renderPass, normalPass, effectPass];\r\n        };\r\n        const setupPasses = (scene, camera) => {\r\n            const passes = createPasses(scene, camera);\r\n            passes.forEach((pass) => this.composer.addPass(pass));\r\n        };\r\n        this.context.events.subscribe(IfcEvent.onCameraReady, () => {\r\n            const scene = this.context.getScene();\r\n            const camera = this.context.ifcCamera;\r\n            camera.onChangeProjection.on((camera) => {\r\n                this.composer.removeAllPasses();\r\n                setupPasses(this.context.getScene(), camera);\r\n            });\r\n            setupPasses(scene, camera.activeCamera);\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=postproduction.js.map"]},"metadata":{},"sourceType":"module"}