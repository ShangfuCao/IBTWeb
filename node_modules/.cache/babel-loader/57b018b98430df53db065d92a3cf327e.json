{"ast":null,"code":"import { OrthographicCamera, PerspectiveCamera, Vector3 } from 'three';\nimport { IfcComponent, NavigationModes } from '../../../base-types';\nimport { LiteEvent } from '../../../utils/LiteEvent';\nimport { FirstPersonControl } from './FirstPersonControl';\nimport { OrbitControl } from './OrbitControl';\nconst frustumSize = 50;\nexport class IfcCamera extends IfcComponent {\n  constructor(context) {\n    super(context);\n    this.onChange = new LiteEvent();\n    this.onUnlock = new LiteEvent();\n    this.onChangeProjection = new LiteEvent();\n    this.context = context;\n    const dims = this.context.getDimensions();\n    const aspect = dims.x / dims.y;\n    this.perspectiveCamera = new PerspectiveCamera(45, aspect, 0.1, 1000);\n    this.orthographicCamera = new OrthographicCamera(frustumSize * aspect / -2, frustumSize * aspect / 2, frustumSize / 2, frustumSize / -2, 0.1, 1000);\n    this.setupCamera();\n    this.navMode = {\n      [NavigationModes.Orbit]: new OrbitControl(this.context, this.perspectiveCamera, this.orthographicCamera),\n      [NavigationModes.FirstPerson]: new FirstPersonControl(this.context, this.perspectiveCamera, this)\n    };\n    this.currentNavMode = this.navMode[NavigationModes.Orbit];\n    this.currentNavMode.toggle(true, {\n      preventTargetAdjustment: true\n    });\n    Object.values(this.navMode).forEach(mode => {\n      mode.onChange.on(this.onChange.trigger);\n      mode.onUnlock.on(this.onUnlock.trigger);\n      mode.onChangeProjection.on(this.onChangeProjection.trigger);\n    });\n  }\n\n  get target() {\n    const orbitControls = this.navMode[NavigationModes.Orbit];\n    return orbitControls.target;\n  }\n\n  get activeCamera() {\n    return this.currentNavMode.mode === NavigationModes.FirstPerson ? this.perspectiveCamera : this.navMode[NavigationModes.Orbit].activeCamera;\n  }\n\n  get projection() {\n    return this.navMode[NavigationModes.Orbit].projection;\n  }\n\n  set projection(projection) {\n    this.navMode[NavigationModes.Orbit].projection = projection;\n  }\n\n  updateAspect() {\n    const dims = this.context.getDimensions();\n    const aspect = dims.x / dims.y;\n    this.perspectiveCamera.aspect = dims.x / dims.y;\n    this.perspectiveCamera.updateProjectionMatrix();\n    this.orthographicCamera.left = -frustumSize * aspect / 2;\n    this.orthographicCamera.right = frustumSize * aspect / 2;\n    this.orthographicCamera.top = frustumSize / 2;\n    this.orthographicCamera.bottom = -frustumSize / 2;\n    this.orthographicCamera.updateProjectionMatrix();\n  }\n  /**\r\n   * @deprecated Use onChange.on() instead.\r\n   */\n\n\n  submitOnChange(action) {\n    this.onChange.on(action);\n  }\n  /**\r\n   * @deprecated Use onUnlock.on() instead.\r\n   */\n\n\n  submitOnUnlock(action) {\n    this.onUnlock.on(action);\n  }\n\n  setNavigationMode(mode) {\n    this.currentNavMode.toggle(false);\n    this.currentNavMode = this.navMode[mode];\n    this.currentNavMode.toggle(true);\n  }\n\n  setOrbitControlsButtons(buttons) {\n    const orbitControls = this.setOrbitControls();\n    orbitControls.setOrbitControlsButtons(buttons);\n  }\n\n  toggleCameraControls(active, options) {\n    this.currentNavMode.toggle(active, options);\n  }\n\n  toggleProjection() {\n    this.navMode[NavigationModes.Orbit].toggleProjection();\n  }\n\n  targetItem(mesh) {\n    let duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const orbitControls = this.setOrbitControls();\n    orbitControls.targetItem(mesh, duration);\n  }\n\n  goTo(position, target) {\n    let duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const orbitControls = this.setOrbitControls();\n    orbitControls.goTo(position, target, duration);\n  }\n\n  goToHomeView() {\n    const orbitControls = this.setOrbitControls();\n    orbitControls.goToHomeView();\n  }\n\n  setHomeView(camera, target) {\n    const orbitControls = this.navMode[NavigationModes.Orbit];\n    orbitControls.homeView = {\n      camera,\n      target\n    };\n  }\n\n  unlock() {\n    const firstPerson = this.navMode[NavigationModes.FirstPerson];\n    firstPerson.controls.unlock();\n  }\n\n  setOrbitControls() {\n    this.setNavigationMode(NavigationModes.Orbit);\n    return this.currentNavMode;\n  }\n\n  setupCamera() {\n    this.perspectiveCamera.position.z = 10;\n    this.perspectiveCamera.position.y = 10;\n    this.perspectiveCamera.position.x = 10;\n    this.perspectiveCamera.lookAt(new Vector3(0, 0, 0));\n    this.orthographicCamera.position.z = 10;\n    this.orthographicCamera.position.y = 10;\n    this.orthographicCamera.position.x = 10;\n    this.orthographicCamera.lookAt(new Vector3(0, 0, 0));\n  }\n\n}","map":{"version":3,"sources":["../../../../src/components/context/camera/camera.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { OrthographicCamera, PerspectiveCamera, Vector3 } from 'three';\r\nimport { IfcComponent, NavigationModes } from '../../../base-types';\r\nimport { LiteEvent } from '../../../utils/LiteEvent';\r\nimport { FirstPersonControl } from './FirstPersonControl';\r\nimport { OrbitControl } from './OrbitControl';\r\nconst frustumSize = 50;\r\nexport class IfcCamera extends IfcComponent {\r\n    constructor(context) {\r\n        super(context);\r\n        this.onChange = new LiteEvent();\r\n        this.onUnlock = new LiteEvent();\r\n        this.onChangeProjection = new LiteEvent();\r\n        this.context = context;\r\n        const dims = this.context.getDimensions();\r\n        const aspect = dims.x / dims.y;\r\n        this.perspectiveCamera = new PerspectiveCamera(45, aspect, 0.1, 1000);\r\n        this.orthographicCamera = new OrthographicCamera((frustumSize * aspect) / -2, (frustumSize * aspect) / 2, frustumSize / 2, frustumSize / -2, 0.1, 1000);\r\n        this.setupCamera();\r\n        this.navMode = {\r\n            [NavigationModes.Orbit]: new OrbitControl(this.context, this.perspectiveCamera, this.orthographicCamera),\r\n            [NavigationModes.FirstPerson]: new FirstPersonControl(this.context, this.perspectiveCamera, this)\r\n        };\r\n        this.currentNavMode = this.navMode[NavigationModes.Orbit];\r\n        this.currentNavMode.toggle(true, { preventTargetAdjustment: true });\r\n        Object.values(this.navMode).forEach((mode) => {\r\n            mode.onChange.on(this.onChange.trigger);\r\n            mode.onUnlock.on(this.onUnlock.trigger);\r\n            mode.onChangeProjection.on(this.onChangeProjection.trigger);\r\n        });\r\n    }\r\n    get target() {\r\n        const orbitControls = this.navMode[NavigationModes.Orbit];\r\n        return orbitControls.target;\r\n    }\r\n    get activeCamera() {\r\n        return this.currentNavMode.mode === NavigationModes.FirstPerson\r\n            ? this.perspectiveCamera\r\n            : this.navMode[NavigationModes.Orbit].activeCamera;\r\n    }\r\n    get projection() {\r\n        return this.navMode[NavigationModes.Orbit].projection;\r\n    }\r\n    set projection(projection) {\r\n        this.navMode[NavigationModes.Orbit].projection = projection;\r\n    }\r\n    updateAspect() {\r\n        const dims = this.context.getDimensions();\r\n        const aspect = dims.x / dims.y;\r\n        this.perspectiveCamera.aspect = dims.x / dims.y;\r\n        this.perspectiveCamera.updateProjectionMatrix();\r\n        this.orthographicCamera.left = (-frustumSize * aspect) / 2;\r\n        this.orthographicCamera.right = (frustumSize * aspect) / 2;\r\n        this.orthographicCamera.top = frustumSize / 2;\r\n        this.orthographicCamera.bottom = -frustumSize / 2;\r\n        this.orthographicCamera.updateProjectionMatrix();\r\n    }\r\n    /**\r\n     * @deprecated Use onChange.on() instead.\r\n     */\r\n    submitOnChange(action) {\r\n        this.onChange.on(action);\r\n    }\r\n    /**\r\n     * @deprecated Use onUnlock.on() instead.\r\n     */\r\n    submitOnUnlock(action) {\r\n        this.onUnlock.on(action);\r\n    }\r\n    setNavigationMode(mode) {\r\n        this.currentNavMode.toggle(false);\r\n        this.currentNavMode = this.navMode[mode];\r\n        this.currentNavMode.toggle(true);\r\n    }\r\n    setOrbitControlsButtons(buttons) {\r\n        const orbitControls = this.setOrbitControls();\r\n        orbitControls.setOrbitControlsButtons(buttons);\r\n    }\r\n    toggleCameraControls(active, options) {\r\n        this.currentNavMode.toggle(active, options);\r\n    }\r\n    toggleProjection() {\r\n        this.navMode[NavigationModes.Orbit].toggleProjection();\r\n    }\r\n    targetItem(mesh, duration = 1) {\r\n        const orbitControls = this.setOrbitControls();\r\n        orbitControls.targetItem(mesh, duration);\r\n    }\r\n    goTo(position, target, duration = 0) {\r\n        const orbitControls = this.setOrbitControls();\r\n        orbitControls.goTo(position, target, duration);\r\n    }\r\n    goToHomeView() {\r\n        const orbitControls = this.setOrbitControls();\r\n        orbitControls.goToHomeView();\r\n    }\r\n    setHomeView(camera, target) {\r\n        const orbitControls = this.navMode[NavigationModes.Orbit];\r\n        orbitControls.homeView = { camera, target };\r\n    }\r\n    unlock() {\r\n        const firstPerson = this.navMode[NavigationModes.FirstPerson];\r\n        firstPerson.controls.unlock();\r\n    }\r\n    setOrbitControls() {\r\n        this.setNavigationMode(NavigationModes.Orbit);\r\n        return this.currentNavMode;\r\n    }\r\n    setupCamera() {\r\n        this.perspectiveCamera.position.z = 10;\r\n        this.perspectiveCamera.position.y = 10;\r\n        this.perspectiveCamera.position.x = 10;\r\n        this.perspectiveCamera.lookAt(new Vector3(0, 0, 0));\r\n        this.orthographicCamera.position.z = 10;\r\n        this.orthographicCamera.position.y = 10;\r\n        this.orthographicCamera.position.x = 10;\r\n        this.orthographicCamera.lookAt(new Vector3(0, 0, 0));\r\n    }\r\n}\r\n//# sourceMappingURL=camera.js.map"]},"metadata":{},"sourceType":"module"}