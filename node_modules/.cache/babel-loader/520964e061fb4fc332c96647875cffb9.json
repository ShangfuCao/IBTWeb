{"ast":null,"code":"import _classCallCheck from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { BoxGeometry, BufferGeometry, Group, Line, Mesh, Vector3 } from 'three';\nimport { CSS2DObject } from 'three/examples/jsm/renderers/CSS2DRenderer';\nexport var IfcDimensionLine = /*#__PURE__*/function () {\n  function IfcDimensionLine(context, start, end, lineMaterial, endpointMaterial, endpointGeometry, className, endpointScale) {\n    var _this = this;\n\n    _classCallCheck(this, IfcDimensionLine);\n\n    // Elements\n    this.root = new Group();\n    this.endpointMeshes = [];\n    this.scale = new Vector3(1, 1, 1);\n    this.boundingSize = 0.05;\n    this.context = context;\n    this.labelClassName = className;\n    this.start = start;\n    this.end = end;\n    this.scale = endpointScale;\n    this.lineMaterial = lineMaterial;\n    this.endpointMaterial = endpointMaterial;\n    this.length = this.getLength();\n    this.center = this.getCenter();\n    this.axis = new BufferGeometry().setFromPoints([start, end]);\n    this.line = new Line(this.axis, this.lineMaterial);\n    this.root.add(this.line);\n    this.endpoint = endpointGeometry;\n    this.addEndpointMeshes();\n    this.textLabel = this.newText();\n    this.root.renderOrder = 2;\n    this.context.getScene().add(this.root);\n    this.camera = this.context.getCamera();\n    this.context.ifcCamera.onChange.on(function () {\n      return _this.rescaleObjectsToCameraPosition();\n    });\n    this.rescaleObjectsToCameraPosition();\n  }\n\n  _createClass(IfcDimensionLine, [{\n    key: \"boundingBox\",\n    get: function get() {\n      return this.boundingMesh;\n    }\n  }, {\n    key: \"text\",\n    get: function get() {\n      return this.textLabel;\n    }\n  }, {\n    key: \"dimensionColor\",\n    set: function set(dimensionColor) {\n      this.endpointMaterial.color = dimensionColor;\n      this.lineMaterial.color = dimensionColor;\n    }\n  }, {\n    key: \"visibility\",\n    set: function set(visible) {\n      this.root.visible = visible;\n      this.textLabel.visible = visible;\n    }\n  }, {\n    key: \"endpointGeometry\",\n    set: function set(geometry) {\n      var _this2 = this;\n\n      this.endpointMeshes.forEach(function (mesh) {\n        return _this2.root.remove(mesh);\n      });\n      this.endpointMeshes = [];\n      this.endpoint = geometry;\n      this.addEndpointMeshes();\n    }\n  }, {\n    key: \"endpointScale\",\n    set: function set(scale) {\n      this.scale = scale;\n      this.endpointMeshes.forEach(function (mesh) {\n        return mesh.scale.set(scale.x, scale.y, scale.z);\n      });\n    }\n  }, {\n    key: \"endPoint\",\n    set: function set(point) {\n      this.end = point;\n      if (!this.axis) return;\n      var position = this.axis.attributes.position;\n      if (!position) return;\n      position.setXYZ(1, point.x, point.y, point.z);\n      position.needsUpdate = true;\n      this.endpointMeshes[1].position.set(point.x, point.y, point.z);\n      this.endpointMeshes[1].lookAt(this.start);\n      this.endpointMeshes[0].lookAt(this.end);\n      this.length = this.getLength();\n      this.textLabel.element.textContent = this.getTextContent();\n      this.center = this.getCenter();\n      this.textLabel.position.set(this.center.x, this.center.y, this.center.z);\n      this.line.computeLineDistances();\n    }\n  }, {\n    key: \"removeFromScene\",\n    value: function removeFromScene() {\n      this.context.getScene().remove(this.root);\n      this.root.remove(this.textLabel);\n    }\n  }, {\n    key: \"createBoundingBox\",\n    value: function createBoundingBox() {\n      this.boundingMesh = this.newBoundingBox();\n      this.setupBoundingBox(this.end);\n    }\n  }, {\n    key: \"rescaleObjectsToCameraPosition\",\n    value: function rescaleObjectsToCameraPosition() {\n      var _this3 = this;\n\n      this.endpointMeshes.forEach(function (mesh) {\n        return _this3.rescaleMesh(mesh, IfcDimensionLine.scaleFactor);\n      });\n\n      if (this.boundingMesh) {\n        this.rescaleMesh(this.boundingMesh, this.boundingSize, true, true, false);\n      }\n    }\n  }, {\n    key: \"rescaleMesh\",\n    value: function rescaleMesh(mesh) {\n      var scalefactor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var z = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n      var scale = new Vector3().subVectors(mesh.position, this.camera.position).length();\n      scale *= scalefactor;\n      var scaleX = x ? scale : 1;\n      var scaleY = y ? scale : 1;\n      var scaleZ = z ? scale : 1;\n      mesh.scale.set(scaleX, scaleY, scaleZ);\n    }\n  }, {\n    key: \"addEndpointMeshes\",\n    value: function addEndpointMeshes() {\n      this.newEndpointMesh(this.start, this.end);\n      this.newEndpointMesh(this.end, this.start);\n    }\n  }, {\n    key: \"newEndpointMesh\",\n    value: function newEndpointMesh(position, direction) {\n      var mesh = new Mesh(this.endpoint, this.endpointMaterial);\n      mesh.position.set(position.x, position.y, position.z);\n      mesh.scale.set(this.scale.x, this.scale.y, this.scale.z);\n      mesh.lookAt(direction);\n      this.endpointMeshes.push(mesh);\n      this.root.add(mesh);\n    }\n  }, {\n    key: \"newText\",\n    value: function newText() {\n      var htmlText = document.createElement('div');\n      htmlText.className = this.labelClassName;\n      htmlText.textContent = this.getTextContent();\n      var label = new CSS2DObject(htmlText);\n      label.position.set(this.center.x, this.center.y, this.center.z);\n      this.root.add(label);\n      return label;\n    }\n  }, {\n    key: \"getTextContent\",\n    value: function getTextContent() {\n      return \"\".concat(this.length, \" m\");\n    }\n  }, {\n    key: \"newBoundingBox\",\n    value: function newBoundingBox() {\n      var box = new BoxGeometry(1, 1, this.length);\n      return new Mesh(box);\n    }\n  }, {\n    key: \"setupBoundingBox\",\n    value: function setupBoundingBox(end) {\n      if (!this.boundingMesh) return;\n      this.boundingMesh.position.set(this.center.x, this.center.y, this.center.z);\n      this.boundingMesh.lookAt(end);\n      this.boundingMesh.visible = false;\n      this.root.add(this.boundingMesh);\n    }\n  }, {\n    key: \"getLength\",\n    value: function getLength() {\n      return parseFloat(this.start.distanceTo(this.end).toFixed(2));\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      var dir = this.end.clone().sub(this.start);\n      var len = dir.length() * 0.5;\n      dir = dir.normalize().multiplyScalar(len);\n      return this.start.clone().add(dir);\n    }\n  }]);\n\n  return IfcDimensionLine;\n}();\nIfcDimensionLine.scaleFactor = 0.1;","map":{"version":3,"sources":["../../../../src/components/display/dimensions/dimension-line.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { BoxGeometry, BufferGeometry, Group, Line, Mesh, Vector3 } from 'three';\r\nimport { CSS2DObject } from 'three/examples/jsm/renderers/CSS2DRenderer';\r\nexport class IfcDimensionLine {\r\n    constructor(context, start, end, lineMaterial, endpointMaterial, endpointGeometry, className, endpointScale) {\r\n        // Elements\r\n        this.root = new Group();\r\n        this.endpointMeshes = [];\r\n        this.scale = new Vector3(1, 1, 1);\r\n        this.boundingSize = 0.05;\r\n        this.context = context;\r\n        this.labelClassName = className;\r\n        this.start = start;\r\n        this.end = end;\r\n        this.scale = endpointScale;\r\n        this.lineMaterial = lineMaterial;\r\n        this.endpointMaterial = endpointMaterial;\r\n        this.length = this.getLength();\r\n        this.center = this.getCenter();\r\n        this.axis = new BufferGeometry().setFromPoints([start, end]);\r\n        this.line = new Line(this.axis, this.lineMaterial);\r\n        this.root.add(this.line);\r\n        this.endpoint = endpointGeometry;\r\n        this.addEndpointMeshes();\r\n        this.textLabel = this.newText();\r\n        this.root.renderOrder = 2;\r\n        this.context.getScene().add(this.root);\r\n        this.camera = this.context.getCamera();\r\n        this.context.ifcCamera.onChange.on(() => this.rescaleObjectsToCameraPosition());\r\n        this.rescaleObjectsToCameraPosition();\r\n    }\r\n    get boundingBox() {\r\n        return this.boundingMesh;\r\n    }\r\n    get text() {\r\n        return this.textLabel;\r\n    }\r\n    set dimensionColor(dimensionColor) {\r\n        this.endpointMaterial.color = dimensionColor;\r\n        this.lineMaterial.color = dimensionColor;\r\n    }\r\n    set visibility(visible) {\r\n        this.root.visible = visible;\r\n        this.textLabel.visible = visible;\r\n    }\r\n    set endpointGeometry(geometry) {\r\n        this.endpointMeshes.forEach((mesh) => this.root.remove(mesh));\r\n        this.endpointMeshes = [];\r\n        this.endpoint = geometry;\r\n        this.addEndpointMeshes();\r\n    }\r\n    set endpointScale(scale) {\r\n        this.scale = scale;\r\n        this.endpointMeshes.forEach((mesh) => mesh.scale.set(scale.x, scale.y, scale.z));\r\n    }\r\n    set endPoint(point) {\r\n        this.end = point;\r\n        if (!this.axis)\r\n            return;\r\n        const position = this.axis.attributes.position;\r\n        if (!position)\r\n            return;\r\n        position.setXYZ(1, point.x, point.y, point.z);\r\n        position.needsUpdate = true;\r\n        this.endpointMeshes[1].position.set(point.x, point.y, point.z);\r\n        this.endpointMeshes[1].lookAt(this.start);\r\n        this.endpointMeshes[0].lookAt(this.end);\r\n        this.length = this.getLength();\r\n        this.textLabel.element.textContent = this.getTextContent();\r\n        this.center = this.getCenter();\r\n        this.textLabel.position.set(this.center.x, this.center.y, this.center.z);\r\n        this.line.computeLineDistances();\r\n    }\r\n    removeFromScene() {\r\n        this.context.getScene().remove(this.root);\r\n        this.root.remove(this.textLabel);\r\n    }\r\n    createBoundingBox() {\r\n        this.boundingMesh = this.newBoundingBox();\r\n        this.setupBoundingBox(this.end);\r\n    }\r\n    rescaleObjectsToCameraPosition() {\r\n        this.endpointMeshes.forEach((mesh) => this.rescaleMesh(mesh, IfcDimensionLine.scaleFactor));\r\n        if (this.boundingMesh) {\r\n            this.rescaleMesh(this.boundingMesh, this.boundingSize, true, true, false);\r\n        }\r\n    }\r\n    rescaleMesh(mesh, scalefactor = 1, x = true, y = true, z = true) {\r\n        let scale = new Vector3().subVectors(mesh.position, this.camera.position).length();\r\n        scale *= scalefactor;\r\n        const scaleX = x ? scale : 1;\r\n        const scaleY = y ? scale : 1;\r\n        const scaleZ = z ? scale : 1;\r\n        mesh.scale.set(scaleX, scaleY, scaleZ);\r\n    }\r\n    addEndpointMeshes() {\r\n        this.newEndpointMesh(this.start, this.end);\r\n        this.newEndpointMesh(this.end, this.start);\r\n    }\r\n    newEndpointMesh(position, direction) {\r\n        const mesh = new Mesh(this.endpoint, this.endpointMaterial);\r\n        mesh.position.set(position.x, position.y, position.z);\r\n        mesh.scale.set(this.scale.x, this.scale.y, this.scale.z);\r\n        mesh.lookAt(direction);\r\n        this.endpointMeshes.push(mesh);\r\n        this.root.add(mesh);\r\n    }\r\n    newText() {\r\n        const htmlText = document.createElement('div');\r\n        htmlText.className = this.labelClassName;\r\n        htmlText.textContent = this.getTextContent();\r\n        const label = new CSS2DObject(htmlText);\r\n        label.position.set(this.center.x, this.center.y, this.center.z);\r\n        this.root.add(label);\r\n        return label;\r\n    }\r\n    getTextContent() {\r\n        return `${this.length} m`;\r\n    }\r\n    newBoundingBox() {\r\n        const box = new BoxGeometry(1, 1, this.length);\r\n        return new Mesh(box);\r\n    }\r\n    setupBoundingBox(end) {\r\n        if (!this.boundingMesh)\r\n            return;\r\n        this.boundingMesh.position.set(this.center.x, this.center.y, this.center.z);\r\n        this.boundingMesh.lookAt(end);\r\n        this.boundingMesh.visible = false;\r\n        this.root.add(this.boundingMesh);\r\n    }\r\n    getLength() {\r\n        return parseFloat(this.start.distanceTo(this.end).toFixed(2));\r\n    }\r\n    getCenter() {\r\n        let dir = this.end.clone().sub(this.start);\r\n        const len = dir.length() * 0.5;\r\n        dir = dir.normalize().multiplyScalar(len);\r\n        return this.start.clone().add(dir);\r\n    }\r\n}\r\nIfcDimensionLine.scaleFactor = 0.1;\r\n//# sourceMappingURL=dimension-line.js.map"]},"metadata":{},"sourceType":"module"}