{"ast":null,"code":"import { Clock, Vector2, Vector3 } from 'three';\nimport { NavigationModes } from '../../base-types';\nimport { IfcCamera } from './camera/camera';\nimport { IfcRaycaster } from './raycaster';\nimport { IfcRenderer } from './renderer/renderer';\nimport { IfcScene } from './scene';\nimport { Animator } from './animator';\nimport { IfcEvent, IfcEvents } from './ifcEvent';\nexport class IfcContext {\n  constructor(options) {\n    this.render = () => {\n      requestAnimationFrame(this.render);\n      this.updateAllComponents();\n    };\n\n    if (!options.container) throw new Error('Could not get container element!');\n    this.options = options;\n    this.events = new IfcEvents();\n    this.items = this.newItems();\n    this.ifcScene = new IfcScene(this);\n    this.renderer = new IfcRenderer(this);\n    this.ifcCamera = new IfcCamera(this);\n    this.events.publish(IfcEvent.onCameraReady);\n    this.clippingPlanes = [];\n    this.ifcCaster = new IfcRaycaster(this);\n    this.clock = new Clock(true);\n    this.ifcAnimator = new Animator();\n    this.setupWindowRescale();\n    this.render();\n  }\n\n  getScene() {\n    return this.ifcScene.scene;\n  }\n\n  getRenderer() {\n    return this.renderer.basicRenderer;\n  }\n\n  getRenderer2D() {\n    return this.renderer.renderer2D;\n  }\n\n  getCamera() {\n    return this.ifcCamera.activeCamera;\n  }\n\n  getIfcCamera() {\n    return this.ifcCamera;\n  }\n\n  getDomElement() {\n    return this.getRenderer().domElement;\n  }\n\n  getDomElement2D() {\n    return this.getRenderer2D().domElement;\n  }\n\n  getContainerElement() {\n    return this.options.container;\n  }\n\n  getDimensions() {\n    const element = this.getContainerElement();\n    return new Vector2(element.clientWidth, element.clientHeight);\n  }\n\n  getClippingPlanes() {\n    return this.clippingPlanes;\n  }\n\n  getAnimator() {\n    return this.ifcAnimator;\n  }\n\n  getCenter(mesh) {\n    var _a;\n\n    const center = new Vector3();\n    mesh.geometry.computeBoundingBox();\n    (_a = mesh.geometry.boundingBox) === null || _a === void 0 ? void 0 : _a.getCenter(center);\n    return center;\n  }\n\n  addComponent(component) {\n    this.items.components.push(component);\n  }\n\n  addClippingPlane(plane) {\n    this.clippingPlanes.push(plane);\n  }\n\n  removeClippingPlane(plane) {\n    const index = this.clippingPlanes.indexOf(plane);\n    this.clippingPlanes.splice(index, 1);\n  }\n\n  castRay(items) {\n    return this.ifcCaster.castRay(items);\n  }\n\n  castRayIfc() {\n    return this.ifcCaster.castRayIfc();\n  }\n\n  fitToFrame() {\n    this.ifcCamera.navMode[NavigationModes.Orbit].fitModelToFrame();\n  }\n\n  toggleCameraControls(active, options) {\n    this.ifcCamera.toggleCameraControls(active, options);\n  }\n\n  updateAspect() {\n    this.ifcCamera.updateAspect();\n    this.renderer.adjustRendererSize();\n  }\n\n  updateAllComponents() {\n    const delta = this.clock.getDelta();\n    this.items.components.forEach(component => component.update(delta));\n  }\n\n  setupWindowRescale() {\n    window.addEventListener('resize', () => {\n      this.updateAspect();\n    });\n  }\n\n  newItems() {\n    return {\n      components: [],\n      ifcModels: [],\n      pickableIfcModels: []\n    };\n  }\n\n}","map":{"version":3,"sources":["../../../src/components/context/context.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Clock, Vector2, Vector3 } from 'three';\r\nimport { NavigationModes } from '../../base-types';\r\nimport { IfcCamera } from './camera/camera';\r\nimport { IfcRaycaster } from './raycaster';\r\nimport { IfcRenderer } from './renderer/renderer';\r\nimport { IfcScene } from './scene';\r\nimport { Animator } from './animator';\r\nimport { IfcEvent, IfcEvents } from './ifcEvent';\r\nexport class IfcContext {\r\n    constructor(options) {\r\n        this.render = () => {\r\n            requestAnimationFrame(this.render);\r\n            this.updateAllComponents();\r\n        };\r\n        if (!options.container)\r\n            throw new Error('Could not get container element!');\r\n        this.options = options;\r\n        this.events = new IfcEvents();\r\n        this.items = this.newItems();\r\n        this.ifcScene = new IfcScene(this);\r\n        this.renderer = new IfcRenderer(this);\r\n        this.ifcCamera = new IfcCamera(this);\r\n        this.events.publish(IfcEvent.onCameraReady);\r\n        this.clippingPlanes = [];\r\n        this.ifcCaster = new IfcRaycaster(this);\r\n        this.clock = new Clock(true);\r\n        this.ifcAnimator = new Animator();\r\n        this.setupWindowRescale();\r\n        this.render();\r\n    }\r\n    getScene() {\r\n        return this.ifcScene.scene;\r\n    }\r\n    getRenderer() {\r\n        return this.renderer.basicRenderer;\r\n    }\r\n    getRenderer2D() {\r\n        return this.renderer.renderer2D;\r\n    }\r\n    getCamera() {\r\n        return this.ifcCamera.activeCamera;\r\n    }\r\n    getIfcCamera() {\r\n        return this.ifcCamera;\r\n    }\r\n    getDomElement() {\r\n        return this.getRenderer().domElement;\r\n    }\r\n    getDomElement2D() {\r\n        return this.getRenderer2D().domElement;\r\n    }\r\n    getContainerElement() {\r\n        return this.options.container;\r\n    }\r\n    getDimensions() {\r\n        const element = this.getContainerElement();\r\n        return new Vector2(element.clientWidth, element.clientHeight);\r\n    }\r\n    getClippingPlanes() {\r\n        return this.clippingPlanes;\r\n    }\r\n    getAnimator() {\r\n        return this.ifcAnimator;\r\n    }\r\n    getCenter(mesh) {\r\n        var _a;\r\n        const center = new Vector3();\r\n        mesh.geometry.computeBoundingBox();\r\n        (_a = mesh.geometry.boundingBox) === null || _a === void 0 ? void 0 : _a.getCenter(center);\r\n        return center;\r\n    }\r\n    addComponent(component) {\r\n        this.items.components.push(component);\r\n    }\r\n    addClippingPlane(plane) {\r\n        this.clippingPlanes.push(plane);\r\n    }\r\n    removeClippingPlane(plane) {\r\n        const index = this.clippingPlanes.indexOf(plane);\r\n        this.clippingPlanes.splice(index, 1);\r\n    }\r\n    castRay(items) {\r\n        return this.ifcCaster.castRay(items);\r\n    }\r\n    castRayIfc() {\r\n        return this.ifcCaster.castRayIfc();\r\n    }\r\n    fitToFrame() {\r\n        this.ifcCamera.navMode[NavigationModes.Orbit].fitModelToFrame();\r\n    }\r\n    toggleCameraControls(active, options) {\r\n        this.ifcCamera.toggleCameraControls(active, options);\r\n    }\r\n    updateAspect() {\r\n        this.ifcCamera.updateAspect();\r\n        this.renderer.adjustRendererSize();\r\n    }\r\n    updateAllComponents() {\r\n        const delta = this.clock.getDelta();\r\n        this.items.components.forEach((component) => component.update(delta));\r\n    }\r\n    setupWindowRescale() {\r\n        window.addEventListener('resize', () => {\r\n            this.updateAspect();\r\n        });\r\n    }\r\n    newItems() {\r\n        return {\r\n            components: [],\r\n            ifcModels: [],\r\n            pickableIfcModels: []\r\n        };\r\n    }\r\n}\r\n//# sourceMappingURL=context.js.map"]},"metadata":{},"sourceType":"module"}