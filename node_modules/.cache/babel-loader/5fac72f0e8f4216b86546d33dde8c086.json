{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { IfcContext, IfcManager, IfcGrid, IfcAxes, IfcClipper, DropboxAPI, IfcStats, IfcEdges } from './components';\nimport { IfcDimensions } from './components/display/dimensions/dimensions';\nimport { GLTFManager } from './components/import-export/glTF';\nexport var IfcViewerAPI = /*#__PURE__*/function () {\n  function IfcViewerAPI(options) {\n    var _this = this;\n\n    _classCallCheck(this, IfcViewerAPI);\n\n    /**\r\n     * Adds a clipping plane on the face pointed to by the cursor.\r\n     */\n    this.addClippingPlane = function () {\n      _this.clipper.createPlane();\n    };\n    /**\r\n     * Removes the clipping plane pointed by the cursor.\r\n     */\n\n\n    this.removeClippingPlane = function () {\n      _this.clipper.deletePlane();\n    };\n    /**\r\n     * Turns on / off all clipping planes.\r\n     */\n\n\n    this.toggleClippingPlanes = function () {\n      _this.clipper.active = !_this.clipper.active;\n    };\n    /**\r\n     * @deprecated Use `IfcViewerAPI.IFC.prePickIfcItem()` instead.\r\n     * Highlights the item pointed by the cursor.\r\n     */\n\n\n    this.prePickIfcItem = function () {\n      _this.IFC.prePickIfcItem();\n    };\n    /**\r\n     * @deprecated Use `IfcViewerAPI.IFC.pickIfcItem()` instead.\r\n     * Highlights the item pointed by the cursor and gets is properties.\r\n     */\n\n\n    this.pickIfcItem = function () {\n      return _this.IFC.pickIfcItem();\n    };\n    /**\r\n     * @deprecated Use `IfcViewerAPI.IFC.pickIfcItemsByID()` instead.\r\n     * Highlights the item with the given ID.\r\n     * @modelID ID of the IFC model.\r\n     * @id Express ID of the item.\r\n     */\n\n\n    this.pickIfcItemsByID = function (modelID, ids) {\n      _this.IFC.pickIfcItemsByID(modelID, ids);\n    };\n\n    if (!options.container) throw new Error('Could not get container element!');\n    this.context = new IfcContext(options);\n    this.IFC = new IfcManager(this.context);\n    this.clipper = new IfcClipper(this.context);\n    this.dimensions = new IfcDimensions(this.context);\n    this.edges = new IfcEdges(this.context);\n    this.gltf = new GLTFManager(this.context);\n  }\n  /**\r\n   * Adds a base [grid](https://threejs.org/docs/#api/en/helpers/GridHelper) to the scene.\r\n   * @size (optional) Size of the grid.\r\n   * @divisions (optional) Number of divisions in X and Y.\r\n   * @ColorCenterLine (optional) Color of the XY central lines of the grid.\r\n   * @colorGrid (optional) Color of the XY lines of the grid.\r\n   */\n\n\n  _createClass(IfcViewerAPI, [{\n    key: \"addGrid\",\n    value: function addGrid(size, divisions, colorCenterLine, colorGrid) {\n      this.grid = new IfcGrid(this.context, size, divisions, colorCenterLine, colorGrid);\n    }\n    /**\r\n     * Adds base [axes](https://threejs.org/docs/#api/en/helpers/AxesHelper) to the scene.\r\n     * @size (optional) Size of the axes.\r\n     */\n\n  }, {\n    key: \"addAxes\",\n    value: function addAxes(size) {\n      this.axes = new IfcAxes(this.context, size);\n    }\n    /**\r\n     * Adds [stats](https://github.com/mrdoob/stats.js/) to the scene for testing purposes. For example:\r\n     * ```js\r\n     *     this.loader.addStats('position:fixed;top:6rem;right:0px;z-index:1;');\r\n     * ```\r\n     * @css The css text to control where to locate the stats.\r\n     * @stats The stats.js API object\r\n     */\n\n  }, {\n    key: \"addStats\",\n    value: function addStats() {\n      var css = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var stats = arguments.length > 1 ? arguments[1] : undefined;\n\n      var _a, _b; // @ts-ignore\n\n\n      this.stats = new IfcStats(this.context);\n      (_a = this.stats) === null || _a === void 0 ? void 0 : _a.initializeStats(stats);\n      (_b = this.stats) === null || _b === void 0 ? void 0 : _b.addStats(css);\n    }\n    /**\r\n     * Opens a dropbox window where the user can select their IFC models.\r\n     */\n\n  }, {\n    key: \"openDropboxWindow\",\n    value: function openDropboxWindow() {\n      var _a;\n\n      if (!this.dropbox) this.dropbox = new DropboxAPI(this.context, this.IFC);\n      (_a = this.dropbox) === null || _a === void 0 ? void 0 : _a.loadDropboxIfc();\n    }\n    /**\r\n     * @deprecated Use `IfcViewerAPI.IFC.loadIfc()` instead.\r\n     * Loads the given IFC in the current scene.\r\n     * @file IFC as File.\r\n     * @fitToFrame (optional) if true, brings the perspectiveCamera to the loaded IFC.\r\n     */\n\n  }, {\n    key: \"loadIfc\",\n    value: function () {\n      var _loadIfc = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n        var fitToFrame,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                fitToFrame = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;\n                _context.next = 3;\n                return this.IFC.loadIfc(file, fitToFrame);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function loadIfc(_x) {\n        return _loadIfc.apply(this, arguments);\n      }\n\n      return loadIfc;\n    }()\n    /**\r\n     * @deprecated Use `IfcViewerAPI.IFC.loadIfcUrl()` instead.\r\n     * Loads the given IFC in the current scene.\r\n     * @file IFC as URL.\r\n     * @fitToFrame (optional) if true, brings the perspectiveCamera to the loaded IFC.\r\n     */\n\n  }, {\n    key: \"loadIfcUrl\",\n    value: function () {\n      var _loadIfcUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url) {\n        var fitToFrame,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                fitToFrame = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : false;\n                _context2.next = 3;\n                return this.IFC.loadIfcUrl(url, fitToFrame);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadIfcUrl(_x2) {\n        return _loadIfcUrl.apply(this, arguments);\n      }\n\n      return loadIfcUrl;\n    }()\n    /**\r\n     * @deprecated Use `IfcViewerAPI.IFC.setWasmPath()` instead.\r\n     * Sets the relative path of web-ifc.wasm file in the project.\r\n     * Beware: you **must** serve this file in your page; this means\r\n     * that you have to copy this files from *node_modules/web-ifc*\r\n     * to your deployment directory.\r\n     *\r\n     * If you don't use this methods,\r\n     * IFC.js assumes that you are serving it in the root directory.\r\n     *\r\n     * Example if web-ifc.wasm is in dist/wasmDir:\r\n     * `ifcLoader.setWasmPath(\"dist/wasmDir/\");`\r\n     *\r\n     * @path Relative path to web-ifc.wasm.\r\n     */\n\n  }, {\n    key: \"setWasmPath\",\n    value: function setWasmPath(path) {\n      this.IFC.setWasmPath(path);\n    }\n    /**\r\n     * @deprecated Use `IfcViewerAPI.IFC.getSpatialStructure()` instead.\r\n     * Gets the spatial structure of the specified model.\r\n     * @modelID ID of the IFC model.\r\n     */\n\n  }, {\n    key: \"getSpatialStructure\",\n    value: function getSpatialStructure(modelID) {\n      return this.IFC.getSpatialStructure(modelID);\n    }\n    /**\r\n     * @deprecated Use `IfcViewerAPI.IFC.getProperties()` instead.\r\n     * Gets the properties of the specified item.\r\n     * @modelID ID of the IFC model.\r\n     * @id Express ID of the item.\r\n     * @indirect If true, also returns psets, qsets and type properties.\r\n     */\n\n  }, {\n    key: \"getProperties\",\n    value: function getProperties(modelID, id, indirect) {\n      return this.IFC.getProperties(modelID, id, indirect);\n    }\n    /**\r\n     * @deprecated Use `IfcViewerAPI.IFC.getModelID()` instead.\r\n     * Gets the ID of the model pointed by the cursor.\r\n     */\n\n  }, {\n    key: \"getModelID\",\n    value: function getModelID() {\n      return this.IFC.getModelID();\n    }\n    /**\r\n     * @deprecated Use `IfcViewerAPI.IFC.getAllItemsOfType()` instead.\r\n     * Gets all the items of the specified type in the specified IFC model.\r\n     * @modelID ID of the IFC model.\r\n     * @type type of element. You can import the type from web-ifc.\r\n     * @verbose If true, also gets the properties for all the elements.\r\n     */\n\n  }, {\n    key: \"getAllItemsOfType\",\n    value: function getAllItemsOfType(modelID, type) {\n      var verbose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return this.IFC.getAllItemsOfType(modelID, type, verbose);\n    }\n    /**\r\n     * TODO: Method to delete all data\r\n     * Needs to be implemented yet\r\n     */\n\n  }, {\n    key: \"releaseAllMemory\",\n    value: function releaseAllMemory() {}\n  }]);\n\n  return IfcViewerAPI;\n}();","map":{"version":3,"sources":["../src/ifc-viewer-api.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { IfcContext, IfcManager, IfcGrid, IfcAxes, IfcClipper, DropboxAPI, IfcStats, IfcEdges } from './components';\r\nimport { IfcDimensions } from './components/display/dimensions/dimensions';\r\nimport { GLTFManager } from './components/import-export/glTF';\r\nexport class IfcViewerAPI {\r\n    constructor(options) {\r\n        /**\r\n         * Adds a clipping plane on the face pointed to by the cursor.\r\n         */\r\n        this.addClippingPlane = () => {\r\n            this.clipper.createPlane();\r\n        };\r\n        /**\r\n         * Removes the clipping plane pointed by the cursor.\r\n         */\r\n        this.removeClippingPlane = () => {\r\n            this.clipper.deletePlane();\r\n        };\r\n        /**\r\n         * Turns on / off all clipping planes.\r\n         */\r\n        this.toggleClippingPlanes = () => {\r\n            this.clipper.active = !this.clipper.active;\r\n        };\r\n        /**\r\n         * @deprecated Use `IfcViewerAPI.IFC.prePickIfcItem()` instead.\r\n         * Highlights the item pointed by the cursor.\r\n         */\r\n        this.prePickIfcItem = () => {\r\n            this.IFC.prePickIfcItem();\r\n        };\r\n        /**\r\n         * @deprecated Use `IfcViewerAPI.IFC.pickIfcItem()` instead.\r\n         * Highlights the item pointed by the cursor and gets is properties.\r\n         */\r\n        this.pickIfcItem = () => {\r\n            return this.IFC.pickIfcItem();\r\n        };\r\n        /**\r\n         * @deprecated Use `IfcViewerAPI.IFC.pickIfcItemsByID()` instead.\r\n         * Highlights the item with the given ID.\r\n         * @modelID ID of the IFC model.\r\n         * @id Express ID of the item.\r\n         */\r\n        this.pickIfcItemsByID = (modelID, ids) => {\r\n            this.IFC.pickIfcItemsByID(modelID, ids);\r\n        };\r\n        if (!options.container)\r\n            throw new Error('Could not get container element!');\r\n        this.context = new IfcContext(options);\r\n        this.IFC = new IfcManager(this.context);\r\n        this.clipper = new IfcClipper(this.context);\r\n        this.dimensions = new IfcDimensions(this.context);\r\n        this.edges = new IfcEdges(this.context);\r\n        this.gltf = new GLTFManager(this.context);\r\n    }\r\n    /**\r\n     * Adds a base [grid](https://threejs.org/docs/#api/en/helpers/GridHelper) to the scene.\r\n     * @size (optional) Size of the grid.\r\n     * @divisions (optional) Number of divisions in X and Y.\r\n     * @ColorCenterLine (optional) Color of the XY central lines of the grid.\r\n     * @colorGrid (optional) Color of the XY lines of the grid.\r\n     */\r\n    addGrid(size, divisions, colorCenterLine, colorGrid) {\r\n        this.grid = new IfcGrid(this.context, size, divisions, colorCenterLine, colorGrid);\r\n    }\r\n    /**\r\n     * Adds base [axes](https://threejs.org/docs/#api/en/helpers/AxesHelper) to the scene.\r\n     * @size (optional) Size of the axes.\r\n     */\r\n    addAxes(size) {\r\n        this.axes = new IfcAxes(this.context, size);\r\n    }\r\n    /**\r\n     * Adds [stats](https://github.com/mrdoob/stats.js/) to the scene for testing purposes. For example:\r\n     * ```js\r\n     *     this.loader.addStats('position:fixed;top:6rem;right:0px;z-index:1;');\r\n     * ```\r\n     * @css The css text to control where to locate the stats.\r\n     * @stats The stats.js API object\r\n     */\r\n    addStats(css = '', stats) {\r\n        var _a, _b;\r\n        // @ts-ignore\r\n        this.stats = new IfcStats(this.context);\r\n        (_a = this.stats) === null || _a === void 0 ? void 0 : _a.initializeStats(stats);\r\n        (_b = this.stats) === null || _b === void 0 ? void 0 : _b.addStats(css);\r\n    }\r\n    /**\r\n     * Opens a dropbox window where the user can select their IFC models.\r\n     */\r\n    openDropboxWindow() {\r\n        var _a;\r\n        if (!this.dropbox)\r\n            this.dropbox = new DropboxAPI(this.context, this.IFC);\r\n        (_a = this.dropbox) === null || _a === void 0 ? void 0 : _a.loadDropboxIfc();\r\n    }\r\n    /**\r\n     * @deprecated Use `IfcViewerAPI.IFC.loadIfc()` instead.\r\n     * Loads the given IFC in the current scene.\r\n     * @file IFC as File.\r\n     * @fitToFrame (optional) if true, brings the perspectiveCamera to the loaded IFC.\r\n     */\r\n    async loadIfc(file, fitToFrame = false) {\r\n        await this.IFC.loadIfc(file, fitToFrame);\r\n    }\r\n    /**\r\n     * @deprecated Use `IfcViewerAPI.IFC.loadIfcUrl()` instead.\r\n     * Loads the given IFC in the current scene.\r\n     * @file IFC as URL.\r\n     * @fitToFrame (optional) if true, brings the perspectiveCamera to the loaded IFC.\r\n     */\r\n    async loadIfcUrl(url, fitToFrame = false) {\r\n        await this.IFC.loadIfcUrl(url, fitToFrame);\r\n    }\r\n    /**\r\n     * @deprecated Use `IfcViewerAPI.IFC.setWasmPath()` instead.\r\n     * Sets the relative path of web-ifc.wasm file in the project.\r\n     * Beware: you **must** serve this file in your page; this means\r\n     * that you have to copy this files from *node_modules/web-ifc*\r\n     * to your deployment directory.\r\n     *\r\n     * If you don't use this methods,\r\n     * IFC.js assumes that you are serving it in the root directory.\r\n     *\r\n     * Example if web-ifc.wasm is in dist/wasmDir:\r\n     * `ifcLoader.setWasmPath(\"dist/wasmDir/\");`\r\n     *\r\n     * @path Relative path to web-ifc.wasm.\r\n     */\r\n    setWasmPath(path) {\r\n        this.IFC.setWasmPath(path);\r\n    }\r\n    /**\r\n     * @deprecated Use `IfcViewerAPI.IFC.getSpatialStructure()` instead.\r\n     * Gets the spatial structure of the specified model.\r\n     * @modelID ID of the IFC model.\r\n     */\r\n    getSpatialStructure(modelID) {\r\n        return this.IFC.getSpatialStructure(modelID);\r\n    }\r\n    /**\r\n     * @deprecated Use `IfcViewerAPI.IFC.getProperties()` instead.\r\n     * Gets the properties of the specified item.\r\n     * @modelID ID of the IFC model.\r\n     * @id Express ID of the item.\r\n     * @indirect If true, also returns psets, qsets and type properties.\r\n     */\r\n    getProperties(modelID, id, indirect) {\r\n        return this.IFC.getProperties(modelID, id, indirect);\r\n    }\r\n    /**\r\n     * @deprecated Use `IfcViewerAPI.IFC.getModelID()` instead.\r\n     * Gets the ID of the model pointed by the cursor.\r\n     */\r\n    getModelID() {\r\n        return this.IFC.getModelID();\r\n    }\r\n    /**\r\n     * @deprecated Use `IfcViewerAPI.IFC.getAllItemsOfType()` instead.\r\n     * Gets all the items of the specified type in the specified IFC model.\r\n     * @modelID ID of the IFC model.\r\n     * @type type of element. You can import the type from web-ifc.\r\n     * @verbose If true, also gets the properties for all the elements.\r\n     */\r\n    getAllItemsOfType(modelID, type, verbose = false) {\r\n        return this.IFC.getAllItemsOfType(modelID, type, verbose);\r\n    }\r\n    /**\r\n     * TODO: Method to delete all data\r\n     * Needs to be implemented yet\r\n     */\r\n    releaseAllMemory() {\r\n    }\r\n}\r\n//# sourceMappingURL=ifc-viewer-api.js.map"]},"metadata":{},"sourceType":"module"}