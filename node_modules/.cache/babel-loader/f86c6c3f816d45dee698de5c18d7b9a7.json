{"ast":null,"code":"import { MeshBasicMaterial } from 'three';\nexport class VisibilityManager {\n  constructor(loader, context) {\n    this.modelMaterials = {};\n    this.invisibleMaterial = new MeshBasicMaterial({\n      visible: false\n    });\n    this.ifc = loader;\n    this.context = context;\n    this.scene = this.context.getScene();\n  }\n\n  isolateItems(modelID, ids) {\n    let removePrevious = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let material = arguments.length > 3 ? arguments[3] : undefined;\n    this.isolate(modelID, ids, removePrevious);\n    this.changeModelMaterial(modelID, material);\n    this.makeIsolatedItemsPickable(modelID);\n  }\n\n  removeIsolation(modelID) {\n    const mesh = this.context.items.ifcModels.find(ifcMesh => ifcMesh.modelID === modelID);\n\n    if (mesh) {\n      this.ifc.ifcManager.removeSubset(modelID, this.scene);\n      this.context.items.pickableIfcModels.push(mesh);\n      this.restoreModelMaterial(modelID);\n      this.makeOriginalModelPickable(modelID);\n    }\n  }\n\n  changeModelMaterial(modelID, material) {\n    const mesh = this.getMesh(modelID);\n\n    if (mesh) {\n      this.modelMaterials[mesh.modelID] = mesh.material;\n      mesh.material = material || this.invisibleMaterial;\n    }\n  }\n\n  restoreModelMaterial(modelID) {\n    const mesh = this.getMesh(modelID);\n\n    if (this.modelMaterials[modelID] && mesh) {\n      mesh.material = this.modelMaterials[modelID];\n    }\n  }\n\n  makeOriginalModelPickable(model) {\n    const originalModel = this.context.items.ifcModels.find(mesh => mesh.modelID === model);\n\n    if (originalModel) {\n      this.removePickableItem(model);\n      this.context.items.pickableIfcModels.push(originalModel);\n    }\n  }\n\n  removePickableItem(modelID) {\n    this.context.items.pickableIfcModels = this.context.items.pickableIfcModels.filter(ifcMesh => {\n      return ifcMesh.modelID !== modelID;\n    });\n  }\n\n  makeIsolatedItemsPickable(model) {\n    this.removePickableItem(model);\n    const isolatedItems = this.ifc.ifcManager.getSubset(model);\n\n    if (isolatedItems) {\n      isolatedItems.modelID = model;\n      this.context.items.pickableIfcModels.push(isolatedItems);\n    }\n  }\n\n  getMesh(modelID) {\n    return this.context.items.ifcModels.find(model => model.modelID === modelID);\n  }\n\n  isolate(modelID, ids, removePrevious) {\n    if (ids.length === 0) {\n      this.ifc.ifcManager.removeSubset(modelID, this.scene);\n      return;\n    }\n\n    this.ifc.ifcManager.createSubset({\n      scene: this.scene,\n      ids,\n      modelID,\n      removePrevious\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/components/ifc/visibility-manager.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { MeshBasicMaterial } from 'three';\r\nexport class VisibilityManager {\r\n    constructor(loader, context) {\r\n        this.modelMaterials = {};\r\n        this.invisibleMaterial = new MeshBasicMaterial({ visible: false });\r\n        this.ifc = loader;\r\n        this.context = context;\r\n        this.scene = this.context.getScene();\r\n    }\r\n    isolateItems(modelID, ids, removePrevious = true, material) {\r\n        this.isolate(modelID, ids, removePrevious);\r\n        this.changeModelMaterial(modelID, material);\r\n        this.makeIsolatedItemsPickable(modelID);\r\n    }\r\n    removeIsolation(modelID) {\r\n        const mesh = this.context.items.ifcModels.find((ifcMesh) => ifcMesh.modelID === modelID);\r\n        if (mesh) {\r\n            this.ifc.ifcManager.removeSubset(modelID, this.scene);\r\n            this.context.items.pickableIfcModels.push(mesh);\r\n            this.restoreModelMaterial(modelID);\r\n            this.makeOriginalModelPickable(modelID);\r\n        }\r\n    }\r\n    changeModelMaterial(modelID, material) {\r\n        const mesh = this.getMesh(modelID);\r\n        if (mesh) {\r\n            this.modelMaterials[mesh.modelID] = mesh.material;\r\n            mesh.material = material || this.invisibleMaterial;\r\n        }\r\n    }\r\n    restoreModelMaterial(modelID) {\r\n        const mesh = this.getMesh(modelID);\r\n        if (this.modelMaterials[modelID] && mesh) {\r\n            mesh.material = this.modelMaterials[modelID];\r\n        }\r\n    }\r\n    makeOriginalModelPickable(model) {\r\n        const originalModel = this.context.items.ifcModels.find((mesh) => mesh.modelID === model);\r\n        if (originalModel) {\r\n            this.removePickableItem(model);\r\n            this.context.items.pickableIfcModels.push(originalModel);\r\n        }\r\n    }\r\n    removePickableItem(modelID) {\r\n        this.context.items.pickableIfcModels = this.context.items.pickableIfcModels.filter((ifcMesh) => {\r\n            return ifcMesh.modelID !== modelID;\r\n        });\r\n    }\r\n    makeIsolatedItemsPickable(model) {\r\n        this.removePickableItem(model);\r\n        const isolatedItems = this.ifc.ifcManager.getSubset(model);\r\n        if (isolatedItems) {\r\n            isolatedItems.modelID = model;\r\n            this.context.items.pickableIfcModels.push(isolatedItems);\r\n        }\r\n    }\r\n    getMesh(modelID) {\r\n        return this.context.items.ifcModels.find((model) => model.modelID === modelID);\r\n    }\r\n    isolate(modelID, ids, removePrevious) {\r\n        if (ids.length === 0) {\r\n            this.ifc.ifcManager.removeSubset(modelID, this.scene);\r\n            return;\r\n        }\r\n        this.ifc.ifcManager.createSubset({\r\n            scene: this.scene,\r\n            ids,\r\n            modelID,\r\n            removePrevious\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=visibility-manager.js.map"]},"metadata":{},"sourceType":"module"}