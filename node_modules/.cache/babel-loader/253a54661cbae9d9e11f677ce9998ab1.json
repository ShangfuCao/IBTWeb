{"ast":null,"code":"import { Raycaster } from 'three';\nimport { IfcMouse } from './mouse';\nimport { IfcComponent } from '../../base-types';\nexport class IfcRaycaster extends IfcComponent {\n  constructor(context) {\n    super(context);\n    this.context = context;\n    this.raycaster = new Raycaster();\n    this.mouse = new IfcMouse(context);\n  }\n\n  castRay(items) {\n    const camera = this.context.getCamera();\n    this.raycaster.setFromCamera(this.mouse.position, camera);\n    return this.raycaster.intersectObjects(items);\n  }\n\n  castRayIfc() {\n    const items = this.castRay(this.context.items.pickableIfcModels);\n    const filtered = this.filterClippingPlanes(items);\n    return filtered.length > 0 ? filtered[0] : null;\n  }\n\n  filterClippingPlanes(objs) {\n    const planes = this.context.getClippingPlanes();\n    if (objs.length <= 0 || !planes || (planes === null || planes === void 0 ? void 0 : planes.length) <= 0) return objs; // const planes = this.clipper?.planes.map((p) => p.plane);\n\n    return objs.filter(elem => planes.every(elem2 => elem2.distanceToPoint(elem.point) > 0));\n  }\n\n}","map":{"version":3,"sources":["../../../src/components/context/raycaster.ts"],"names":[],"mappings":"AAAA,SAAiC,SAAjC,QAAkD,OAAlD;AACA,SAAS,QAAT,QAAyB,SAAzB;AACA,SAAS,YAAT,QAAsC,kBAAtC;AAEA,OAAM,MAAO,YAAP,SAA4B,YAA5B,CAAwC;AAK5C,EAAA,WAAA,CAAY,OAAZ,EAA4B;AAC1B,UAAM,OAAN;AACA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,SAAL,GAAiB,IAAI,SAAJ,EAAjB;AACA,SAAK,KAAL,GAAa,IAAI,QAAJ,CAAa,OAAb,CAAb;AACD;;AAED,EAAA,OAAO,CAAC,KAAD,EAAkB;AACvB,UAAM,MAAM,GAAG,KAAK,OAAL,CAAa,SAAb,EAAf;AACA,SAAK,SAAL,CAAe,aAAf,CAA6B,KAAK,KAAL,CAAW,QAAxC,EAAkD,MAAlD;AACA,WAAO,KAAK,SAAL,CAAe,gBAAf,CAAgC,KAAhC,CAAP;AACD;;AAED,EAAA,UAAU,GAAA;AACR,UAAM,KAAK,GAAG,KAAK,OAAL,CAAa,KAAK,OAAL,CAAa,KAAb,CAAmB,iBAAhC,CAAd;AACA,UAAM,QAAQ,GAAG,KAAK,oBAAL,CAA0B,KAA1B,CAAjB;AACA,WAAO,QAAQ,CAAC,MAAT,GAAkB,CAAlB,GAAsB,QAAQ,CAAC,CAAD,CAA9B,GAAoC,IAA3C;AACD;;AAEO,EAAA,oBAAoB,CAAC,IAAD,EAAqB;AAC/C,UAAM,MAAM,GAAG,KAAK,OAAL,CAAa,iBAAb,EAAf;AACA,QAAI,IAAI,CAAC,MAAL,IAAe,CAAf,IAAoB,CAAC,MAArB,IAA+B,CAAA,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,MAAR,KAAkB,CAArD,EAAwD,OAAO,IAAP,CAFT,CAG/C;;AACA,WAAO,IAAI,CAAC,MAAL,CAAa,IAAD,IAAU,MAAM,CAAC,KAAP,CAAc,KAAD,IAAW,KAAK,CAAC,eAAN,CAAsB,IAAI,CAAC,KAA3B,IAAoC,CAA5D,CAAtB,CAAP;AACD;;AA7B2C","sourceRoot":"","sourcesContent":["import { Raycaster } from 'three';\r\nimport { IfcMouse } from './mouse';\r\nimport { IfcComponent } from '../../base-types';\r\nexport class IfcRaycaster extends IfcComponent {\r\n    constructor(context) {\r\n        super(context);\r\n        this.context = context;\r\n        this.raycaster = new Raycaster();\r\n        this.mouse = new IfcMouse(context);\r\n    }\r\n    castRay(items) {\r\n        const camera = this.context.getCamera();\r\n        this.raycaster.setFromCamera(this.mouse.position, camera);\r\n        return this.raycaster.intersectObjects(items);\r\n    }\r\n    castRayIfc() {\r\n        const items = this.castRay(this.context.items.pickableIfcModels);\r\n        const filtered = this.filterClippingPlanes(items);\r\n        return filtered.length > 0 ? filtered[0] : null;\r\n    }\r\n    filterClippingPlanes(objs) {\r\n        const planes = this.context.getClippingPlanes();\r\n        if (objs.length <= 0 || !planes || (planes === null || planes === void 0 ? void 0 : planes.length) <= 0)\r\n            return objs;\r\n        // const planes = this.clipper?.planes.map((p) => p.plane);\r\n        return objs.filter((elem) => planes.every((elem2) => elem2.distanceToPoint(elem.point) > 0));\r\n    }\r\n}\r\n//# sourceMappingURL=raycaster.js.map"]},"metadata":{},"sourceType":"module"}