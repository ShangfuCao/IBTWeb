{"ast":null,"code":"import _classCallCheck from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { ConeGeometry, LineDashedMaterial, MeshBasicMaterial, Vector3 } from 'three';\nimport { CSS2DObject } from 'three/examples/jsm/renderers/CSS2DRenderer';\nimport { IfcComponent } from '../../../base-types';\nimport { IfcDimensionLine } from './dimension-line';\nexport var IfcDimensions = /*#__PURE__*/function (_IfcComponent) {\n  _inherits(IfcDimensions, _IfcComponent);\n\n  var _super = _createSuper(IfcDimensions);\n\n  function IfcDimensions(context) {\n    var _this;\n\n    _classCallCheck(this, IfcDimensions);\n\n    _this = _super.call(this, context);\n    _this.dimensions = [];\n    _this.labelClassName = 'ifcjs-dimension-label';\n    _this.previewClassName = 'ifcjs-dimension-preview'; // State\n\n    _this.enabled = false;\n    _this.preview = false;\n    _this.dragging = false;\n    _this.snapDistance = 0.25; // Measures\n\n    _this.arrowHeight = 0.2;\n    _this.arrowRadius = 0.05;\n    _this.baseScale = new Vector3(1, 1, 1); // Materials\n\n    _this.lineMaterial = new LineDashedMaterial({\n      color: 0x000000,\n      linewidth: 2,\n      depthTest: false,\n      dashSize: 0.2,\n      gapSize: 0.2\n    });\n    _this.endpointsMaterial = new MeshBasicMaterial({\n      color: 0x000000,\n      depthTest: false\n    }); // Temp variables\n\n    _this.startPoint = new Vector3();\n    _this.endPoint = new Vector3();\n    _this.context = context;\n    _this.endpoint = _this.getDefaultEndpointGeometry();\n    var htmlPreview = document.createElement('div');\n    htmlPreview.className = _this.previewClassName;\n    _this.previewElement = new CSS2DObject(htmlPreview);\n    _this.previewElement.visible = false;\n    return _this;\n  }\n\n  _createClass(IfcDimensions, [{\n    key: \"update\",\n    value: function update(_delta) {\n      if (this.enabled && this.preview) {\n        var intersects = this.context.castRayIfc();\n        this.previewElement.visible = !!intersects;\n        if (!intersects) return;\n        this.previewElement.visible = true;\n        var closest = this.getClosestVertex(intersects);\n        this.previewElement.visible = !!closest;\n        if (!closest) return;\n        this.previewElement.position.set(closest.x, closest.y, closest.z);\n\n        if (this.dragging) {\n          this.drawInProcess();\n        }\n      }\n    }\n  }, {\n    key: \"active\",\n    get: function get() {\n      return this.enabled;\n    },\n    set: function set(state) {\n      this.enabled = state;\n      this.dimensions.forEach(function (dim) {\n        dim.visibility = state;\n      });\n    }\n  }, {\n    key: \"previewActive\",\n    get: function get() {\n      return this.preview;\n    },\n    set: function set(state) {\n      this.preview = state;\n      var scene = this.context.getScene();\n\n      if (this.preview) {\n        scene.add(this.previewElement);\n      } else {\n        scene.remove(this.previewElement);\n      }\n    }\n  }, {\n    key: \"previewObject\",\n    get: function get() {\n      return this.previewElement;\n    }\n  }, {\n    key: \"dimensionsColor\",\n    set: function set(color) {\n      this.endpointsMaterial.color = color;\n      this.lineMaterial.color = color;\n    }\n  }, {\n    key: \"dimensionsWidth\",\n    set: function set(width) {\n      this.lineMaterial.linewidth = width;\n    }\n  }, {\n    key: \"endpointGeometry\",\n    set: function set(geometry) {\n      this.dimensions.forEach(function (dim) {\n        dim.endpointGeometry = geometry;\n      });\n    }\n  }, {\n    key: \"endpointScaleFactor\",\n    set: function set(factor) {\n      IfcDimensionLine.scaleFactor = factor;\n    }\n  }, {\n    key: \"endpointScale\",\n    set: function set(scale) {\n      this.baseScale = scale;\n      this.dimensions.forEach(function (dim) {\n        dim.endpointScale = scale;\n      });\n    }\n  }, {\n    key: \"create\",\n    value: function create() {\n      if (!this.enabled) return;\n\n      if (!this.dragging) {\n        this.drawStart();\n        return;\n      }\n\n      this.drawEnd();\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      if (!this.enabled || this.dimensions.length === 0) return;\n      var boundingBoxes = this.getBoundingBoxes();\n      var intersects = this.context.castRay(boundingBoxes);\n      if (intersects.length === 0) return;\n      var selected = this.dimensions.find(function (dim) {\n        return dim.boundingBox === intersects[0].object;\n      });\n      if (!selected) return;\n      var index = this.dimensions.indexOf(selected);\n      this.dimensions.splice(index, 1);\n      selected.removeFromScene();\n    }\n  }, {\n    key: \"deleteAll\",\n    value: function deleteAll() {\n      this.dimensions.forEach(function (dim) {\n        dim.removeFromScene();\n      });\n      this.dimensions = [];\n    }\n  }, {\n    key: \"cancelDrawing\",\n    value: function cancelDrawing() {\n      var _a;\n\n      if (!this.currentDimension) return;\n      this.dragging = false;\n      (_a = this.currentDimension) === null || _a === void 0 ? void 0 : _a.removeFromScene();\n      this.currentDimension = undefined;\n    }\n  }, {\n    key: \"drawStart\",\n    value: function drawStart() {\n      this.dragging = true;\n      var intersects = this.context.castRayIfc();\n      if (!intersects) return;\n      var found = this.getClosestVertex(intersects);\n      if (!found) return;\n      this.startPoint = found;\n    }\n  }, {\n    key: \"drawInProcess\",\n    value: function drawInProcess() {\n      var intersects = this.context.castRayIfc();\n      if (!intersects) return;\n      var found = this.getClosestVertex(intersects);\n      if (!found) return;\n      this.endPoint = found;\n      if (!this.currentDimension) this.currentDimension = this.drawDimension();\n      this.currentDimension.endPoint = this.endPoint;\n    }\n  }, {\n    key: \"drawEnd\",\n    value: function drawEnd() {\n      if (!this.currentDimension) return;\n      this.currentDimension.createBoundingBox();\n      this.dimensions.push(this.currentDimension);\n      this.currentDimension = undefined;\n      this.dragging = false;\n    }\n  }, {\n    key: \"drawDimension\",\n    value: function drawDimension() {\n      return new IfcDimensionLine(this.context, this.startPoint, this.endPoint, this.lineMaterial, this.endpointsMaterial, this.endpoint, this.labelClassName, this.baseScale);\n    }\n  }, {\n    key: \"getBoundingBoxes\",\n    value: function getBoundingBoxes() {\n      return this.dimensions.map(function (dim) {\n        return dim.boundingBox;\n      }).filter(function (box) {\n        return box !== undefined;\n      });\n    }\n  }, {\n    key: \"getDefaultEndpointGeometry\",\n    value: function getDefaultEndpointGeometry() {\n      var coneGeometry = new ConeGeometry(this.arrowRadius, this.arrowHeight);\n      coneGeometry.translate(0, -this.arrowHeight / 2, 0);\n      coneGeometry.rotateX(-Math.PI / 2);\n      return coneGeometry;\n    }\n  }, {\n    key: \"getClosestVertex\",\n    value: function getClosestVertex(intersects) {\n      var _this2 = this;\n\n      var closestVertex = new Vector3();\n      var vertexFound = false;\n      var closestDistance = Number.MAX_SAFE_INTEGER;\n      var vertices = this.getVertices(intersects);\n      vertices === null || vertices === void 0 ? void 0 : vertices.forEach(function (vertex) {\n        if (!vertex) return;\n        var distance = intersects.point.distanceTo(vertex);\n        if (distance > closestDistance || distance > _this2.snapDistance) return;\n        vertexFound = true;\n        closestVertex = vertex;\n        closestDistance = intersects.point.distanceTo(vertex);\n      });\n      return vertexFound ? closestVertex : intersects.point;\n    }\n  }, {\n    key: \"getVertices\",\n    value: function getVertices(intersects) {\n      var mesh = intersects.object;\n      if (!intersects.face || !mesh) return null;\n      var geom = mesh.geometry;\n      return [this.getVertex(intersects.face.a, geom), this.getVertex(intersects.face.b, geom), this.getVertex(intersects.face.c, geom)];\n    }\n  }, {\n    key: \"getVertex\",\n    value: function getVertex(index, geom) {\n      if (index === undefined) return null;\n      var vertices = geom.attributes.position;\n      return new Vector3(vertices.getX(index), vertices.getY(index), vertices.getZ(index));\n    }\n  }]);\n\n  return IfcDimensions;\n}(IfcComponent);","map":{"version":3,"sources":["../../../../src/components/display/dimensions/dimensions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { ConeGeometry, LineDashedMaterial, MeshBasicMaterial, Vector3 } from 'three';\r\nimport { CSS2DObject } from 'three/examples/jsm/renderers/CSS2DRenderer';\r\nimport { IfcComponent } from '../../../base-types';\r\nimport { IfcDimensionLine } from './dimension-line';\r\nexport class IfcDimensions extends IfcComponent {\r\n    constructor(context) {\r\n        super(context);\r\n        this.dimensions = [];\r\n        this.labelClassName = 'ifcjs-dimension-label';\r\n        this.previewClassName = 'ifcjs-dimension-preview';\r\n        // State\r\n        this.enabled = false;\r\n        this.preview = false;\r\n        this.dragging = false;\r\n        this.snapDistance = 0.25;\r\n        // Measures\r\n        this.arrowHeight = 0.2;\r\n        this.arrowRadius = 0.05;\r\n        this.baseScale = new Vector3(1, 1, 1);\r\n        // Materials\r\n        this.lineMaterial = new LineDashedMaterial({\r\n            color: 0x000000,\r\n            linewidth: 2,\r\n            depthTest: false,\r\n            dashSize: 0.2,\r\n            gapSize: 0.2\r\n        });\r\n        this.endpointsMaterial = new MeshBasicMaterial({ color: 0x000000, depthTest: false });\r\n        // Temp variables\r\n        this.startPoint = new Vector3();\r\n        this.endPoint = new Vector3();\r\n        this.context = context;\r\n        this.endpoint = this.getDefaultEndpointGeometry();\r\n        const htmlPreview = document.createElement('div');\r\n        htmlPreview.className = this.previewClassName;\r\n        this.previewElement = new CSS2DObject(htmlPreview);\r\n        this.previewElement.visible = false;\r\n    }\r\n    update(_delta) {\r\n        if (this.enabled && this.preview) {\r\n            const intersects = this.context.castRayIfc();\r\n            this.previewElement.visible = !!intersects;\r\n            if (!intersects)\r\n                return;\r\n            this.previewElement.visible = true;\r\n            const closest = this.getClosestVertex(intersects);\r\n            this.previewElement.visible = !!closest;\r\n            if (!closest)\r\n                return;\r\n            this.previewElement.position.set(closest.x, closest.y, closest.z);\r\n            if (this.dragging) {\r\n                this.drawInProcess();\r\n            }\r\n        }\r\n    }\r\n    get active() {\r\n        return this.enabled;\r\n    }\r\n    get previewActive() {\r\n        return this.preview;\r\n    }\r\n    get previewObject() {\r\n        return this.previewElement;\r\n    }\r\n    set previewActive(state) {\r\n        this.preview = state;\r\n        const scene = this.context.getScene();\r\n        if (this.preview) {\r\n            scene.add(this.previewElement);\r\n        }\r\n        else {\r\n            scene.remove(this.previewElement);\r\n        }\r\n    }\r\n    set active(state) {\r\n        this.enabled = state;\r\n        this.dimensions.forEach((dim) => {\r\n            dim.visibility = state;\r\n        });\r\n    }\r\n    set dimensionsColor(color) {\r\n        this.endpointsMaterial.color = color;\r\n        this.lineMaterial.color = color;\r\n    }\r\n    set dimensionsWidth(width) {\r\n        this.lineMaterial.linewidth = width;\r\n    }\r\n    set endpointGeometry(geometry) {\r\n        this.dimensions.forEach((dim) => {\r\n            dim.endpointGeometry = geometry;\r\n        });\r\n    }\r\n    set endpointScaleFactor(factor) {\r\n        IfcDimensionLine.scaleFactor = factor;\r\n    }\r\n    set endpointScale(scale) {\r\n        this.baseScale = scale;\r\n        this.dimensions.forEach((dim) => {\r\n            dim.endpointScale = scale;\r\n        });\r\n    }\r\n    create() {\r\n        if (!this.enabled)\r\n            return;\r\n        if (!this.dragging) {\r\n            this.drawStart();\r\n            return;\r\n        }\r\n        this.drawEnd();\r\n    }\r\n    delete() {\r\n        if (!this.enabled || this.dimensions.length === 0)\r\n            return;\r\n        const boundingBoxes = this.getBoundingBoxes();\r\n        const intersects = this.context.castRay(boundingBoxes);\r\n        if (intersects.length === 0)\r\n            return;\r\n        const selected = this.dimensions.find((dim) => dim.boundingBox === intersects[0].object);\r\n        if (!selected)\r\n            return;\r\n        const index = this.dimensions.indexOf(selected);\r\n        this.dimensions.splice(index, 1);\r\n        selected.removeFromScene();\r\n    }\r\n    deleteAll() {\r\n        this.dimensions.forEach((dim) => {\r\n            dim.removeFromScene();\r\n        });\r\n        this.dimensions = [];\r\n    }\r\n    cancelDrawing() {\r\n        var _a;\r\n        if (!this.currentDimension)\r\n            return;\r\n        this.dragging = false;\r\n        (_a = this.currentDimension) === null || _a === void 0 ? void 0 : _a.removeFromScene();\r\n        this.currentDimension = undefined;\r\n    }\r\n    drawStart() {\r\n        this.dragging = true;\r\n        const intersects = this.context.castRayIfc();\r\n        if (!intersects)\r\n            return;\r\n        const found = this.getClosestVertex(intersects);\r\n        if (!found)\r\n            return;\r\n        this.startPoint = found;\r\n    }\r\n    drawInProcess() {\r\n        const intersects = this.context.castRayIfc();\r\n        if (!intersects)\r\n            return;\r\n        const found = this.getClosestVertex(intersects);\r\n        if (!found)\r\n            return;\r\n        this.endPoint = found;\r\n        if (!this.currentDimension)\r\n            this.currentDimension = this.drawDimension();\r\n        this.currentDimension.endPoint = this.endPoint;\r\n    }\r\n    drawEnd() {\r\n        if (!this.currentDimension)\r\n            return;\r\n        this.currentDimension.createBoundingBox();\r\n        this.dimensions.push(this.currentDimension);\r\n        this.currentDimension = undefined;\r\n        this.dragging = false;\r\n    }\r\n    drawDimension() {\r\n        return new IfcDimensionLine(this.context, this.startPoint, this.endPoint, this.lineMaterial, this.endpointsMaterial, this.endpoint, this.labelClassName, this.baseScale);\r\n    }\r\n    getBoundingBoxes() {\r\n        return this.dimensions\r\n            .map((dim) => dim.boundingBox)\r\n            .filter((box) => box !== undefined);\r\n    }\r\n    getDefaultEndpointGeometry() {\r\n        const coneGeometry = new ConeGeometry(this.arrowRadius, this.arrowHeight);\r\n        coneGeometry.translate(0, -this.arrowHeight / 2, 0);\r\n        coneGeometry.rotateX(-Math.PI / 2);\r\n        return coneGeometry;\r\n    }\r\n    getClosestVertex(intersects) {\r\n        let closestVertex = new Vector3();\r\n        let vertexFound = false;\r\n        let closestDistance = Number.MAX_SAFE_INTEGER;\r\n        const vertices = this.getVertices(intersects);\r\n        vertices === null || vertices === void 0 ? void 0 : vertices.forEach((vertex) => {\r\n            if (!vertex)\r\n                return;\r\n            const distance = intersects.point.distanceTo(vertex);\r\n            if (distance > closestDistance || distance > this.snapDistance)\r\n                return;\r\n            vertexFound = true;\r\n            closestVertex = vertex;\r\n            closestDistance = intersects.point.distanceTo(vertex);\r\n        });\r\n        return vertexFound ? closestVertex : intersects.point;\r\n    }\r\n    getVertices(intersects) {\r\n        const mesh = intersects.object;\r\n        if (!intersects.face || !mesh)\r\n            return null;\r\n        const geom = mesh.geometry;\r\n        return [\r\n            this.getVertex(intersects.face.a, geom),\r\n            this.getVertex(intersects.face.b, geom),\r\n            this.getVertex(intersects.face.c, geom)\r\n        ];\r\n    }\r\n    getVertex(index, geom) {\r\n        if (index === undefined)\r\n            return null;\r\n        const vertices = geom.attributes.position;\r\n        return new Vector3(vertices.getX(index), vertices.getY(index), vertices.getZ(index));\r\n    }\r\n}\r\n//# sourceMappingURL=dimensions.js.map"]},"metadata":{},"sourceType":"module"}