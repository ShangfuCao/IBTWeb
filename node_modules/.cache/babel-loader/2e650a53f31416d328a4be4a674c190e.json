{"ast":null,"code":"import _toConsumableArray from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/shangfualexcao/Dropbox (Personal)/My Mac (Shangfu\\u2019s MacBook Pro)/Documents/GitHub/IBT-Web/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as WebIFC from 'web-ifc';\nimport { IFCRELAGGREGATES, IFCRELCONTAINEDINSPATIALSTRUCTURE, IFCRELDEFINESBYPROPERTIES, IFCRELASSOCIATESMATERIAL, IFCRELDEFINESBYTYPE, IFCSPACE, IFCOPENINGELEMENT, IFCPROJECT } from 'web-ifc';\nimport { BufferAttribute, Mesh, Matrix4, BufferGeometry, Color, MeshLambertMaterial, DoubleSide, Loader, FileLoader } from 'three';\nimport { mergeBufferGeometries } from 'three/examples/jsm/utils/BufferGeometryUtils';\nvar IdAttrName = 'expressID';\n\nvar merge = function merge(geoms) {\n  var createGroups = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return mergeBufferGeometries(geoms, createGroups);\n};\n\nvar newFloatAttr = function newFloatAttr(data, size) {\n  return new BufferAttribute(new Float32Array(data), size);\n};\n\nvar newIntAttr = function newIntAttr(data, size) {\n  return new BufferAttribute(new Uint32Array(data), size);\n};\n\nvar DEFAULT = 'default';\nvar PropsNames = {\n  aggregates: {\n    name: IFCRELAGGREGATES,\n    relating: 'RelatingObject',\n    related: 'RelatedObjects',\n    key: 'children'\n  },\n  spatial: {\n    name: IFCRELCONTAINEDINSPATIALSTRUCTURE,\n    relating: 'RelatingStructure',\n    related: 'RelatedElements',\n    key: 'children'\n  },\n  psets: {\n    name: IFCRELDEFINESBYPROPERTIES,\n    relating: 'RelatingPropertyDefinition',\n    related: 'RelatedObjects',\n    key: 'hasPsets'\n  },\n  materials: {\n    name: IFCRELASSOCIATESMATERIAL,\n    relating: 'RelatingMaterial',\n    related: 'RelatedObjects',\n    key: 'hasMaterial'\n  },\n  type: {\n    name: IFCRELDEFINESBYTYPE,\n    relating: 'RelatingType',\n    related: 'RelatedObjects',\n    key: 'hasType'\n  }\n};\nvar modelIdCounter = 0;\nvar nullIfcManagerErrorMessage = 'IfcManager is null!';\n\nvar IFCModel = /*#__PURE__*/function (_Mesh) {\n  _inherits(IFCModel, _Mesh);\n\n  var _super = _createSuper(IFCModel);\n\n  function IFCModel() {\n    var _this;\n\n    _classCallCheck(this, IFCModel);\n\n    _this = _super.apply(this, arguments);\n    _this.modelID = modelIdCounter++;\n    _this.ifcManager = null;\n    _this.mesh = _assertThisInitialized(_this);\n    return _this;\n  }\n\n  _createClass(IFCModel, [{\n    key: \"setIFCManager\",\n    value: function setIFCManager(manager) {\n      this.ifcManager = manager;\n    }\n  }, {\n    key: \"setWasmPath\",\n    value: function setWasmPath(path) {\n      if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n      this.ifcManager.setWasmPath(path);\n    }\n  }, {\n    key: \"close\",\n    value: function close(scene) {\n      if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n      this.ifcManager.close(this.modelID, scene);\n    }\n  }, {\n    key: \"getExpressId\",\n    value: function getExpressId(geometry, faceIndex) {\n      if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n      return this.ifcManager.getExpressId(geometry, faceIndex);\n    }\n  }, {\n    key: \"getAllItemsOfType\",\n    value: function getAllItemsOfType(type, verbose) {\n      if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n      return this.ifcManager.getAllItemsOfType(this.modelID, type, verbose);\n    }\n  }, {\n    key: \"getItemProperties\",\n    value: function getItemProperties(id) {\n      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n      return this.ifcManager.getItemProperties(this.modelID, id, recursive);\n    }\n  }, {\n    key: \"getPropertySets\",\n    value: function getPropertySets(id) {\n      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n      return this.ifcManager.getPropertySets(this.modelID, id, recursive);\n    }\n  }, {\n    key: \"getTypeProperties\",\n    value: function getTypeProperties(id) {\n      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n      return this.ifcManager.getTypeProperties(this.modelID, id, recursive);\n    }\n  }, {\n    key: \"getIfcType\",\n    value: function getIfcType(id) {\n      if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n      return this.ifcManager.getIfcType(this.modelID, id);\n    }\n  }, {\n    key: \"getSpatialStructure\",\n    value: function getSpatialStructure() {\n      if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n      return this.ifcManager.getSpatialStructure(this.modelID);\n    }\n  }, {\n    key: \"getSubset\",\n    value: function getSubset(material) {\n      if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n      return this.ifcManager.getSubset(this.modelID, material);\n    }\n  }, {\n    key: \"removeSubset\",\n    value: function removeSubset(parent, material) {\n      if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n      this.ifcManager.removeSubset(this.modelID, parent, material);\n    }\n  }, {\n    key: \"createSubset\",\n    value: function createSubset(config) {\n      if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n\n      var modelConfig = _objectSpread(_objectSpread({}, config), {}, {\n        modelID: this.modelID\n      });\n\n      return this.ifcManager.createSubset(modelConfig);\n    }\n  }, {\n    key: \"hideItems\",\n    value: function hideItems(ids) {\n      if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n      this.ifcManager.hideItems(this.modelID, ids);\n    }\n  }, {\n    key: \"hideAllItems\",\n    value: function hideAllItems() {\n      if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n      this.ifcManager.hideAllItems(this.modelID);\n    }\n  }, {\n    key: \"showItems\",\n    value: function showItems(ids) {\n      if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n      this.ifcManager.showItems(this.modelID, ids);\n    }\n  }, {\n    key: \"showAllItems\",\n    value: function showAllItems() {\n      if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n      this.ifcManager.showAllItems(this.modelID);\n    }\n  }]);\n\n  return IFCModel;\n}(Mesh);\n\nvar IFCParser = /*#__PURE__*/function () {\n  function IFCParser(state, BVH) {\n    var _this$optionalCategor;\n\n    _classCallCheck(this, IFCParser);\n\n    this.state = state;\n    this.BVH = BVH;\n    this.loadedModels = 0;\n    this.optionalCategories = (_this$optionalCategor = {}, _defineProperty(_this$optionalCategor, IFCSPACE, true), _defineProperty(_this$optionalCategor, IFCOPENINGELEMENT, false), _this$optionalCategor);\n    this.currentWebIfcID = -1;\n    this.currentModelID = -1;\n  }\n\n  _createClass(IFCParser, [{\n    key: \"setupOptionalCategories\",\n    value: function () {\n      var _setupOptionalCategories = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(config) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.optionalCategories = config;\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setupOptionalCategories(_x) {\n        return _setupOptionalCategories.apply(this, arguments);\n      }\n\n      return setupOptionalCategories;\n    }()\n  }, {\n    key: \"parse\",\n    value: function () {\n      var _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(buffer, coordinationMatrix) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.state.api.wasmModule === undefined)) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                _context2.next = 3;\n                return this.state.api.Init();\n\n              case 3:\n                _context2.next = 5;\n                return this.newIfcModel(buffer);\n\n              case 5:\n                this.loadedModels++;\n\n                if (!coordinationMatrix) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                _context2.next = 9;\n                return this.state.api.SetGeometryTransformation(this.currentWebIfcID, coordinationMatrix);\n\n              case 9:\n                return _context2.abrupt(\"return\", this.loadAllGeometry());\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function parse(_x2, _x3) {\n        return _parse.apply(this, arguments);\n      }\n\n      return parse;\n    }()\n  }, {\n    key: \"getAndClearErrors\",\n    value: function getAndClearErrors(_modelId) {}\n  }, {\n    key: \"notifyProgress\",\n    value: function notifyProgress(loaded, total) {\n      if (this.state.onProgress) this.state.onProgress({\n        loaded: loaded,\n        total: total\n      });\n    }\n  }, {\n    key: \"newIfcModel\",\n    value: function () {\n      var _newIfcModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(buffer) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                data = new Uint8Array(buffer);\n                _context3.next = 3;\n                return this.state.api.OpenModel(data, this.state.webIfcSettings);\n\n              case 3:\n                this.currentWebIfcID = _context3.sent;\n                this.currentModelID = this.state.useJSON ? this.loadedModels : this.currentWebIfcID;\n                this.state.models[this.currentModelID] = {\n                  modelID: this.currentModelID,\n                  mesh: {},\n                  items: {},\n                  types: {},\n                  jsonData: {}\n                };\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function newIfcModel(_x4) {\n        return _newIfcModel.apply(this, arguments);\n      }\n\n      return newIfcModel;\n    }()\n  }, {\n    key: \"loadAllGeometry\",\n    value: function () {\n      var _loadAllGeometry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.saveAllPlacedGeometriesByMaterial();\n\n              case 2:\n                return _context4.abrupt(\"return\", this.generateAllGeometriesByMaterial());\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function loadAllGeometry() {\n        return _loadAllGeometry.apply(this, arguments);\n      }\n\n      return loadAllGeometry;\n    }()\n  }, {\n    key: \"generateAllGeometriesByMaterial\",\n    value: function generateAllGeometriesByMaterial() {\n      var _this$getGeometryAndM = this.getGeometryAndMaterials(),\n          geometry = _this$getGeometryAndM.geometry,\n          materials = _this$getGeometryAndM.materials;\n\n      if (this.BVH) this.BVH.applyThreeMeshBVH(geometry);\n      var mesh = new IFCModel(geometry, materials);\n      mesh.modelID = this.currentModelID;\n      this.state.models[this.currentModelID].mesh = mesh;\n      return mesh;\n    }\n  }, {\n    key: \"getGeometryAndMaterials\",\n    value: function getGeometryAndMaterials() {\n      var items = this.state.models[this.currentModelID].items;\n      var mergedByMaterial = [];\n      var materials = [];\n\n      for (var materialID in items) {\n        if (items.hasOwnProperty(materialID)) {\n          materials.push(items[materialID].material);\n          var geometries = Object.values(items[materialID].geometries);\n          mergedByMaterial.push(merge(geometries));\n        }\n      }\n\n      var geometry = merge(mergedByMaterial, true);\n      return {\n        geometry: geometry,\n        materials: materials\n      };\n    }\n  }, {\n    key: \"saveAllPlacedGeometriesByMaterial\",\n    value: function () {\n      var _saveAllPlacedGeometriesByMaterial = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var flatMeshes, size, counter, i, flatMesh, placedGeom, j;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.addOptionalCategories();\n\n              case 2:\n                _context5.next = 4;\n                return this.state.api.LoadAllGeometry(this.currentWebIfcID);\n\n              case 4:\n                flatMeshes = _context5.sent;\n                size = flatMeshes.size();\n                counter = 0;\n                i = 0;\n\n              case 8:\n                if (!(i < size)) {\n                  _context5.next = 22;\n                  break;\n                }\n\n                if (i > counter) {\n                  this.notifyProgress(i, size);\n                  counter += Math.trunc(size / 10);\n                }\n\n                flatMesh = flatMeshes.get(i);\n                placedGeom = flatMesh.geometries;\n                j = 0;\n\n              case 13:\n                if (!(j < placedGeom.size())) {\n                  _context5.next = 19;\n                  break;\n                }\n\n                _context5.next = 16;\n                return this.savePlacedGeometry(placedGeom.get(j), flatMesh.expressID);\n\n              case 16:\n                j++;\n                _context5.next = 13;\n                break;\n\n              case 19:\n                i++;\n                _context5.next = 8;\n                break;\n\n              case 22:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function saveAllPlacedGeometriesByMaterial() {\n        return _saveAllPlacedGeometriesByMaterial.apply(this, arguments);\n      }\n\n      return saveAllPlacedGeometriesByMaterial;\n    }()\n  }, {\n    key: \"addOptionalCategories\",\n    value: function () {\n      var _addOptionalCategories = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var _this2 = this;\n\n        var optionalTypes, key, category;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                optionalTypes = [];\n\n                for (key in this.optionalCategories) {\n                  if (this.optionalCategories.hasOwnProperty(key)) {\n                    category = parseInt(key);\n                    if (this.optionalCategories[category]) optionalTypes.push(category);\n                  }\n                }\n\n                _context7.next = 4;\n                return this.state.api.StreamAllMeshesWithTypes(this.currentWebIfcID, optionalTypes, /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(mesh) {\n                    var geometries, size, j;\n                    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                      while (1) {\n                        switch (_context6.prev = _context6.next) {\n                          case 0:\n                            geometries = mesh.geometries;\n                            size = geometries.size();\n                            j = 0;\n\n                          case 3:\n                            if (!(j < size)) {\n                              _context6.next = 9;\n                              break;\n                            }\n\n                            _context6.next = 6;\n                            return _this2.savePlacedGeometry(geometries.get(j), mesh.expressID);\n\n                          case 6:\n                            j++;\n                            _context6.next = 3;\n                            break;\n\n                          case 9:\n                          case \"end\":\n                            return _context6.stop();\n                        }\n                      }\n                    }, _callee6);\n                  }));\n\n                  return function (_x5) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function addOptionalCategories() {\n        return _addOptionalCategories.apply(this, arguments);\n      }\n\n      return addOptionalCategories;\n    }()\n  }, {\n    key: \"savePlacedGeometry\",\n    value: function () {\n      var _savePlacedGeometry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(placedGeometry, id) {\n        var geometry;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.getGeometry(placedGeometry);\n\n              case 2:\n                geometry = _context8.sent;\n                this.saveGeometryByMaterial(geometry, placedGeometry, id);\n\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function savePlacedGeometry(_x6, _x7) {\n        return _savePlacedGeometry.apply(this, arguments);\n      }\n\n      return savePlacedGeometry;\n    }()\n  }, {\n    key: \"getGeometry\",\n    value: function () {\n      var _getGeometry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(placedGeometry) {\n        var geometry, matrix;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.getBufferGeometry(placedGeometry);\n\n              case 2:\n                geometry = _context9.sent;\n                geometry.computeVertexNormals();\n                matrix = IFCParser.getMeshMatrix(placedGeometry.flatTransformation);\n                geometry.applyMatrix4(matrix);\n                return _context9.abrupt(\"return\", geometry);\n\n              case 7:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getGeometry(_x8) {\n        return _getGeometry.apply(this, arguments);\n      }\n\n      return getGeometry;\n    }()\n  }, {\n    key: \"getBufferGeometry\",\n    value: function () {\n      var _getBufferGeometry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(placed) {\n        var geometry, vertexData, indices, _IFCParser$extractVer, vertices, normals;\n\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.state.api.GetGeometry(this.currentWebIfcID, placed.geometryExpressID);\n\n              case 2:\n                geometry = _context10.sent;\n                _context10.next = 5;\n                return this.getVertices(geometry);\n\n              case 5:\n                vertexData = _context10.sent;\n                _context10.next = 8;\n                return this.getIndices(geometry);\n\n              case 8:\n                indices = _context10.sent;\n                _IFCParser$extractVer = IFCParser.extractVertexData(vertexData), vertices = _IFCParser$extractVer.vertices, normals = _IFCParser$extractVer.normals;\n                return _context10.abrupt(\"return\", IFCParser.ifcGeomToBufferGeom(vertices, normals, indices));\n\n              case 11:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function getBufferGeometry(_x9) {\n        return _getBufferGeometry.apply(this, arguments);\n      }\n\n      return getBufferGeometry;\n    }()\n  }, {\n    key: \"getVertices\",\n    value: function () {\n      var _getVertices = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(geometry) {\n        var vData, vDataSize;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                vData = geometry.GetVertexData();\n                vDataSize = geometry.GetVertexDataSize();\n                return _context11.abrupt(\"return\", this.state.api.GetVertexArray(vData, vDataSize));\n\n              case 3:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getVertices(_x10) {\n        return _getVertices.apply(this, arguments);\n      }\n\n      return getVertices;\n    }()\n  }, {\n    key: \"getIndices\",\n    value: function () {\n      var _getIndices = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(geometry) {\n        var iData, iDataSize;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                iData = geometry.GetIndexData();\n                iDataSize = geometry.GetIndexDataSize();\n                return _context12.abrupt(\"return\", this.state.api.GetIndexArray(iData, iDataSize));\n\n              case 3:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getIndices(_x11) {\n        return _getIndices.apply(this, arguments);\n      }\n\n      return getIndices;\n    }()\n  }, {\n    key: \"saveGeometryByMaterial\",\n    value: function saveGeometryByMaterial(geom, placedGeom, id) {\n      var color = placedGeom.color;\n      var colorID = \"\".concat(color.x).concat(color.y).concat(color.z).concat(color.w);\n      IFCParser.storeGeometryAttribute(id, geom);\n      this.createMaterial(colorID, color);\n      var item = this.state.models[this.currentModelID].items[colorID];\n      var currentGeom = item.geometries[id];\n      if (!currentGeom) return item.geometries[id] = geom;\n      item.geometries[id] = merge([currentGeom, geom]);\n    }\n  }, {\n    key: \"createMaterial\",\n    value: function createMaterial(colorID, color) {\n      var items = this.state.models[this.currentModelID].items;\n      if (items[colorID]) return;\n      var col = new Color(color.x, color.y, color.z);\n      var newMaterial = new MeshLambertMaterial({\n        color: col,\n        side: DoubleSide\n      });\n      newMaterial.transparent = color.w !== 1;\n      if (newMaterial.transparent) newMaterial.opacity = color.w;\n      items[colorID] = {\n        material: newMaterial,\n        geometries: {}\n      };\n    }\n  }], [{\n    key: \"getMeshMatrix\",\n    value: function getMeshMatrix(matrix) {\n      var mat = new Matrix4();\n      mat.fromArray(matrix);\n      return mat;\n    }\n  }, {\n    key: \"ifcGeomToBufferGeom\",\n    value: function ifcGeomToBufferGeom(vertices, normals, indexData) {\n      var geometry = new BufferGeometry();\n      geometry.setAttribute('position', newFloatAttr(vertices, 3));\n      geometry.setAttribute('normal', newFloatAttr(normals, 3));\n      geometry.setIndex(new BufferAttribute(indexData, 1));\n      return geometry;\n    }\n  }, {\n    key: \"extractVertexData\",\n    value: function extractVertexData(vertexData) {\n      var vertices = [];\n      var normals = [];\n      var isNormalData = false;\n\n      for (var i = 0; i < vertexData.length; i++) {\n        isNormalData ? normals.push(vertexData[i]) : vertices.push(vertexData[i]);\n        if ((i + 1) % 3 == 0) isNormalData = !isNormalData;\n      }\n\n      return {\n        vertices: vertices,\n        normals: normals\n      };\n    }\n  }, {\n    key: \"storeGeometryAttribute\",\n    value: function storeGeometryAttribute(id, geometry) {\n      var size = geometry.attributes.position.count;\n      var idAttribute = new Array(size).fill(id);\n      geometry.setAttribute(IdAttrName, newIntAttr(idAttribute, 1));\n    }\n  }]);\n\n  return IFCParser;\n}();\n\nvar SubsetManager = /*#__PURE__*/function () {\n  function SubsetManager(state, BVH) {\n    _classCallCheck(this, SubsetManager);\n\n    this.selected = {};\n    this.state = state;\n    this.BVH = BVH;\n  }\n\n  _createClass(SubsetManager, [{\n    key: \"dispose\",\n    value: function dispose() {}\n  }, {\n    key: \"getSubset\",\n    value: function getSubset(modelID, material, customId) {\n      var currentMat = this.matIDNoConfig(modelID, material, customId);\n      return this.selected[currentMat].mesh || null;\n    }\n  }, {\n    key: \"removeSubset\",\n    value: function removeSubset(modelID, parent, material, customId) {\n      var currentMat = this.matIDNoConfig(modelID, material, customId);\n      if (!this.selected[currentMat]) return;\n      if (parent) parent.remove(this.selected[currentMat].mesh);\n      delete this.selected[currentMat];\n    }\n  }, {\n    key: \"createSubset\",\n    value: function createSubset(config) {\n      this.checkConfigValid(config);\n      if (this.isPreviousSelection(config)) return;\n      if (this.isEasySelection(config)) return this.addToPreviousSelection(config);\n      this.updatePreviousSelection(config.scene, config);\n      return this.createSelectionInScene(config);\n    }\n  }, {\n    key: \"createSelectionInScene\",\n    value: function createSelectionInScene(config) {\n      var filtered = this.filter(config);\n\n      var _this$getGeomAndMat = this.getGeomAndMat(filtered),\n          geomsByMaterial = _this$getGeomAndMat.geomsByMaterial,\n          materials = _this$getGeomAndMat.materials;\n\n      if (geomsByMaterial.length <= 0) return null;\n      var isDefMaterial = this.isDefaultMat(config);\n      var geometry = this.getMergedGeometry(geomsByMaterial, isDefMaterial);\n      var mats = isDefMaterial ? materials : config.material;\n      this.BVH.applyThreeMeshBVH(geometry);\n      var mesh = new Mesh(geometry, mats);\n      this.selected[this.matID(config)].mesh = mesh;\n      mesh.modelID = config.modelID;\n      config.scene.add(mesh);\n      return mesh;\n    }\n  }, {\n    key: \"getMergedGeometry\",\n    value: function getMergedGeometry(geomsByMaterial, hasDefaultMaterial) {\n      return geomsByMaterial.length > 0 ? merge(geomsByMaterial, hasDefaultMaterial) : new BufferGeometry();\n    }\n  }, {\n    key: \"checkConfigValid\",\n    value: function checkConfigValid(config) {\n      this.checkValidConfigParam(config.scene);\n      this.checkValidConfigParam(config.modelID);\n      this.checkValidConfigParam(config.ids);\n      this.checkValidConfigParam(config.removePrevious);\n\n      if (config.ids.length <= 0) {\n        throw new Error('Error: config parameter ids cannot be empty');\n      }\n    }\n  }, {\n    key: \"checkValidConfigParam\",\n    value: function checkValidConfigParam(item) {\n      if (item === undefined || item === null) throw new Error(\"Error with subset config parameter: \".concat(item));\n    }\n  }, {\n    key: \"getGeomAndMat\",\n    value: function getGeomAndMat(filtered) {\n      var geomsByMaterial = [];\n      var materials = [];\n\n      for (var matID in filtered) {\n        var geoms = Object.values(filtered[matID].geometries);\n        geoms = geoms.filter(function (geom) {\n          return Object.values(geom.attributes).length > 0;\n        });\n        if (!geoms.length) continue;\n        materials.push(filtered[matID].material);\n        if (geoms.length > 1) geomsByMaterial.push(merge(geoms));else geomsByMaterial.push.apply(geomsByMaterial, _toConsumableArray(geoms));\n      }\n\n      return {\n        geomsByMaterial: geomsByMaterial,\n        materials: materials\n      };\n    }\n  }, {\n    key: \"updatePreviousSelection\",\n    value: function updatePreviousSelection(parent, config) {\n      var previous = this.selected[this.matID(config)];\n      if (!previous) return this.newSelectionGroup(config);\n      parent.remove(previous.mesh);\n      config.removePrevious ? previous.ids = new Set(config.ids) : config.ids.forEach(function (id) {\n        return previous.ids.add(id);\n      });\n    }\n  }, {\n    key: \"newSelectionGroup\",\n    value: function newSelectionGroup(config) {\n      this.selected[this.matID(config)] = {\n        ids: new Set(config.ids),\n        mesh: {}\n      };\n    }\n  }, {\n    key: \"isPreviousSelection\",\n    value: function isPreviousSelection(config) {\n      if (!this.selected[this.matID(config)]) return false;\n      if (this.containsIds(config)) return true;\n      var previousIds = this.selected[this.matID(config)].ids;\n      return JSON.stringify(config.ids) === JSON.stringify(previousIds);\n    }\n  }, {\n    key: \"containsIds\",\n    value: function containsIds(config) {\n      var newIds = config.ids;\n      var previous = Array.from(this.selected[this.matID(config)].ids);\n      return newIds.every(function (i) {\n        return function (v) {\n          return i = previous.indexOf(v, i) + 1;\n        };\n      }(0));\n    }\n  }, {\n    key: \"addToPreviousSelection\",\n    value: function addToPreviousSelection(config) {\n      var previous = this.selected[this.matID(config)];\n      var filtered = this.filter(config, new Set(config.ids));\n      var geometries = Object.values(filtered).map(function (i) {\n        return Object.values(i.geometries);\n      }).flat();\n      var previousGeom = previous.mesh.geometry;\n      previous.mesh.geometry = merge([previousGeom].concat(_toConsumableArray(geometries)));\n      config.ids.forEach(function (id) {\n        return previous.ids.add(id);\n      });\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(config, itemsID) {\n      var ids = itemsID || this.selected[this.matID(config)].ids;\n      var items = this.state.models[config.modelID].items;\n      var filtered = {};\n\n      for (var matID in items) {\n        filtered[matID] = {\n          material: items[matID].material,\n          geometries: this.filterGeometries(ids, items[matID].geometries)\n        };\n      }\n\n      return filtered;\n    }\n  }, {\n    key: \"filterGeometries\",\n    value: function filterGeometries(selectedIDs, geometries) {\n      var ids = Array.from(selectedIDs);\n      return Object.keys(geometries).filter(function (key) {\n        return ids.includes(parseInt(key, 10));\n      }).reduce(function (obj, key) {\n        return _objectSpread(_objectSpread({}, obj), {}, _defineProperty({}, key, geometries[key]));\n      }, {});\n    }\n  }, {\n    key: \"isEasySelection\",\n    value: function isEasySelection(config) {\n      var matID = this.matID(config);\n      if (!config.removePrevious && !this.isDefaultMat(config) && this.selected[matID]) return true;\n    }\n  }, {\n    key: \"isDefaultMat\",\n    value: function isDefaultMat(config) {\n      var id = this.matIDNoConfig(config.modelID, undefined, config.customId);\n      var id2 = this.matID(config);\n      return id === id2;\n    }\n  }, {\n    key: \"matID\",\n    value: function matID(config) {\n      var name;\n      if (!config.material) name = DEFAULT;else name = config.material.uuid;\n      name += ' - ' + (config.customId || \"\");\n      return name.concat(' - ').concat(config.modelID.toString());\n    }\n  }, {\n    key: \"matIDNoConfig\",\n    value: function matIDNoConfig(modelID, material) {\n      var customId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n      var name = DEFAULT;\n      if (material) name = material.uuid;\n      name += ' - ' + customId;\n      return name.concat(' - ').concat(modelID.toString());\n    }\n  }]);\n\n  return SubsetManager;\n}();\n\nvar BasePropertyManager = /*#__PURE__*/function () {\n  function BasePropertyManager(state) {\n    _classCallCheck(this, BasePropertyManager);\n\n    this.state = state;\n  }\n\n  _createClass(BasePropertyManager, [{\n    key: \"getPropertySets\",\n    value: function () {\n      var _getPropertySets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(modelID, elementID) {\n        var recursive,\n            _args13 = arguments;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                recursive = _args13.length > 2 && _args13[2] !== undefined ? _args13[2] : false;\n                _context13.next = 3;\n                return this.getProperty(modelID, elementID, recursive, PropsNames.psets);\n\n              case 3:\n                return _context13.abrupt(\"return\", _context13.sent);\n\n              case 4:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getPropertySets(_x12, _x13) {\n        return _getPropertySets.apply(this, arguments);\n      }\n\n      return getPropertySets;\n    }()\n  }, {\n    key: \"getTypeProperties\",\n    value: function () {\n      var _getTypeProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(modelID, elementID) {\n        var recursive,\n            _args14 = arguments;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                recursive = _args14.length > 2 && _args14[2] !== undefined ? _args14[2] : false;\n                _context14.next = 3;\n                return this.getProperty(modelID, elementID, recursive, PropsNames.type);\n\n              case 3:\n                return _context14.abrupt(\"return\", _context14.sent);\n\n              case 4:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getTypeProperties(_x14, _x15) {\n        return _getTypeProperties.apply(this, arguments);\n      }\n\n      return getTypeProperties;\n    }()\n  }, {\n    key: \"getMaterialsProperties\",\n    value: function () {\n      var _getMaterialsProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(modelID, elementID) {\n        var recursive,\n            _args15 = arguments;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                recursive = _args15.length > 2 && _args15[2] !== undefined ? _args15[2] : false;\n                _context15.next = 3;\n                return this.getProperty(modelID, elementID, recursive, PropsNames.materials);\n\n              case 3:\n                return _context15.abrupt(\"return\", _context15.sent);\n\n              case 4:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function getMaterialsProperties(_x16, _x17) {\n        return _getMaterialsProperties.apply(this, arguments);\n      }\n\n      return getMaterialsProperties;\n    }()\n  }, {\n    key: \"getSpatialNode\",\n    value: function () {\n      var _getSpatialNode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(modelID, node, treeChunks, includeProperties) {\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.getChildren(modelID, node, treeChunks, PropsNames.aggregates, includeProperties);\n\n              case 2:\n                _context16.next = 4;\n                return this.getChildren(modelID, node, treeChunks, PropsNames.spatial, includeProperties);\n\n              case 4:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function getSpatialNode(_x18, _x19, _x20, _x21) {\n        return _getSpatialNode.apply(this, arguments);\n      }\n\n      return getSpatialNode;\n    }()\n  }, {\n    key: \"getChildren\",\n    value: function () {\n      var _getChildren = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(modelID, node, treeChunks, propNames, includeProperties) {\n        var children, prop, nodes, i, child, _node, properties;\n\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                children = treeChunks[node.expressID];\n\n                if (!(children == undefined)) {\n                  _context17.next = 3;\n                  break;\n                }\n\n                return _context17.abrupt(\"return\");\n\n              case 3:\n                prop = propNames.key;\n                nodes = [];\n                i = 0;\n\n              case 6:\n                if (!(i < children.length)) {\n                  _context17.next = 20;\n                  break;\n                }\n\n                child = children[i];\n                _node = this.newNode(modelID, child);\n\n                if (!includeProperties) {\n                  _context17.next = 14;\n                  break;\n                }\n\n                _context17.next = 12;\n                return this.getItemProperties(modelID, _node.expressID);\n\n              case 12:\n                properties = _context17.sent;\n                _node = _objectSpread(_objectSpread({}, properties), _node);\n\n              case 14:\n                _context17.next = 16;\n                return this.getSpatialNode(modelID, _node, treeChunks, includeProperties);\n\n              case 16:\n                nodes.push(_node);\n\n              case 17:\n                i++;\n                _context17.next = 6;\n                break;\n\n              case 20:\n                node[prop] = nodes;\n\n              case 21:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function getChildren(_x22, _x23, _x24, _x25, _x26) {\n        return _getChildren.apply(this, arguments);\n      }\n\n      return getChildren;\n    }()\n  }, {\n    key: \"newNode\",\n    value: function newNode(modelID, id) {\n      var typeName = this.getNodeType(modelID, id);\n      return {\n        expressID: id,\n        type: typeName,\n        children: []\n      };\n    }\n  }, {\n    key: \"getSpatialTreeChunks\",\n    value: function () {\n      var _getSpatialTreeChunks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(modelID) {\n        var treeChunks;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                treeChunks = {};\n                _context18.next = 3;\n                return this.getChunks(modelID, treeChunks, PropsNames.aggregates);\n\n              case 3:\n                _context18.next = 5;\n                return this.getChunks(modelID, treeChunks, PropsNames.spatial);\n\n              case 5:\n                return _context18.abrupt(\"return\", treeChunks);\n\n              case 6:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function getSpatialTreeChunks(_x27) {\n        return _getSpatialTreeChunks.apply(this, arguments);\n      }\n\n      return getSpatialTreeChunks;\n    }()\n  }, {\n    key: \"saveChunk\",\n    value: function saveChunk(chunks, propNames, rel) {\n      var relating = rel[propNames.relating].value;\n      var related = rel[propNames.related].map(function (r) {\n        return r.value;\n      });\n\n      if (chunks[relating] == undefined) {\n        chunks[relating] = related;\n      } else {\n        chunks[relating] = chunks[relating].concat(related);\n      }\n    }\n  }, {\n    key: \"getRelated\",\n    value: function getRelated(rel, propNames, IDs) {\n      var element = rel[propNames.relating];\n      if (!Array.isArray(element)) IDs.push(element.value);else element.forEach(function (ele) {\n        return IDs.push(ele.value);\n      });\n    }\n  }, {\n    key: \"getProperty\",\n    value: function () {\n      var _getProperty = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(modelID, elementID) {\n        var recursive,\n            propName,\n            _args19 = arguments;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                recursive = _args19.length > 2 && _args19[2] !== undefined ? _args19[2] : false;\n                propName = _args19.length > 3 ? _args19[3] : undefined;\n\n              case 2:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19);\n      }));\n\n      function getProperty(_x28, _x29) {\n        return _getProperty.apply(this, arguments);\n      }\n\n      return getProperty;\n    }()\n  }, {\n    key: \"getChunks\",\n    value: function () {\n      var _getChunks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(modelID, chunks, propNames) {\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20);\n      }));\n\n      function getChunks(_x30, _x31, _x32) {\n        return _getChunks.apply(this, arguments);\n      }\n\n      return getChunks;\n    }()\n  }, {\n    key: \"getItemProperties\",\n    value: function () {\n      var _getItemProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(modelID, expressID) {\n        var recursive,\n            _args21 = arguments;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                recursive = _args21.length > 2 && _args21[2] !== undefined ? _args21[2] : false;\n\n              case 1:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21);\n      }));\n\n      function getItemProperties(_x33, _x34) {\n        return _getItemProperties.apply(this, arguments);\n      }\n\n      return getItemProperties;\n    }()\n  }, {\n    key: \"getNodeType\",\n    value: function getNodeType(modelID, id) {}\n  }], [{\n    key: \"isRelated\",\n    value: function isRelated(id, rel, propNames) {\n      var relatedItems = rel[propNames.related];\n\n      if (Array.isArray(relatedItems)) {\n        var values = relatedItems.map(function (item) {\n          return item.value;\n        });\n        return values.includes(id);\n      }\n\n      return relatedItems.value === id;\n    }\n  }, {\n    key: \"newIfcProject\",\n    value: function newIfcProject(id) {\n      return {\n        expressID: id,\n        type: 'IFCPROJECT',\n        children: []\n      };\n    }\n  }]);\n\n  return BasePropertyManager;\n}();\n\nvar IfcElements = {\n  103090709: 'IFCPROJECT',\n  4097777520: 'IFCSITE',\n  4031249490: 'IFCBUILDING',\n  3124254112: 'IFCBUILDINGSTOREY',\n  3856911033: 'IFCSPACE',\n  1674181508: 'IFCANNOTATION',\n  25142252: 'IFCCONTROLLER',\n  32344328: 'IFCBOILER',\n  76236018: 'IFCLAMP',\n  90941305: 'IFCPUMP',\n  177149247: 'IFCAIRTERMINALBOX',\n  182646315: 'IFCFLOWINSTRUMENT',\n  263784265: 'IFCFURNISHINGELEMENT',\n  264262732: 'IFCELECTRICGENERATOR',\n  277319702: 'IFCAUDIOVISUALAPPLIANCE',\n  310824031: 'IFCPIPEFITTING',\n  331165859: 'IFCSTAIR',\n  342316401: 'IFCDUCTFITTING',\n  377706215: 'IFCMECHANICALFASTENER',\n  395920057: 'IFCDOOR',\n  402227799: 'IFCELECTRICMOTOR',\n  413509423: 'IFCSYSTEMFURNITUREELEMENT',\n  484807127: 'IFCEVAPORATOR',\n  486154966: 'IFCWINDOWSTANDARDCASE',\n  629592764: 'IFCLIGHTFIXTURE',\n  630975310: 'IFCUNITARYCONTROLELEMENT',\n  635142910: 'IFCCABLECARRIERFITTING',\n  639361253: 'IFCCOIL',\n  647756555: 'IFCFASTENER',\n  707683696: 'IFCFLOWSTORAGEDEVICE',\n  738039164: 'IFCPROTECTIVEDEVICE',\n  753842376: 'IFCBEAM',\n  812556717: 'IFCTANK',\n  819412036: 'IFCFILTER',\n  843113511: 'IFCCOLUMN',\n  862014818: 'IFCELECTRICDISTRIBUTIONBOARD',\n  900683007: 'IFCFOOTING',\n  905975707: 'IFCCOLUMNSTANDARDCASE',\n  926996030: 'IFCVOIDINGFEATURE',\n  979691226: 'IFCREINFORCINGBAR',\n  987401354: 'IFCFLOWSEGMENT',\n  1003880860: 'IFCELECTRICTIMECONTROL',\n  1051757585: 'IFCCABLEFITTING',\n  1052013943: 'IFCDISTRIBUTIONCHAMBERELEMENT',\n  1062813311: 'IFCDISTRIBUTIONCONTROLELEMENT',\n  1073191201: 'IFCMEMBER',\n  1095909175: 'IFCBUILDINGELEMENTPROXY',\n  1156407060: 'IFCPLATESTANDARDCASE',\n  1162798199: 'IFCSWITCHINGDEVICE',\n  1329646415: 'IFCSHADINGDEVICE',\n  1335981549: 'IFCDISCRETEACCESSORY',\n  1360408905: 'IFCDUCTSILENCER',\n  1404847402: 'IFCSTACKTERMINAL',\n  1426591983: 'IFCFIRESUPPRESSIONTERMINAL',\n  1437502449: 'IFCMEDICALDEVICE',\n  1509553395: 'IFCFURNITURE',\n  1529196076: 'IFCSLAB',\n  1620046519: 'IFCTRANSPORTELEMENT',\n  1634111441: 'IFCAIRTERMINAL',\n  1658829314: 'IFCENERGYCONVERSIONDEVICE',\n  1677625105: 'IFCCIVILELEMENT',\n  1687234759: 'IFCPILE',\n  1904799276: 'IFCELECTRICAPPLIANCE',\n  1911478936: 'IFCMEMBERSTANDARDCASE',\n  1945004755: 'IFCDISTRIBUTIONELEMENT',\n  1973544240: 'IFCCOVERING',\n  1999602285: 'IFCSPACEHEATER',\n  2016517767: 'IFCROOF',\n  2056796094: 'IFCAIRTOAIRHEATRECOVERY',\n  2058353004: 'IFCFLOWCONTROLLER',\n  2068733104: 'IFCHUMIDIFIER',\n  2176052936: 'IFCJUNCTIONBOX',\n  2188021234: 'IFCFLOWMETER',\n  2223149337: 'IFCFLOWTERMINAL',\n  2262370178: 'IFCRAILING',\n  2272882330: 'IFCCONDENSER',\n  2295281155: 'IFCPROTECTIVEDEVICETRIPPINGUNIT',\n  2320036040: 'IFCREINFORCINGMESH',\n  2347447852: 'IFCTENDONANCHOR',\n  2391383451: 'IFCVIBRATIONISOLATOR',\n  2391406946: 'IFCWALL',\n  2474470126: 'IFCMOTORCONNECTION',\n  2769231204: 'IFCVIRTUALELEMENT',\n  2814081492: 'IFCENGINE',\n  2906023776: 'IFCBEAMSTANDARDCASE',\n  2938176219: 'IFCBURNER',\n  2979338954: 'IFCBUILDINGELEMENTPART',\n  3024970846: 'IFCRAMP',\n  3026737570: 'IFCTUBEBUNDLE',\n  3027962421: 'IFCSLABSTANDARDCASE',\n  3040386961: 'IFCDISTRIBUTIONFLOWELEMENT',\n  3053780830: 'IFCSANITARYTERMINAL',\n  3079942009: 'IFCOPENINGSTANDARDCASE',\n  3087945054: 'IFCALARM',\n  3101698114: 'IFCSURFACEFEATURE',\n  3127900445: 'IFCSLABELEMENTEDCASE',\n  3132237377: 'IFCFLOWMOVINGDEVICE',\n  3171933400: 'IFCPLATE',\n  3221913625: 'IFCCOMMUNICATIONSAPPLIANCE',\n  3242481149: 'IFCDOORSTANDARDCASE',\n  3283111854: 'IFCRAMPFLIGHT',\n  3296154744: 'IFCCHIMNEY',\n  3304561284: 'IFCWINDOW',\n  3310460725: 'IFCELECTRICFLOWSTORAGEDEVICE',\n  3319311131: 'IFCHEATEXCHANGER',\n  3415622556: 'IFCFAN',\n  3420628829: 'IFCSOLARDEVICE',\n  3493046030: 'IFCGEOGRAPHICELEMENT',\n  3495092785: 'IFCCURTAINWALL',\n  3508470533: 'IFCFLOWTREATMENTDEVICE',\n  3512223829: 'IFCWALLSTANDARDCASE',\n  3518393246: 'IFCDUCTSEGMENT',\n  3571504051: 'IFCCOMPRESSOR',\n  3588315303: 'IFCOPENINGELEMENT',\n  3612865200: 'IFCPIPESEGMENT',\n  3640358203: 'IFCCOOLINGTOWER',\n  3651124850: 'IFCPROJECTIONELEMENT',\n  3694346114: 'IFCOUTLET',\n  3747195512: 'IFCEVAPORATIVECOOLER',\n  3758799889: 'IFCCABLECARRIERSEGMENT',\n  3824725483: 'IFCTENDON',\n  3825984169: 'IFCTRANSFORMER',\n  3902619387: 'IFCCHILLER',\n  4074379575: 'IFCDAMPER',\n  4086658281: 'IFCSENSOR',\n  4123344466: 'IFCELEMENTASSEMBLY',\n  4136498852: 'IFCCOOLEDBEAM',\n  4156078855: 'IFCWALLELEMENTEDCASE',\n  4175244083: 'IFCINTERCEPTOR',\n  4207607924: 'IFCVALVE',\n  4217484030: 'IFCCABLESEGMENT',\n  4237592921: 'IFCWASTETERMINAL',\n  4252922144: 'IFCSTAIRFLIGHT',\n  4278956645: 'IFCFLOWFITTING',\n  4288193352: 'IFCACTUATOR',\n  4292641817: 'IFCUNITARYEQUIPMENT',\n  3009204131: 'IFCGRID'\n};\n\nvar WebIfcPropertyManager = /*#__PURE__*/function (_BasePropertyManager) {\n  _inherits(WebIfcPropertyManager, _BasePropertyManager);\n\n  var _super2 = _createSuper(WebIfcPropertyManager);\n\n  function WebIfcPropertyManager() {\n    _classCallCheck(this, WebIfcPropertyManager);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(WebIfcPropertyManager, [{\n    key: \"getItemProperties\",\n    value: function () {\n      var _getItemProperties2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(modelID, id) {\n        var recursive,\n            _args22 = arguments;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                recursive = _args22.length > 2 && _args22[2] !== undefined ? _args22[2] : false;\n                return _context22.abrupt(\"return\", this.state.api.GetLine(modelID, id, recursive));\n\n              case 2:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function getItemProperties(_x35, _x36) {\n        return _getItemProperties2.apply(this, arguments);\n      }\n\n      return getItemProperties;\n    }()\n  }, {\n    key: \"getSpatialStructure\",\n    value: function () {\n      var _getSpatialStructure = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(modelID, includeProperties) {\n        var chunks, allLines, projectID, project;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                _context23.next = 2;\n                return this.getSpatialTreeChunks(modelID);\n\n              case 2:\n                chunks = _context23.sent;\n                _context23.next = 5;\n                return this.state.api.GetLineIDsWithType(modelID, IFCPROJECT);\n\n              case 5:\n                allLines = _context23.sent;\n                projectID = allLines.get(0);\n                project = WebIfcPropertyManager.newIfcProject(projectID);\n                _context23.next = 10;\n                return this.getSpatialNode(modelID, project, chunks, includeProperties);\n\n              case 10:\n                return _context23.abrupt(\"return\", project);\n\n              case 11:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function getSpatialStructure(_x37, _x38) {\n        return _getSpatialStructure.apply(this, arguments);\n      }\n\n      return getSpatialStructure;\n    }()\n  }, {\n    key: \"getAllItemsOfType\",\n    value: function () {\n      var _getAllItemsOfType = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(modelID, type, verbose) {\n        var items, lines, i, result, _i;\n\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                items = [];\n                _context24.next = 3;\n                return this.state.api.GetLineIDsWithType(modelID, type);\n\n              case 3:\n                lines = _context24.sent;\n\n                for (i = 0; i < lines.size(); i++) {\n                  items.push(lines.get(i));\n                }\n\n                if (verbose) {\n                  _context24.next = 7;\n                  break;\n                }\n\n                return _context24.abrupt(\"return\", items);\n\n              case 7:\n                result = [];\n                _i = 0;\n\n              case 9:\n                if (!(_i < items.length)) {\n                  _context24.next = 18;\n                  break;\n                }\n\n                _context24.t0 = result;\n                _context24.next = 13;\n                return this.state.api.GetLine(modelID, items[_i]);\n\n              case 13:\n                _context24.t1 = _context24.sent;\n\n                _context24.t0.push.call(_context24.t0, _context24.t1);\n\n              case 15:\n                _i++;\n                _context24.next = 9;\n                break;\n\n              case 18:\n                return _context24.abrupt(\"return\", result);\n\n              case 19:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function getAllItemsOfType(_x39, _x40, _x41) {\n        return _getAllItemsOfType.apply(this, arguments);\n      }\n\n      return getAllItemsOfType;\n    }()\n  }, {\n    key: \"getProperty\",\n    value: function () {\n      var _getProperty2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(modelID, elementID) {\n        var recursive,\n            propName,\n            propSetIds,\n            result,\n            i,\n            _args25 = arguments;\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                recursive = _args25.length > 2 && _args25[2] !== undefined ? _args25[2] : false;\n                propName = _args25.length > 3 ? _args25[3] : undefined;\n                _context25.next = 4;\n                return this.getAllRelatedItemsOfType(modelID, elementID, propName);\n\n              case 4:\n                propSetIds = _context25.sent;\n                result = [];\n                i = 0;\n\n              case 7:\n                if (!(i < propSetIds.length)) {\n                  _context25.next = 16;\n                  break;\n                }\n\n                _context25.t0 = result;\n                _context25.next = 11;\n                return this.state.api.GetLine(modelID, propSetIds[i], recursive);\n\n              case 11:\n                _context25.t1 = _context25.sent;\n\n                _context25.t0.push.call(_context25.t0, _context25.t1);\n\n              case 13:\n                i++;\n                _context25.next = 7;\n                break;\n\n              case 16:\n                return _context25.abrupt(\"return\", result);\n\n              case 17:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function getProperty(_x42, _x43) {\n        return _getProperty2.apply(this, arguments);\n      }\n\n      return getProperty;\n    }()\n  }, {\n    key: \"getNodeType\",\n    value: function getNodeType(modelID, id) {\n      var typeID = this.state.models[modelID].types[id];\n      return IfcElements[typeID];\n    }\n  }, {\n    key: \"getChunks\",\n    value: function () {\n      var _getChunks2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(modelID, chunks, propNames) {\n        var relation, i, rel;\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                _context26.next = 2;\n                return this.state.api.GetLineIDsWithType(modelID, propNames.name);\n\n              case 2:\n                relation = _context26.sent;\n                i = 0;\n\n              case 4:\n                if (!(i < relation.size())) {\n                  _context26.next = 12;\n                  break;\n                }\n\n                _context26.next = 7;\n                return this.state.api.GetLine(modelID, relation.get(i), false);\n\n              case 7:\n                rel = _context26.sent;\n                this.saveChunk(chunks, propNames, rel);\n\n              case 9:\n                i++;\n                _context26.next = 4;\n                break;\n\n              case 12:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n\n      function getChunks(_x44, _x45, _x46) {\n        return _getChunks2.apply(this, arguments);\n      }\n\n      return getChunks;\n    }()\n  }, {\n    key: \"getAllRelatedItemsOfType\",\n    value: function () {\n      var _getAllRelatedItemsOfType = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27(modelID, id, propNames) {\n        var lines, IDs, i, rel, isRelated;\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                _context27.next = 2;\n                return this.state.api.GetLineIDsWithType(modelID, propNames.name);\n\n              case 2:\n                lines = _context27.sent;\n                IDs = [];\n                i = 0;\n\n              case 5:\n                if (!(i < lines.size())) {\n                  _context27.next = 14;\n                  break;\n                }\n\n                _context27.next = 8;\n                return this.state.api.GetLine(modelID, lines.get(i));\n\n              case 8:\n                rel = _context27.sent;\n                isRelated = BasePropertyManager.isRelated(id, rel, propNames);\n                if (isRelated) this.getRelated(rel, propNames, IDs);\n\n              case 11:\n                i++;\n                _context27.next = 5;\n                break;\n\n              case 14:\n                return _context27.abrupt(\"return\", IDs);\n\n              case 15:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function getAllRelatedItemsOfType(_x47, _x48, _x49) {\n        return _getAllRelatedItemsOfType.apply(this, arguments);\n      }\n\n      return getAllRelatedItemsOfType;\n    }()\n  }]);\n\n  return WebIfcPropertyManager;\n}(BasePropertyManager);\n\nvar IfcTypesMap = {\n  3821786052: \"IFCACTIONREQUEST\",\n  2296667514: \"IFCACTOR\",\n  3630933823: \"IFCACTORROLE\",\n  4288193352: \"IFCACTUATOR\",\n  2874132201: \"IFCACTUATORTYPE\",\n  618182010: \"IFCADDRESS\",\n  1635779807: \"IFCADVANCEDBREP\",\n  2603310189: \"IFCADVANCEDBREPWITHVOIDS\",\n  3406155212: \"IFCADVANCEDFACE\",\n  1634111441: \"IFCAIRTERMINAL\",\n  177149247: \"IFCAIRTERMINALBOX\",\n  1411407467: \"IFCAIRTERMINALBOXTYPE\",\n  3352864051: \"IFCAIRTERMINALTYPE\",\n  2056796094: \"IFCAIRTOAIRHEATRECOVERY\",\n  1871374353: \"IFCAIRTOAIRHEATRECOVERYTYPE\",\n  3087945054: \"IFCALARM\",\n  3001207471: \"IFCALARMTYPE\",\n  325726236: \"IFCALIGNMENT\",\n  749761778: \"IFCALIGNMENT2DHORIZONTAL\",\n  3199563722: \"IFCALIGNMENT2DHORIZONTALSEGMENT\",\n  2483840362: \"IFCALIGNMENT2DSEGMENT\",\n  3379348081: \"IFCALIGNMENT2DVERSEGCIRCULARARC\",\n  3239324667: \"IFCALIGNMENT2DVERSEGLINE\",\n  4263986512: \"IFCALIGNMENT2DVERSEGPARABOLICARC\",\n  53199957: \"IFCALIGNMENT2DVERTICAL\",\n  2029264950: \"IFCALIGNMENT2DVERTICALSEGMENT\",\n  3512275521: \"IFCALIGNMENTCURVE\",\n  1674181508: \"IFCANNOTATION\",\n  669184980: \"IFCANNOTATIONFILLAREA\",\n  639542469: \"IFCAPPLICATION\",\n  411424972: \"IFCAPPLIEDVALUE\",\n  130549933: \"IFCAPPROVAL\",\n  3869604511: \"IFCAPPROVALRELATIONSHIP\",\n  3798115385: \"IFCARBITRARYCLOSEDPROFILEDEF\",\n  1310608509: \"IFCARBITRARYOPENPROFILEDEF\",\n  2705031697: \"IFCARBITRARYPROFILEDEFWITHVOIDS\",\n  3460190687: \"IFCASSET\",\n  3207858831: \"IFCASYMMETRICISHAPEPROFILEDEF\",\n  277319702: \"IFCAUDIOVISUALAPPLIANCE\",\n  1532957894: \"IFCAUDIOVISUALAPPLIANCETYPE\",\n  4261334040: \"IFCAXIS1PLACEMENT\",\n  3125803723: \"IFCAXIS2PLACEMENT2D\",\n  2740243338: \"IFCAXIS2PLACEMENT3D\",\n  1967976161: \"IFCBSPLINECURVE\",\n  2461110595: \"IFCBSPLINECURVEWITHKNOTS\",\n  2887950389: \"IFCBSPLINESURFACE\",\n  167062518: \"IFCBSPLINESURFACEWITHKNOTS\",\n  753842376: \"IFCBEAM\",\n  2906023776: \"IFCBEAMSTANDARDCASE\",\n  819618141: \"IFCBEAMTYPE\",\n  4196446775: \"IFCBEARING\",\n  3649138523: \"IFCBEARINGTYPE\",\n  616511568: \"IFCBLOBTEXTURE\",\n  1334484129: \"IFCBLOCK\",\n  32344328: \"IFCBOILER\",\n  231477066: \"IFCBOILERTYPE\",\n  3649129432: \"IFCBOOLEANCLIPPINGRESULT\",\n  2736907675: \"IFCBOOLEANRESULT\",\n  4037036970: \"IFCBOUNDARYCONDITION\",\n  1136057603: \"IFCBOUNDARYCURVE\",\n  1560379544: \"IFCBOUNDARYEDGECONDITION\",\n  3367102660: \"IFCBOUNDARYFACECONDITION\",\n  1387855156: \"IFCBOUNDARYNODECONDITION\",\n  2069777674: \"IFCBOUNDARYNODECONDITIONWARPING\",\n  1260505505: \"IFCBOUNDEDCURVE\",\n  4182860854: \"IFCBOUNDEDSURFACE\",\n  2581212453: \"IFCBOUNDINGBOX\",\n  2713105998: \"IFCBOXEDHALFSPACE\",\n  644574406: \"IFCBRIDGE\",\n  963979645: \"IFCBRIDGEPART\",\n  4031249490: \"IFCBUILDING\",\n  3299480353: \"IFCBUILDINGELEMENT\",\n  2979338954: \"IFCBUILDINGELEMENTPART\",\n  39481116: \"IFCBUILDINGELEMENTPARTTYPE\",\n  1095909175: \"IFCBUILDINGELEMENTPROXY\",\n  1909888760: \"IFCBUILDINGELEMENTPROXYTYPE\",\n  1950629157: \"IFCBUILDINGELEMENTTYPE\",\n  3124254112: \"IFCBUILDINGSTOREY\",\n  1177604601: \"IFCBUILDINGSYSTEM\",\n  2938176219: \"IFCBURNER\",\n  2188180465: \"IFCBURNERTYPE\",\n  2898889636: \"IFCCSHAPEPROFILEDEF\",\n  635142910: \"IFCCABLECARRIERFITTING\",\n  395041908: \"IFCCABLECARRIERFITTINGTYPE\",\n  3758799889: \"IFCCABLECARRIERSEGMENT\",\n  3293546465: \"IFCCABLECARRIERSEGMENTTYPE\",\n  1051757585: \"IFCCABLEFITTING\",\n  2674252688: \"IFCCABLEFITTINGTYPE\",\n  4217484030: \"IFCCABLESEGMENT\",\n  1285652485: \"IFCCABLESEGMENTTYPE\",\n  3999819293: \"IFCCAISSONFOUNDATION\",\n  3203706013: \"IFCCAISSONFOUNDATIONTYPE\",\n  1123145078: \"IFCCARTESIANPOINT\",\n  574549367: \"IFCCARTESIANPOINTLIST\",\n  1675464909: \"IFCCARTESIANPOINTLIST2D\",\n  2059837836: \"IFCCARTESIANPOINTLIST3D\",\n  59481748: \"IFCCARTESIANTRANSFORMATIONOPERATOR\",\n  3749851601: \"IFCCARTESIANTRANSFORMATIONOPERATOR2D\",\n  3486308946: \"IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM\",\n  3331915920: \"IFCCARTESIANTRANSFORMATIONOPERATOR3D\",\n  1416205885: \"IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM\",\n  3150382593: \"IFCCENTERLINEPROFILEDEF\",\n  3902619387: \"IFCCHILLER\",\n  2951183804: \"IFCCHILLERTYPE\",\n  3296154744: \"IFCCHIMNEY\",\n  2197970202: \"IFCCHIMNEYTYPE\",\n  2611217952: \"IFCCIRCLE\",\n  2937912522: \"IFCCIRCLEHOLLOWPROFILEDEF\",\n  1383045692: \"IFCCIRCLEPROFILEDEF\",\n  1062206242: \"IFCCIRCULARARCSEGMENT2D\",\n  1677625105: \"IFCCIVILELEMENT\",\n  3893394355: \"IFCCIVILELEMENTTYPE\",\n  747523909: \"IFCCLASSIFICATION\",\n  647927063: \"IFCCLASSIFICATIONREFERENCE\",\n  2205249479: \"IFCCLOSEDSHELL\",\n  639361253: \"IFCCOIL\",\n  2301859152: \"IFCCOILTYPE\",\n  776857604: \"IFCCOLOURRGB\",\n  3285139300: \"IFCCOLOURRGBLIST\",\n  3264961684: \"IFCCOLOURSPECIFICATION\",\n  843113511: \"IFCCOLUMN\",\n  905975707: \"IFCCOLUMNSTANDARDCASE\",\n  300633059: \"IFCCOLUMNTYPE\",\n  3221913625: \"IFCCOMMUNICATIONSAPPLIANCE\",\n  400855858: \"IFCCOMMUNICATIONSAPPLIANCETYPE\",\n  2542286263: \"IFCCOMPLEXPROPERTY\",\n  3875453745: \"IFCCOMPLEXPROPERTYTEMPLATE\",\n  3732776249: \"IFCCOMPOSITECURVE\",\n  15328376: \"IFCCOMPOSITECURVEONSURFACE\",\n  2485617015: \"IFCCOMPOSITECURVESEGMENT\",\n  1485152156: \"IFCCOMPOSITEPROFILEDEF\",\n  3571504051: \"IFCCOMPRESSOR\",\n  3850581409: \"IFCCOMPRESSORTYPE\",\n  2272882330: \"IFCCONDENSER\",\n  2816379211: \"IFCCONDENSERTYPE\",\n  2510884976: \"IFCCONIC\",\n  370225590: \"IFCCONNECTEDFACESET\",\n  1981873012: \"IFCCONNECTIONCURVEGEOMETRY\",\n  2859738748: \"IFCCONNECTIONGEOMETRY\",\n  45288368: \"IFCCONNECTIONPOINTECCENTRICITY\",\n  2614616156: \"IFCCONNECTIONPOINTGEOMETRY\",\n  2732653382: \"IFCCONNECTIONSURFACEGEOMETRY\",\n  775493141: \"IFCCONNECTIONVOLUMEGEOMETRY\",\n  1959218052: \"IFCCONSTRAINT\",\n  3898045240: \"IFCCONSTRUCTIONEQUIPMENTRESOURCE\",\n  2185764099: \"IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE\",\n  1060000209: \"IFCCONSTRUCTIONMATERIALRESOURCE\",\n  4105962743: \"IFCCONSTRUCTIONMATERIALRESOURCETYPE\",\n  488727124: \"IFCCONSTRUCTIONPRODUCTRESOURCE\",\n  1525564444: \"IFCCONSTRUCTIONPRODUCTRESOURCETYPE\",\n  2559216714: \"IFCCONSTRUCTIONRESOURCE\",\n  2574617495: \"IFCCONSTRUCTIONRESOURCETYPE\",\n  3419103109: \"IFCCONTEXT\",\n  3050246964: \"IFCCONTEXTDEPENDENTUNIT\",\n  3293443760: \"IFCCONTROL\",\n  25142252: \"IFCCONTROLLER\",\n  578613899: \"IFCCONTROLLERTYPE\",\n  2889183280: \"IFCCONVERSIONBASEDUNIT\",\n  2713554722: \"IFCCONVERSIONBASEDUNITWITHOFFSET\",\n  4136498852: \"IFCCOOLEDBEAM\",\n  335055490: \"IFCCOOLEDBEAMTYPE\",\n  3640358203: \"IFCCOOLINGTOWER\",\n  2954562838: \"IFCCOOLINGTOWERTYPE\",\n  1785450214: \"IFCCOORDINATEOPERATION\",\n  1466758467: \"IFCCOORDINATEREFERENCESYSTEM\",\n  3895139033: \"IFCCOSTITEM\",\n  1419761937: \"IFCCOSTSCHEDULE\",\n  602808272: \"IFCCOSTVALUE\",\n  1973544240: \"IFCCOVERING\",\n  1916426348: \"IFCCOVERINGTYPE\",\n  3295246426: \"IFCCREWRESOURCE\",\n  1815067380: \"IFCCREWRESOURCETYPE\",\n  2506170314: \"IFCCSGPRIMITIVE3D\",\n  2147822146: \"IFCCSGSOLID\",\n  539742890: \"IFCCURRENCYRELATIONSHIP\",\n  3495092785: \"IFCCURTAINWALL\",\n  1457835157: \"IFCCURTAINWALLTYPE\",\n  2601014836: \"IFCCURVE\",\n  2827736869: \"IFCCURVEBOUNDEDPLANE\",\n  2629017746: \"IFCCURVEBOUNDEDSURFACE\",\n  1186437898: \"IFCCURVESEGMENT2D\",\n  3800577675: \"IFCCURVESTYLE\",\n  1105321065: \"IFCCURVESTYLEFONT\",\n  2367409068: \"IFCCURVESTYLEFONTANDSCALING\",\n  3510044353: \"IFCCURVESTYLEFONTPATTERN\",\n  1213902940: \"IFCCYLINDRICALSURFACE\",\n  4074379575: \"IFCDAMPER\",\n  3961806047: \"IFCDAMPERTYPE\",\n  3426335179: \"IFCDEEPFOUNDATION\",\n  1306400036: \"IFCDEEPFOUNDATIONTYPE\",\n  3632507154: \"IFCDERIVEDPROFILEDEF\",\n  1765591967: \"IFCDERIVEDUNIT\",\n  1045800335: \"IFCDERIVEDUNITELEMENT\",\n  2949456006: \"IFCDIMENSIONALEXPONENTS\",\n  32440307: \"IFCDIRECTION\",\n  1335981549: \"IFCDISCRETEACCESSORY\",\n  2635815018: \"IFCDISCRETEACCESSORYTYPE\",\n  1945343521: \"IFCDISTANCEEXPRESSION\",\n  1052013943: \"IFCDISTRIBUTIONCHAMBERELEMENT\",\n  1599208980: \"IFCDISTRIBUTIONCHAMBERELEMENTTYPE\",\n  562808652: \"IFCDISTRIBUTIONCIRCUIT\",\n  1062813311: \"IFCDISTRIBUTIONCONTROLELEMENT\",\n  2063403501: \"IFCDISTRIBUTIONCONTROLELEMENTTYPE\",\n  1945004755: \"IFCDISTRIBUTIONELEMENT\",\n  3256556792: \"IFCDISTRIBUTIONELEMENTTYPE\",\n  3040386961: \"IFCDISTRIBUTIONFLOWELEMENT\",\n  3849074793: \"IFCDISTRIBUTIONFLOWELEMENTTYPE\",\n  3041715199: \"IFCDISTRIBUTIONPORT\",\n  3205830791: \"IFCDISTRIBUTIONSYSTEM\",\n  1154170062: \"IFCDOCUMENTINFORMATION\",\n  770865208: \"IFCDOCUMENTINFORMATIONRELATIONSHIP\",\n  3732053477: \"IFCDOCUMENTREFERENCE\",\n  395920057: \"IFCDOOR\",\n  2963535650: \"IFCDOORLININGPROPERTIES\",\n  1714330368: \"IFCDOORPANELPROPERTIES\",\n  3242481149: \"IFCDOORSTANDARDCASE\",\n  526551008: \"IFCDOORSTYLE\",\n  2323601079: \"IFCDOORTYPE\",\n  445594917: \"IFCDRAUGHTINGPREDEFINEDCOLOUR\",\n  4006246654: \"IFCDRAUGHTINGPREDEFINEDCURVEFONT\",\n  342316401: \"IFCDUCTFITTING\",\n  869906466: \"IFCDUCTFITTINGTYPE\",\n  3518393246: \"IFCDUCTSEGMENT\",\n  3760055223: \"IFCDUCTSEGMENTTYPE\",\n  1360408905: \"IFCDUCTSILENCER\",\n  2030761528: \"IFCDUCTSILENCERTYPE\",\n  3900360178: \"IFCEDGE\",\n  476780140: \"IFCEDGECURVE\",\n  1472233963: \"IFCEDGELOOP\",\n  1904799276: \"IFCELECTRICAPPLIANCE\",\n  663422040: \"IFCELECTRICAPPLIANCETYPE\",\n  862014818: \"IFCELECTRICDISTRIBUTIONBOARD\",\n  2417008758: \"IFCELECTRICDISTRIBUTIONBOARDTYPE\",\n  3310460725: \"IFCELECTRICFLOWSTORAGEDEVICE\",\n  3277789161: \"IFCELECTRICFLOWSTORAGEDEVICETYPE\",\n  264262732: \"IFCELECTRICGENERATOR\",\n  1534661035: \"IFCELECTRICGENERATORTYPE\",\n  402227799: \"IFCELECTRICMOTOR\",\n  1217240411: \"IFCELECTRICMOTORTYPE\",\n  1003880860: \"IFCELECTRICTIMECONTROL\",\n  712377611: \"IFCELECTRICTIMECONTROLTYPE\",\n  1758889154: \"IFCELEMENT\",\n  4123344466: \"IFCELEMENTASSEMBLY\",\n  2397081782: \"IFCELEMENTASSEMBLYTYPE\",\n  1623761950: \"IFCELEMENTCOMPONENT\",\n  2590856083: \"IFCELEMENTCOMPONENTTYPE\",\n  1883228015: \"IFCELEMENTQUANTITY\",\n  339256511: \"IFCELEMENTTYPE\",\n  2777663545: \"IFCELEMENTARYSURFACE\",\n  1704287377: \"IFCELLIPSE\",\n  2835456948: \"IFCELLIPSEPROFILEDEF\",\n  1658829314: \"IFCENERGYCONVERSIONDEVICE\",\n  2107101300: \"IFCENERGYCONVERSIONDEVICETYPE\",\n  2814081492: \"IFCENGINE\",\n  132023988: \"IFCENGINETYPE\",\n  3747195512: \"IFCEVAPORATIVECOOLER\",\n  3174744832: \"IFCEVAPORATIVECOOLERTYPE\",\n  484807127: \"IFCEVAPORATOR\",\n  3390157468: \"IFCEVAPORATORTYPE\",\n  4148101412: \"IFCEVENT\",\n  211053100: \"IFCEVENTTIME\",\n  4024345920: \"IFCEVENTTYPE\",\n  297599258: \"IFCEXTENDEDPROPERTIES\",\n  4294318154: \"IFCEXTERNALINFORMATION\",\n  3200245327: \"IFCEXTERNALREFERENCE\",\n  1437805879: \"IFCEXTERNALREFERENCERELATIONSHIP\",\n  1209101575: \"IFCEXTERNALSPATIALELEMENT\",\n  2853485674: \"IFCEXTERNALSPATIALSTRUCTUREELEMENT\",\n  2242383968: \"IFCEXTERNALLYDEFINEDHATCHSTYLE\",\n  1040185647: \"IFCEXTERNALLYDEFINEDSURFACESTYLE\",\n  3548104201: \"IFCEXTERNALLYDEFINEDTEXTFONT\",\n  477187591: \"IFCEXTRUDEDAREASOLID\",\n  2804161546: \"IFCEXTRUDEDAREASOLIDTAPERED\",\n  2556980723: \"IFCFACE\",\n  2047409740: \"IFCFACEBASEDSURFACEMODEL\",\n  1809719519: \"IFCFACEBOUND\",\n  803316827: \"IFCFACEOUTERBOUND\",\n  3008276851: \"IFCFACESURFACE\",\n  807026263: \"IFCFACETEDBREP\",\n  3737207727: \"IFCFACETEDBREPWITHVOIDS\",\n  24185140: \"IFCFACILITY\",\n  1310830890: \"IFCFACILITYPART\",\n  4219587988: \"IFCFAILURECONNECTIONCONDITION\",\n  3415622556: \"IFCFAN\",\n  346874300: \"IFCFANTYPE\",\n  647756555: \"IFCFASTENER\",\n  2489546625: \"IFCFASTENERTYPE\",\n  2827207264: \"IFCFEATUREELEMENT\",\n  2143335405: \"IFCFEATUREELEMENTADDITION\",\n  1287392070: \"IFCFEATUREELEMENTSUBTRACTION\",\n  738692330: \"IFCFILLAREASTYLE\",\n  374418227: \"IFCFILLAREASTYLEHATCHING\",\n  315944413: \"IFCFILLAREASTYLETILES\",\n  819412036: \"IFCFILTER\",\n  1810631287: \"IFCFILTERTYPE\",\n  1426591983: \"IFCFIRESUPPRESSIONTERMINAL\",\n  4222183408: \"IFCFIRESUPPRESSIONTERMINALTYPE\",\n  2652556860: \"IFCFIXEDREFERENCESWEPTAREASOLID\",\n  2058353004: \"IFCFLOWCONTROLLER\",\n  3907093117: \"IFCFLOWCONTROLLERTYPE\",\n  4278956645: \"IFCFLOWFITTING\",\n  3198132628: \"IFCFLOWFITTINGTYPE\",\n  182646315: \"IFCFLOWINSTRUMENT\",\n  4037862832: \"IFCFLOWINSTRUMENTTYPE\",\n  2188021234: \"IFCFLOWMETER\",\n  3815607619: \"IFCFLOWMETERTYPE\",\n  3132237377: \"IFCFLOWMOVINGDEVICE\",\n  1482959167: \"IFCFLOWMOVINGDEVICETYPE\",\n  987401354: \"IFCFLOWSEGMENT\",\n  1834744321: \"IFCFLOWSEGMENTTYPE\",\n  707683696: \"IFCFLOWSTORAGEDEVICE\",\n  1339347760: \"IFCFLOWSTORAGEDEVICETYPE\",\n  2223149337: \"IFCFLOWTERMINAL\",\n  2297155007: \"IFCFLOWTERMINALTYPE\",\n  3508470533: \"IFCFLOWTREATMENTDEVICE\",\n  3009222698: \"IFCFLOWTREATMENTDEVICETYPE\",\n  900683007: \"IFCFOOTING\",\n  1893162501: \"IFCFOOTINGTYPE\",\n  263784265: \"IFCFURNISHINGELEMENT\",\n  4238390223: \"IFCFURNISHINGELEMENTTYPE\",\n  1509553395: \"IFCFURNITURE\",\n  1268542332: \"IFCFURNITURETYPE\",\n  3493046030: \"IFCGEOGRAPHICELEMENT\",\n  4095422895: \"IFCGEOGRAPHICELEMENTTYPE\",\n  987898635: \"IFCGEOMETRICCURVESET\",\n  3448662350: \"IFCGEOMETRICREPRESENTATIONCONTEXT\",\n  2453401579: \"IFCGEOMETRICREPRESENTATIONITEM\",\n  4142052618: \"IFCGEOMETRICREPRESENTATIONSUBCONTEXT\",\n  3590301190: \"IFCGEOMETRICSET\",\n  3009204131: \"IFCGRID\",\n  852622518: \"IFCGRIDAXIS\",\n  178086475: \"IFCGRIDPLACEMENT\",\n  2706460486: \"IFCGROUP\",\n  812098782: \"IFCHALFSPACESOLID\",\n  3319311131: \"IFCHEATEXCHANGER\",\n  1251058090: \"IFCHEATEXCHANGERTYPE\",\n  2068733104: \"IFCHUMIDIFIER\",\n  1806887404: \"IFCHUMIDIFIERTYPE\",\n  1484403080: \"IFCISHAPEPROFILEDEF\",\n  3905492369: \"IFCIMAGETEXTURE\",\n  3570813810: \"IFCINDEXEDCOLOURMAP\",\n  2571569899: \"IFCINDEXEDPOLYCURVE\",\n  178912537: \"IFCINDEXEDPOLYGONALFACE\",\n  2294589976: \"IFCINDEXEDPOLYGONALFACEWITHVOIDS\",\n  1437953363: \"IFCINDEXEDTEXTUREMAP\",\n  2133299955: \"IFCINDEXEDTRIANGLETEXTUREMAP\",\n  4175244083: \"IFCINTERCEPTOR\",\n  3946677679: \"IFCINTERCEPTORTYPE\",\n  3113134337: \"IFCINTERSECTIONCURVE\",\n  2391368822: \"IFCINVENTORY\",\n  3741457305: \"IFCIRREGULARTIMESERIES\",\n  3020489413: \"IFCIRREGULARTIMESERIESVALUE\",\n  2176052936: \"IFCJUNCTIONBOX\",\n  4288270099: \"IFCJUNCTIONBOXTYPE\",\n  572779678: \"IFCLSHAPEPROFILEDEF\",\n  3827777499: \"IFCLABORRESOURCE\",\n  428585644: \"IFCLABORRESOURCETYPE\",\n  1585845231: \"IFCLAGTIME\",\n  76236018: \"IFCLAMP\",\n  1051575348: \"IFCLAMPTYPE\",\n  2655187982: \"IFCLIBRARYINFORMATION\",\n  3452421091: \"IFCLIBRARYREFERENCE\",\n  4162380809: \"IFCLIGHTDISTRIBUTIONDATA\",\n  629592764: \"IFCLIGHTFIXTURE\",\n  1161773419: \"IFCLIGHTFIXTURETYPE\",\n  1566485204: \"IFCLIGHTINTENSITYDISTRIBUTION\",\n  1402838566: \"IFCLIGHTSOURCE\",\n  125510826: \"IFCLIGHTSOURCEAMBIENT\",\n  2604431987: \"IFCLIGHTSOURCEDIRECTIONAL\",\n  4266656042: \"IFCLIGHTSOURCEGONIOMETRIC\",\n  1520743889: \"IFCLIGHTSOURCEPOSITIONAL\",\n  3422422726: \"IFCLIGHTSOURCESPOT\",\n  1281925730: \"IFCLINE\",\n  3092502836: \"IFCLINESEGMENT2D\",\n  388784114: \"IFCLINEARPLACEMENT\",\n  1154579445: \"IFCLINEARPOSITIONINGELEMENT\",\n  2624227202: \"IFCLOCALPLACEMENT\",\n  1008929658: \"IFCLOOP\",\n  1425443689: \"IFCMANIFOLDSOLIDBREP\",\n  3057273783: \"IFCMAPCONVERSION\",\n  2347385850: \"IFCMAPPEDITEM\",\n  1838606355: \"IFCMATERIAL\",\n  1847130766: \"IFCMATERIALCLASSIFICATIONRELATIONSHIP\",\n  3708119000: \"IFCMATERIALCONSTITUENT\",\n  2852063980: \"IFCMATERIALCONSTITUENTSET\",\n  760658860: \"IFCMATERIALDEFINITION\",\n  2022407955: \"IFCMATERIALDEFINITIONREPRESENTATION\",\n  248100487: \"IFCMATERIALLAYER\",\n  3303938423: \"IFCMATERIALLAYERSET\",\n  1303795690: \"IFCMATERIALLAYERSETUSAGE\",\n  1847252529: \"IFCMATERIALLAYERWITHOFFSETS\",\n  2199411900: \"IFCMATERIALLIST\",\n  2235152071: \"IFCMATERIALPROFILE\",\n  164193824: \"IFCMATERIALPROFILESET\",\n  3079605661: \"IFCMATERIALPROFILESETUSAGE\",\n  3404854881: \"IFCMATERIALPROFILESETUSAGETAPERING\",\n  552965576: \"IFCMATERIALPROFILEWITHOFFSETS\",\n  3265635763: \"IFCMATERIALPROPERTIES\",\n  853536259: \"IFCMATERIALRELATIONSHIP\",\n  1507914824: \"IFCMATERIALUSAGEDEFINITION\",\n  2597039031: \"IFCMEASUREWITHUNIT\",\n  377706215: \"IFCMECHANICALFASTENER\",\n  2108223431: \"IFCMECHANICALFASTENERTYPE\",\n  1437502449: \"IFCMEDICALDEVICE\",\n  1114901282: \"IFCMEDICALDEVICETYPE\",\n  1073191201: \"IFCMEMBER\",\n  1911478936: \"IFCMEMBERSTANDARDCASE\",\n  3181161470: \"IFCMEMBERTYPE\",\n  3368373690: \"IFCMETRIC\",\n  2998442950: \"IFCMIRROREDPROFILEDEF\",\n  2706619895: \"IFCMONETARYUNIT\",\n  2474470126: \"IFCMOTORCONNECTION\",\n  977012517: \"IFCMOTORCONNECTIONTYPE\",\n  1918398963: \"IFCNAMEDUNIT\",\n  3888040117: \"IFCOBJECT\",\n  219451334: \"IFCOBJECTDEFINITION\",\n  3701648758: \"IFCOBJECTPLACEMENT\",\n  2251480897: \"IFCOBJECTIVE\",\n  4143007308: \"IFCOCCUPANT\",\n  590820931: \"IFCOFFSETCURVE\",\n  3388369263: \"IFCOFFSETCURVE2D\",\n  3505215534: \"IFCOFFSETCURVE3D\",\n  2485787929: \"IFCOFFSETCURVEBYDISTANCES\",\n  2665983363: \"IFCOPENSHELL\",\n  3588315303: \"IFCOPENINGELEMENT\",\n  3079942009: \"IFCOPENINGSTANDARDCASE\",\n  4251960020: \"IFCORGANIZATION\",\n  1411181986: \"IFCORGANIZATIONRELATIONSHIP\",\n  643959842: \"IFCORIENTATIONEXPRESSION\",\n  1029017970: \"IFCORIENTEDEDGE\",\n  144952367: \"IFCOUTERBOUNDARYCURVE\",\n  3694346114: \"IFCOUTLET\",\n  2837617999: \"IFCOUTLETTYPE\",\n  1207048766: \"IFCOWNERHISTORY\",\n  2529465313: \"IFCPARAMETERIZEDPROFILEDEF\",\n  2519244187: \"IFCPATH\",\n  1682466193: \"IFCPCURVE\",\n  2382730787: \"IFCPERFORMANCEHISTORY\",\n  3566463478: \"IFCPERMEABLECOVERINGPROPERTIES\",\n  3327091369: \"IFCPERMIT\",\n  2077209135: \"IFCPERSON\",\n  101040310: \"IFCPERSONANDORGANIZATION\",\n  3021840470: \"IFCPHYSICALCOMPLEXQUANTITY\",\n  2483315170: \"IFCPHYSICALQUANTITY\",\n  2226359599: \"IFCPHYSICALSIMPLEQUANTITY\",\n  1687234759: \"IFCPILE\",\n  1158309216: \"IFCPILETYPE\",\n  310824031: \"IFCPIPEFITTING\",\n  804291784: \"IFCPIPEFITTINGTYPE\",\n  3612865200: \"IFCPIPESEGMENT\",\n  4231323485: \"IFCPIPESEGMENTTYPE\",\n  597895409: \"IFCPIXELTEXTURE\",\n  2004835150: \"IFCPLACEMENT\",\n  603570806: \"IFCPLANARBOX\",\n  1663979128: \"IFCPLANAREXTENT\",\n  220341763: \"IFCPLANE\",\n  3171933400: \"IFCPLATE\",\n  1156407060: \"IFCPLATESTANDARDCASE\",\n  4017108033: \"IFCPLATETYPE\",\n  2067069095: \"IFCPOINT\",\n  4022376103: \"IFCPOINTONCURVE\",\n  1423911732: \"IFCPOINTONSURFACE\",\n  2924175390: \"IFCPOLYLOOP\",\n  2775532180: \"IFCPOLYGONALBOUNDEDHALFSPACE\",\n  2839578677: \"IFCPOLYGONALFACESET\",\n  3724593414: \"IFCPOLYLINE\",\n  3740093272: \"IFCPORT\",\n  1946335990: \"IFCPOSITIONINGELEMENT\",\n  3355820592: \"IFCPOSTALADDRESS\",\n  759155922: \"IFCPREDEFINEDCOLOUR\",\n  2559016684: \"IFCPREDEFINEDCURVEFONT\",\n  3727388367: \"IFCPREDEFINEDITEM\",\n  3778827333: \"IFCPREDEFINEDPROPERTIES\",\n  3967405729: \"IFCPREDEFINEDPROPERTYSET\",\n  1775413392: \"IFCPREDEFINEDTEXTFONT\",\n  677532197: \"IFCPRESENTATIONITEM\",\n  2022622350: \"IFCPRESENTATIONLAYERASSIGNMENT\",\n  1304840413: \"IFCPRESENTATIONLAYERWITHSTYLE\",\n  3119450353: \"IFCPRESENTATIONSTYLE\",\n  2417041796: \"IFCPRESENTATIONSTYLEASSIGNMENT\",\n  2744685151: \"IFCPROCEDURE\",\n  569719735: \"IFCPROCEDURETYPE\",\n  2945172077: \"IFCPROCESS\",\n  4208778838: \"IFCPRODUCT\",\n  673634403: \"IFCPRODUCTDEFINITIONSHAPE\",\n  2095639259: \"IFCPRODUCTREPRESENTATION\",\n  3958567839: \"IFCPROFILEDEF\",\n  2802850158: \"IFCPROFILEPROPERTIES\",\n  103090709: \"IFCPROJECT\",\n  653396225: \"IFCPROJECTLIBRARY\",\n  2904328755: \"IFCPROJECTORDER\",\n  3843373140: \"IFCPROJECTEDCRS\",\n  3651124850: \"IFCPROJECTIONELEMENT\",\n  2598011224: \"IFCPROPERTY\",\n  986844984: \"IFCPROPERTYABSTRACTION\",\n  871118103: \"IFCPROPERTYBOUNDEDVALUE\",\n  1680319473: \"IFCPROPERTYDEFINITION\",\n  148025276: \"IFCPROPERTYDEPENDENCYRELATIONSHIP\",\n  4166981789: \"IFCPROPERTYENUMERATEDVALUE\",\n  3710013099: \"IFCPROPERTYENUMERATION\",\n  2752243245: \"IFCPROPERTYLISTVALUE\",\n  941946838: \"IFCPROPERTYREFERENCEVALUE\",\n  1451395588: \"IFCPROPERTYSET\",\n  3357820518: \"IFCPROPERTYSETDEFINITION\",\n  492091185: \"IFCPROPERTYSETTEMPLATE\",\n  3650150729: \"IFCPROPERTYSINGLEVALUE\",\n  110355661: \"IFCPROPERTYTABLEVALUE\",\n  3521284610: \"IFCPROPERTYTEMPLATE\",\n  1482703590: \"IFCPROPERTYTEMPLATEDEFINITION\",\n  738039164: \"IFCPROTECTIVEDEVICE\",\n  2295281155: \"IFCPROTECTIVEDEVICETRIPPINGUNIT\",\n  655969474: \"IFCPROTECTIVEDEVICETRIPPINGUNITTYPE\",\n  1842657554: \"IFCPROTECTIVEDEVICETYPE\",\n  3219374653: \"IFCPROXY\",\n  90941305: \"IFCPUMP\",\n  2250791053: \"IFCPUMPTYPE\",\n  2044713172: \"IFCQUANTITYAREA\",\n  2093928680: \"IFCQUANTITYCOUNT\",\n  931644368: \"IFCQUANTITYLENGTH\",\n  2090586900: \"IFCQUANTITYSET\",\n  3252649465: \"IFCQUANTITYTIME\",\n  2405470396: \"IFCQUANTITYVOLUME\",\n  825690147: \"IFCQUANTITYWEIGHT\",\n  2262370178: \"IFCRAILING\",\n  2893384427: \"IFCRAILINGTYPE\",\n  3024970846: \"IFCRAMP\",\n  3283111854: \"IFCRAMPFLIGHT\",\n  2324767716: \"IFCRAMPFLIGHTTYPE\",\n  1469900589: \"IFCRAMPTYPE\",\n  1232101972: \"IFCRATIONALBSPLINECURVEWITHKNOTS\",\n  683857671: \"IFCRATIONALBSPLINESURFACEWITHKNOTS\",\n  2770003689: \"IFCRECTANGLEHOLLOWPROFILEDEF\",\n  3615266464: \"IFCRECTANGLEPROFILEDEF\",\n  2798486643: \"IFCRECTANGULARPYRAMID\",\n  3454111270: \"IFCRECTANGULARTRIMMEDSURFACE\",\n  3915482550: \"IFCRECURRENCEPATTERN\",\n  2433181523: \"IFCREFERENCE\",\n  4021432810: \"IFCREFERENT\",\n  3413951693: \"IFCREGULARTIMESERIES\",\n  1580146022: \"IFCREINFORCEMENTBARPROPERTIES\",\n  3765753017: \"IFCREINFORCEMENTDEFINITIONPROPERTIES\",\n  979691226: \"IFCREINFORCINGBAR\",\n  2572171363: \"IFCREINFORCINGBARTYPE\",\n  3027567501: \"IFCREINFORCINGELEMENT\",\n  964333572: \"IFCREINFORCINGELEMENTTYPE\",\n  2320036040: \"IFCREINFORCINGMESH\",\n  2310774935: \"IFCREINFORCINGMESHTYPE\",\n  160246688: \"IFCRELAGGREGATES\",\n  3939117080: \"IFCRELASSIGNS\",\n  1683148259: \"IFCRELASSIGNSTOACTOR\",\n  2495723537: \"IFCRELASSIGNSTOCONTROL\",\n  1307041759: \"IFCRELASSIGNSTOGROUP\",\n  1027710054: \"IFCRELASSIGNSTOGROUPBYFACTOR\",\n  4278684876: \"IFCRELASSIGNSTOPROCESS\",\n  2857406711: \"IFCRELASSIGNSTOPRODUCT\",\n  205026976: \"IFCRELASSIGNSTORESOURCE\",\n  1865459582: \"IFCRELASSOCIATES\",\n  4095574036: \"IFCRELASSOCIATESAPPROVAL\",\n  919958153: \"IFCRELASSOCIATESCLASSIFICATION\",\n  2728634034: \"IFCRELASSOCIATESCONSTRAINT\",\n  982818633: \"IFCRELASSOCIATESDOCUMENT\",\n  3840914261: \"IFCRELASSOCIATESLIBRARY\",\n  2655215786: \"IFCRELASSOCIATESMATERIAL\",\n  826625072: \"IFCRELCONNECTS\",\n  1204542856: \"IFCRELCONNECTSELEMENTS\",\n  3945020480: \"IFCRELCONNECTSPATHELEMENTS\",\n  4201705270: \"IFCRELCONNECTSPORTTOELEMENT\",\n  3190031847: \"IFCRELCONNECTSPORTS\",\n  2127690289: \"IFCRELCONNECTSSTRUCTURALACTIVITY\",\n  1638771189: \"IFCRELCONNECTSSTRUCTURALMEMBER\",\n  504942748: \"IFCRELCONNECTSWITHECCENTRICITY\",\n  3678494232: \"IFCRELCONNECTSWITHREALIZINGELEMENTS\",\n  3242617779: \"IFCRELCONTAINEDINSPATIALSTRUCTURE\",\n  886880790: \"IFCRELCOVERSBLDGELEMENTS\",\n  2802773753: \"IFCRELCOVERSSPACES\",\n  2565941209: \"IFCRELDECLARES\",\n  2551354335: \"IFCRELDECOMPOSES\",\n  693640335: \"IFCRELDEFINES\",\n  1462361463: \"IFCRELDEFINESBYOBJECT\",\n  4186316022: \"IFCRELDEFINESBYPROPERTIES\",\n  307848117: \"IFCRELDEFINESBYTEMPLATE\",\n  781010003: \"IFCRELDEFINESBYTYPE\",\n  3940055652: \"IFCRELFILLSELEMENT\",\n  279856033: \"IFCRELFLOWCONTROLELEMENTS\",\n  427948657: \"IFCRELINTERFERESELEMENTS\",\n  3268803585: \"IFCRELNESTS\",\n  1441486842: \"IFCRELPOSITIONS\",\n  750771296: \"IFCRELPROJECTSELEMENT\",\n  1245217292: \"IFCRELREFERENCEDINSPATIALSTRUCTURE\",\n  4122056220: \"IFCRELSEQUENCE\",\n  366585022: \"IFCRELSERVICESBUILDINGS\",\n  3451746338: \"IFCRELSPACEBOUNDARY\",\n  3523091289: \"IFCRELSPACEBOUNDARY1STLEVEL\",\n  1521410863: \"IFCRELSPACEBOUNDARY2NDLEVEL\",\n  1401173127: \"IFCRELVOIDSELEMENT\",\n  478536968: \"IFCRELATIONSHIP\",\n  816062949: \"IFCREPARAMETRISEDCOMPOSITECURVESEGMENT\",\n  1076942058: \"IFCREPRESENTATION\",\n  3377609919: \"IFCREPRESENTATIONCONTEXT\",\n  3008791417: \"IFCREPRESENTATIONITEM\",\n  1660063152: \"IFCREPRESENTATIONMAP\",\n  2914609552: \"IFCRESOURCE\",\n  2943643501: \"IFCRESOURCEAPPROVALRELATIONSHIP\",\n  1608871552: \"IFCRESOURCECONSTRAINTRELATIONSHIP\",\n  2439245199: \"IFCRESOURCELEVELRELATIONSHIP\",\n  1042787934: \"IFCRESOURCETIME\",\n  1856042241: \"IFCREVOLVEDAREASOLID\",\n  3243963512: \"IFCREVOLVEDAREASOLIDTAPERED\",\n  4158566097: \"IFCRIGHTCIRCULARCONE\",\n  3626867408: \"IFCRIGHTCIRCULARCYLINDER\",\n  2016517767: \"IFCROOF\",\n  2781568857: \"IFCROOFTYPE\",\n  2341007311: \"IFCROOT\",\n  2778083089: \"IFCROUNDEDRECTANGLEPROFILEDEF\",\n  448429030: \"IFCSIUNIT\",\n  3053780830: \"IFCSANITARYTERMINAL\",\n  1768891740: \"IFCSANITARYTERMINALTYPE\",\n  1054537805: \"IFCSCHEDULINGTIME\",\n  2157484638: \"IFCSEAMCURVE\",\n  2042790032: \"IFCSECTIONPROPERTIES\",\n  4165799628: \"IFCSECTIONREINFORCEMENTPROPERTIES\",\n  1862484736: \"IFCSECTIONEDSOLID\",\n  1290935644: \"IFCSECTIONEDSOLIDHORIZONTAL\",\n  1509187699: \"IFCSECTIONEDSPINE\",\n  4086658281: \"IFCSENSOR\",\n  1783015770: \"IFCSENSORTYPE\",\n  1329646415: \"IFCSHADINGDEVICE\",\n  4074543187: \"IFCSHADINGDEVICETYPE\",\n  867548509: \"IFCSHAPEASPECT\",\n  3982875396: \"IFCSHAPEMODEL\",\n  4240577450: \"IFCSHAPEREPRESENTATION\",\n  4124623270: \"IFCSHELLBASEDSURFACEMODEL\",\n  3692461612: \"IFCSIMPLEPROPERTY\",\n  3663146110: \"IFCSIMPLEPROPERTYTEMPLATE\",\n  4097777520: \"IFCSITE\",\n  1529196076: \"IFCSLAB\",\n  3127900445: \"IFCSLABELEMENTEDCASE\",\n  3027962421: \"IFCSLABSTANDARDCASE\",\n  2533589738: \"IFCSLABTYPE\",\n  2609359061: \"IFCSLIPPAGECONNECTIONCONDITION\",\n  3420628829: \"IFCSOLARDEVICE\",\n  1072016465: \"IFCSOLARDEVICETYPE\",\n  723233188: \"IFCSOLIDMODEL\",\n  3856911033: \"IFCSPACE\",\n  1999602285: \"IFCSPACEHEATER\",\n  1305183839: \"IFCSPACEHEATERTYPE\",\n  3812236995: \"IFCSPACETYPE\",\n  1412071761: \"IFCSPATIALELEMENT\",\n  710998568: \"IFCSPATIALELEMENTTYPE\",\n  2706606064: \"IFCSPATIALSTRUCTUREELEMENT\",\n  3893378262: \"IFCSPATIALSTRUCTUREELEMENTTYPE\",\n  463610769: \"IFCSPATIALZONE\",\n  2481509218: \"IFCSPATIALZONETYPE\",\n  451544542: \"IFCSPHERE\",\n  4015995234: \"IFCSPHERICALSURFACE\",\n  1404847402: \"IFCSTACKTERMINAL\",\n  3112655638: \"IFCSTACKTERMINALTYPE\",\n  331165859: \"IFCSTAIR\",\n  4252922144: \"IFCSTAIRFLIGHT\",\n  1039846685: \"IFCSTAIRFLIGHTTYPE\",\n  338393293: \"IFCSTAIRTYPE\",\n  682877961: \"IFCSTRUCTURALACTION\",\n  3544373492: \"IFCSTRUCTURALACTIVITY\",\n  2515109513: \"IFCSTRUCTURALANALYSISMODEL\",\n  1179482911: \"IFCSTRUCTURALCONNECTION\",\n  2273995522: \"IFCSTRUCTURALCONNECTIONCONDITION\",\n  1004757350: \"IFCSTRUCTURALCURVEACTION\",\n  4243806635: \"IFCSTRUCTURALCURVECONNECTION\",\n  214636428: \"IFCSTRUCTURALCURVEMEMBER\",\n  2445595289: \"IFCSTRUCTURALCURVEMEMBERVARYING\",\n  2757150158: \"IFCSTRUCTURALCURVEREACTION\",\n  3136571912: \"IFCSTRUCTURALITEM\",\n  1807405624: \"IFCSTRUCTURALLINEARACTION\",\n  2162789131: \"IFCSTRUCTURALLOAD\",\n  385403989: \"IFCSTRUCTURALLOADCASE\",\n  3478079324: \"IFCSTRUCTURALLOADCONFIGURATION\",\n  1252848954: \"IFCSTRUCTURALLOADGROUP\",\n  1595516126: \"IFCSTRUCTURALLOADLINEARFORCE\",\n  609421318: \"IFCSTRUCTURALLOADORRESULT\",\n  2668620305: \"IFCSTRUCTURALLOADPLANARFORCE\",\n  2473145415: \"IFCSTRUCTURALLOADSINGLEDISPLACEMENT\",\n  1973038258: \"IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION\",\n  1597423693: \"IFCSTRUCTURALLOADSINGLEFORCE\",\n  1190533807: \"IFCSTRUCTURALLOADSINGLEFORCEWARPING\",\n  2525727697: \"IFCSTRUCTURALLOADSTATIC\",\n  3408363356: \"IFCSTRUCTURALLOADTEMPERATURE\",\n  530289379: \"IFCSTRUCTURALMEMBER\",\n  1621171031: \"IFCSTRUCTURALPLANARACTION\",\n  2082059205: \"IFCSTRUCTURALPOINTACTION\",\n  734778138: \"IFCSTRUCTURALPOINTCONNECTION\",\n  1235345126: \"IFCSTRUCTURALPOINTREACTION\",\n  3689010777: \"IFCSTRUCTURALREACTION\",\n  2986769608: \"IFCSTRUCTURALRESULTGROUP\",\n  3657597509: \"IFCSTRUCTURALSURFACEACTION\",\n  1975003073: \"IFCSTRUCTURALSURFACECONNECTION\",\n  3979015343: \"IFCSTRUCTURALSURFACEMEMBER\",\n  2218152070: \"IFCSTRUCTURALSURFACEMEMBERVARYING\",\n  603775116: \"IFCSTRUCTURALSURFACEREACTION\",\n  2830218821: \"IFCSTYLEMODEL\",\n  3958052878: \"IFCSTYLEDITEM\",\n  3049322572: \"IFCSTYLEDREPRESENTATION\",\n  148013059: \"IFCSUBCONTRACTRESOURCE\",\n  4095615324: \"IFCSUBCONTRACTRESOURCETYPE\",\n  2233826070: \"IFCSUBEDGE\",\n  2513912981: \"IFCSURFACE\",\n  699246055: \"IFCSURFACECURVE\",\n  2028607225: \"IFCSURFACECURVESWEPTAREASOLID\",\n  3101698114: \"IFCSURFACEFEATURE\",\n  2809605785: \"IFCSURFACEOFLINEAREXTRUSION\",\n  4124788165: \"IFCSURFACEOFREVOLUTION\",\n  2934153892: \"IFCSURFACEREINFORCEMENTAREA\",\n  1300840506: \"IFCSURFACESTYLE\",\n  3303107099: \"IFCSURFACESTYLELIGHTING\",\n  1607154358: \"IFCSURFACESTYLEREFRACTION\",\n  1878645084: \"IFCSURFACESTYLERENDERING\",\n  846575682: \"IFCSURFACESTYLESHADING\",\n  1351298697: \"IFCSURFACESTYLEWITHTEXTURES\",\n  626085974: \"IFCSURFACETEXTURE\",\n  2247615214: \"IFCSWEPTAREASOLID\",\n  1260650574: \"IFCSWEPTDISKSOLID\",\n  1096409881: \"IFCSWEPTDISKSOLIDPOLYGONAL\",\n  230924584: \"IFCSWEPTSURFACE\",\n  1162798199: \"IFCSWITCHINGDEVICE\",\n  2315554128: \"IFCSWITCHINGDEVICETYPE\",\n  2254336722: \"IFCSYSTEM\",\n  413509423: \"IFCSYSTEMFURNITUREELEMENT\",\n  1580310250: \"IFCSYSTEMFURNITUREELEMENTTYPE\",\n  3071757647: \"IFCTSHAPEPROFILEDEF\",\n  985171141: \"IFCTABLE\",\n  2043862942: \"IFCTABLECOLUMN\",\n  531007025: \"IFCTABLEROW\",\n  812556717: \"IFCTANK\",\n  5716631: \"IFCTANKTYPE\",\n  3473067441: \"IFCTASK\",\n  1549132990: \"IFCTASKTIME\",\n  2771591690: \"IFCTASKTIMERECURRING\",\n  3206491090: \"IFCTASKTYPE\",\n  912023232: \"IFCTELECOMADDRESS\",\n  3824725483: \"IFCTENDON\",\n  2347447852: \"IFCTENDONANCHOR\",\n  3081323446: \"IFCTENDONANCHORTYPE\",\n  3663046924: \"IFCTENDONCONDUIT\",\n  2281632017: \"IFCTENDONCONDUITTYPE\",\n  2415094496: \"IFCTENDONTYPE\",\n  2387106220: \"IFCTESSELLATEDFACESET\",\n  901063453: \"IFCTESSELLATEDITEM\",\n  4282788508: \"IFCTEXTLITERAL\",\n  3124975700: \"IFCTEXTLITERALWITHEXTENT\",\n  1447204868: \"IFCTEXTSTYLE\",\n  1983826977: \"IFCTEXTSTYLEFONTMODEL\",\n  2636378356: \"IFCTEXTSTYLEFORDEFINEDFONT\",\n  1640371178: \"IFCTEXTSTYLETEXTMODEL\",\n  280115917: \"IFCTEXTURECOORDINATE\",\n  1742049831: \"IFCTEXTURECOORDINATEGENERATOR\",\n  2552916305: \"IFCTEXTUREMAP\",\n  1210645708: \"IFCTEXTUREVERTEX\",\n  3611470254: \"IFCTEXTUREVERTEXLIST\",\n  1199560280: \"IFCTIMEPERIOD\",\n  3101149627: \"IFCTIMESERIES\",\n  581633288: \"IFCTIMESERIESVALUE\",\n  1377556343: \"IFCTOPOLOGICALREPRESENTATIONITEM\",\n  1735638870: \"IFCTOPOLOGYREPRESENTATION\",\n  1935646853: \"IFCTOROIDALSURFACE\",\n  3825984169: \"IFCTRANSFORMER\",\n  1692211062: \"IFCTRANSFORMERTYPE\",\n  2595432518: \"IFCTRANSITIONCURVESEGMENT2D\",\n  1620046519: \"IFCTRANSPORTELEMENT\",\n  2097647324: \"IFCTRANSPORTELEMENTTYPE\",\n  2715220739: \"IFCTRAPEZIUMPROFILEDEF\",\n  2916149573: \"IFCTRIANGULATEDFACESET\",\n  1229763772: \"IFCTRIANGULATEDIRREGULARNETWORK\",\n  3593883385: \"IFCTRIMMEDCURVE\",\n  3026737570: \"IFCTUBEBUNDLE\",\n  1600972822: \"IFCTUBEBUNDLETYPE\",\n  1628702193: \"IFCTYPEOBJECT\",\n  3736923433: \"IFCTYPEPROCESS\",\n  2347495698: \"IFCTYPEPRODUCT\",\n  3698973494: \"IFCTYPERESOURCE\",\n  427810014: \"IFCUSHAPEPROFILEDEF\",\n  180925521: \"IFCUNITASSIGNMENT\",\n  630975310: \"IFCUNITARYCONTROLELEMENT\",\n  3179687236: \"IFCUNITARYCONTROLELEMENTTYPE\",\n  4292641817: \"IFCUNITARYEQUIPMENT\",\n  1911125066: \"IFCUNITARYEQUIPMENTTYPE\",\n  4207607924: \"IFCVALVE\",\n  728799441: \"IFCVALVETYPE\",\n  1417489154: \"IFCVECTOR\",\n  2799835756: \"IFCVERTEX\",\n  2759199220: \"IFCVERTEXLOOP\",\n  1907098498: \"IFCVERTEXPOINT\",\n  1530820697: \"IFCVIBRATIONDAMPER\",\n  3956297820: \"IFCVIBRATIONDAMPERTYPE\",\n  2391383451: \"IFCVIBRATIONISOLATOR\",\n  3313531582: \"IFCVIBRATIONISOLATORTYPE\",\n  2769231204: \"IFCVIRTUALELEMENT\",\n  891718957: \"IFCVIRTUALGRIDINTERSECTION\",\n  926996030: \"IFCVOIDINGFEATURE\",\n  2391406946: \"IFCWALL\",\n  4156078855: \"IFCWALLELEMENTEDCASE\",\n  3512223829: \"IFCWALLSTANDARDCASE\",\n  1898987631: \"IFCWALLTYPE\",\n  4237592921: \"IFCWASTETERMINAL\",\n  1133259667: \"IFCWASTETERMINALTYPE\",\n  3304561284: \"IFCWINDOW\",\n  336235671: \"IFCWINDOWLININGPROPERTIES\",\n  512836454: \"IFCWINDOWPANELPROPERTIES\",\n  486154966: \"IFCWINDOWSTANDARDCASE\",\n  1299126871: \"IFCWINDOWSTYLE\",\n  4009809668: \"IFCWINDOWTYPE\",\n  4088093105: \"IFCWORKCALENDAR\",\n  1028945134: \"IFCWORKCONTROL\",\n  4218914973: \"IFCWORKPLAN\",\n  3342526732: \"IFCWORKSCHEDULE\",\n  1236880293: \"IFCWORKTIME\",\n  2543172580: \"IFCZSHAPEPROFILEDEF\",\n  1033361043: \"IFCZONE\"\n};\n\nvar JSONPropertyManager = /*#__PURE__*/function (_BasePropertyManager2) {\n  _inherits(JSONPropertyManager, _BasePropertyManager2);\n\n  var _super3 = _createSuper(JSONPropertyManager);\n\n  function JSONPropertyManager() {\n    _classCallCheck(this, JSONPropertyManager);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(JSONPropertyManager, [{\n    key: \"getItemProperties\",\n    value: function () {\n      var _getItemProperties3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(modelID, id) {\n        var recursive,\n            _args28 = arguments;\n        return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                recursive = _args28.length > 2 && _args28[2] !== undefined ? _args28[2] : false;\n                return _context28.abrupt(\"return\", _objectSpread({}, this.state.models[modelID].jsonData[id]));\n\n              case 2:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n\n      function getItemProperties(_x50, _x51) {\n        return _getItemProperties3.apply(this, arguments);\n      }\n\n      return getItemProperties;\n    }()\n  }, {\n    key: \"getSpatialStructure\",\n    value: function () {\n      var _getSpatialStructure2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29(modelID, includeProperties) {\n        var chunks, projectsIDs, projectID, project;\n        return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                _context29.next = 2;\n                return this.getSpatialTreeChunks(modelID);\n\n              case 2:\n                chunks = _context29.sent;\n                _context29.next = 5;\n                return this.getAllItemsOfType(modelID, IFCPROJECT, false);\n\n              case 5:\n                projectsIDs = _context29.sent;\n                projectID = projectsIDs[0];\n                project = JSONPropertyManager.newIfcProject(projectID);\n                _context29.next = 10;\n                return this.getSpatialNode(modelID, project, chunks, includeProperties);\n\n              case 10:\n                return _context29.abrupt(\"return\", _objectSpread({}, project));\n\n              case 11:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this);\n      }));\n\n      function getSpatialStructure(_x52, _x53) {\n        return _getSpatialStructure2.apply(this, arguments);\n      }\n\n      return getSpatialStructure;\n    }()\n  }, {\n    key: \"getAllItemsOfType\",\n    value: function () {\n      var _getAllItemsOfType2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30(modelID, type, verbose) {\n        var data, typeName;\n        return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                data = this.state.models[modelID].jsonData;\n                typeName = IfcTypesMap[type];\n\n                if (typeName) {\n                  _context30.next = 4;\n                  break;\n                }\n\n                throw new Error(\"Type not found: \".concat(type));\n\n              case 4:\n                return _context30.abrupt(\"return\", this.filterItemsByType(data, typeName, verbose));\n\n              case 5:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30, this);\n      }));\n\n      function getAllItemsOfType(_x54, _x55, _x56) {\n        return _getAllItemsOfType2.apply(this, arguments);\n      }\n\n      return getAllItemsOfType;\n    }()\n  }, {\n    key: \"getProperty\",\n    value: function () {\n      var _getProperty3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31(modelID, elementID) {\n        var _this3 = this;\n\n        var recursive,\n            propName,\n            resultIDs,\n            result,\n            _args31 = arguments;\n        return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n                recursive = _args31.length > 2 && _args31[2] !== undefined ? _args31[2] : false;\n                propName = _args31.length > 3 ? _args31[3] : undefined;\n                _context31.next = 4;\n                return this.getAllRelatedItemsOfType(modelID, elementID, propName);\n\n              case 4:\n                resultIDs = _context31.sent;\n                result = this.getItemsByID(modelID, resultIDs);\n\n                if (recursive) {\n                  result.forEach(function (result) {\n                    return _this3.getReferencesRecursively(modelID, result);\n                  });\n                }\n\n                return _context31.abrupt(\"return\", result);\n\n              case 8:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n        }, _callee31, this);\n      }));\n\n      function getProperty(_x57, _x58) {\n        return _getProperty3.apply(this, arguments);\n      }\n\n      return getProperty;\n    }()\n  }, {\n    key: \"getNodeType\",\n    value: function getNodeType(modelID, id) {\n      return this.state.models[modelID].jsonData[id].type;\n    }\n  }, {\n    key: \"getChunks\",\n    value: function () {\n      var _getChunks3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32(modelID, chunks, propNames) {\n        var _this4 = this;\n\n        var relation;\n        return _regeneratorRuntime.wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n                _context32.next = 2;\n                return this.getAllItemsOfType(modelID, propNames.name, true);\n\n              case 2:\n                relation = _context32.sent;\n                relation.forEach(function (rel) {\n                  _this4.saveChunk(chunks, propNames, rel);\n                });\n\n              case 4:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n        }, _callee32, this);\n      }));\n\n      function getChunks(_x59, _x60, _x61) {\n        return _getChunks3.apply(this, arguments);\n      }\n\n      return getChunks;\n    }()\n  }, {\n    key: \"filterItemsByType\",\n    value: function filterItemsByType(data, typeName, verbose) {\n      var result = [];\n      Object.keys(data).forEach(function (key) {\n        var numKey = parseInt(key);\n\n        if (data[numKey].type.toUpperCase() === typeName) {\n          result.push(verbose ? _objectSpread({}, data[numKey]) : numKey);\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"getAllRelatedItemsOfType\",\n    value: function () {\n      var _getAllRelatedItemsOfType2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee33(modelID, id, propNames) {\n        var _this5 = this;\n\n        var lines, IDs;\n        return _regeneratorRuntime.wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n                _context33.next = 2;\n                return this.getAllItemsOfType(modelID, propNames.name, true);\n\n              case 2:\n                lines = _context33.sent;\n                IDs = [];\n                lines.forEach(function (line) {\n                  var isRelated = JSONPropertyManager.isRelated(id, line, propNames);\n                  if (isRelated) _this5.getRelated(line, propNames, IDs);\n                });\n                return _context33.abrupt(\"return\", IDs);\n\n              case 6:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n        }, _callee33, this);\n      }));\n\n      function getAllRelatedItemsOfType(_x62, _x63, _x64) {\n        return _getAllRelatedItemsOfType2.apply(this, arguments);\n      }\n\n      return getAllRelatedItemsOfType;\n    }()\n  }, {\n    key: \"getItemsByID\",\n    value: function getItemsByID(modelID, ids) {\n      var data = this.state.models[modelID].jsonData;\n      var result = [];\n      ids.forEach(function (id) {\n        return result.push(_objectSpread({}, data[id]));\n      });\n      return result;\n    }\n  }, {\n    key: \"getReferencesRecursively\",\n    value: function getReferencesRecursively(modelID, jsonObject) {\n      if (jsonObject == undefined) return;\n      var keys = Object.keys(jsonObject);\n\n      for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        this.getJSONItem(modelID, jsonObject, key);\n      }\n    }\n  }, {\n    key: \"getJSONItem\",\n    value: function getJSONItem(modelID, jsonObject, key) {\n      if (Array.isArray(jsonObject[key])) {\n        return this.getMultipleJSONItems(modelID, jsonObject, key);\n      }\n\n      if (jsonObject[key] && jsonObject[key].type === 5) {\n        jsonObject[key] = this.getItemsByID(modelID, [jsonObject[key].value])[0];\n        this.getReferencesRecursively(modelID, jsonObject[key]);\n      }\n    }\n  }, {\n    key: \"getMultipleJSONItems\",\n    value: function getMultipleJSONItems(modelID, jsonObject, key) {\n      var _this6 = this;\n\n      jsonObject[key] = jsonObject[key].map(function (item) {\n        if (item.type === 5) {\n          item = _this6.getItemsByID(modelID, [item.value])[0];\n\n          _this6.getReferencesRecursively(modelID, item);\n        }\n\n        return item;\n      });\n    }\n  }]);\n\n  return JSONPropertyManager;\n}(BasePropertyManager);\n\nvar PropertyManager = /*#__PURE__*/function () {\n  function PropertyManager(state) {\n    _classCallCheck(this, PropertyManager);\n\n    this.state = state;\n    this.webIfcProps = new WebIfcPropertyManager(state);\n    this.jsonProps = new JSONPropertyManager(state);\n    this.currentProps = this.webIfcProps;\n  }\n\n  _createClass(PropertyManager, [{\n    key: \"getExpressId\",\n    value: function getExpressId(geometry, faceIndex) {\n      if (!geometry.index) throw new Error('Geometry does not have index information.');\n      var geoIndex = geometry.index.array;\n      return geometry.attributes[IdAttrName].getX(geoIndex[3 * faceIndex]);\n    }\n  }, {\n    key: \"getItemProperties\",\n    value: function () {\n      var _getItemProperties4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee34(modelID, elementID) {\n        var recursive,\n            _args34 = arguments;\n        return _regeneratorRuntime.wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n                recursive = _args34.length > 2 && _args34[2] !== undefined ? _args34[2] : false;\n                this.updateCurrentProps();\n                return _context34.abrupt(\"return\", this.currentProps.getItemProperties(modelID, elementID, recursive));\n\n              case 3:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n        }, _callee34, this);\n      }));\n\n      function getItemProperties(_x65, _x66) {\n        return _getItemProperties4.apply(this, arguments);\n      }\n\n      return getItemProperties;\n    }()\n  }, {\n    key: \"getAllItemsOfType\",\n    value: function () {\n      var _getAllItemsOfType3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee35(modelID, type, verbose) {\n        return _regeneratorRuntime.wrap(function _callee35$(_context35) {\n          while (1) {\n            switch (_context35.prev = _context35.next) {\n              case 0:\n                this.updateCurrentProps();\n                return _context35.abrupt(\"return\", this.currentProps.getAllItemsOfType(modelID, type, verbose));\n\n              case 2:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n        }, _callee35, this);\n      }));\n\n      function getAllItemsOfType(_x67, _x68, _x69) {\n        return _getAllItemsOfType3.apply(this, arguments);\n      }\n\n      return getAllItemsOfType;\n    }()\n  }, {\n    key: \"getPropertySets\",\n    value: function () {\n      var _getPropertySets2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee36(modelID, elementID) {\n        var recursive,\n            _args36 = arguments;\n        return _regeneratorRuntime.wrap(function _callee36$(_context36) {\n          while (1) {\n            switch (_context36.prev = _context36.next) {\n              case 0:\n                recursive = _args36.length > 2 && _args36[2] !== undefined ? _args36[2] : false;\n                this.updateCurrentProps();\n                return _context36.abrupt(\"return\", this.currentProps.getPropertySets(modelID, elementID, recursive));\n\n              case 3:\n              case \"end\":\n                return _context36.stop();\n            }\n          }\n        }, _callee36, this);\n      }));\n\n      function getPropertySets(_x70, _x71) {\n        return _getPropertySets2.apply(this, arguments);\n      }\n\n      return getPropertySets;\n    }()\n  }, {\n    key: \"getTypeProperties\",\n    value: function () {\n      var _getTypeProperties2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee37(modelID, elementID) {\n        var recursive,\n            _args37 = arguments;\n        return _regeneratorRuntime.wrap(function _callee37$(_context37) {\n          while (1) {\n            switch (_context37.prev = _context37.next) {\n              case 0:\n                recursive = _args37.length > 2 && _args37[2] !== undefined ? _args37[2] : false;\n                this.updateCurrentProps();\n                return _context37.abrupt(\"return\", this.currentProps.getTypeProperties(modelID, elementID, recursive));\n\n              case 3:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n        }, _callee37, this);\n      }));\n\n      function getTypeProperties(_x72, _x73) {\n        return _getTypeProperties2.apply(this, arguments);\n      }\n\n      return getTypeProperties;\n    }()\n  }, {\n    key: \"getMaterialsProperties\",\n    value: function () {\n      var _getMaterialsProperties2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee38(modelID, elementID) {\n        var recursive,\n            _args38 = arguments;\n        return _regeneratorRuntime.wrap(function _callee38$(_context38) {\n          while (1) {\n            switch (_context38.prev = _context38.next) {\n              case 0:\n                recursive = _args38.length > 2 && _args38[2] !== undefined ? _args38[2] : false;\n                this.updateCurrentProps();\n                return _context38.abrupt(\"return\", this.currentProps.getMaterialsProperties(modelID, elementID, recursive));\n\n              case 3:\n              case \"end\":\n                return _context38.stop();\n            }\n          }\n        }, _callee38, this);\n      }));\n\n      function getMaterialsProperties(_x74, _x75) {\n        return _getMaterialsProperties2.apply(this, arguments);\n      }\n\n      return getMaterialsProperties;\n    }()\n  }, {\n    key: \"getSpatialStructure\",\n    value: function () {\n      var _getSpatialStructure3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee39(modelID, includeProperties) {\n        return _regeneratorRuntime.wrap(function _callee39$(_context39) {\n          while (1) {\n            switch (_context39.prev = _context39.next) {\n              case 0:\n                this.updateCurrentProps();\n\n                if (!this.state.useJSON && includeProperties) {\n                  console.warn('Including properties in getSpatialStructure with the JSON workflow disabled can lead to poor performance.');\n                }\n\n                _context39.next = 4;\n                return this.currentProps.getSpatialStructure(modelID, includeProperties);\n\n              case 4:\n                return _context39.abrupt(\"return\", _context39.sent);\n\n              case 5:\n              case \"end\":\n                return _context39.stop();\n            }\n          }\n        }, _callee39, this);\n      }));\n\n      function getSpatialStructure(_x76, _x77) {\n        return _getSpatialStructure3.apply(this, arguments);\n      }\n\n      return getSpatialStructure;\n    }()\n  }, {\n    key: \"updateCurrentProps\",\n    value: function updateCurrentProps() {\n      this.currentProps = this.state.useJSON ? this.jsonProps : this.webIfcProps;\n    }\n  }]);\n\n  return PropertyManager;\n}();\n\nvar TypeManager = /*#__PURE__*/function () {\n  function TypeManager(state) {\n    _classCallCheck(this, TypeManager);\n\n    this.state = state;\n    this.state = state;\n  }\n\n  _createClass(TypeManager, [{\n    key: \"getAllTypes\",\n    value: function () {\n      var _getAllTypes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee40(worker) {\n        var modelID, types;\n        return _regeneratorRuntime.wrap(function _callee40$(_context40) {\n          while (1) {\n            switch (_context40.prev = _context40.next) {\n              case 0:\n                _context40.t0 = _regeneratorRuntime.keys(this.state.models);\n\n              case 1:\n                if ((_context40.t1 = _context40.t0()).done) {\n                  _context40.next = 9;\n                  break;\n                }\n\n                modelID = _context40.t1.value;\n                types = this.state.models[modelID].types;\n\n                if (!(Object.keys(types).length == 0)) {\n                  _context40.next = 7;\n                  break;\n                }\n\n                _context40.next = 7;\n                return this.getAllTypesOfModel(parseInt(modelID), worker);\n\n              case 7:\n                _context40.next = 1;\n                break;\n\n              case 9:\n              case \"end\":\n                return _context40.stop();\n            }\n          }\n        }, _callee40, this);\n      }));\n\n      function getAllTypes(_x78) {\n        return _getAllTypes.apply(this, arguments);\n      }\n\n      return getAllTypes;\n    }()\n  }, {\n    key: \"getAllTypesOfModel\",\n    value: function () {\n      var _getAllTypesOfModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee41(modelID, worker) {\n        var result, elements, i, element, lines, size, _i2;\n\n        return _regeneratorRuntime.wrap(function _callee41$(_context41) {\n          while (1) {\n            switch (_context41.prev = _context41.next) {\n              case 0:\n                result = {};\n                elements = Object.keys(IfcElements).map(function (e) {\n                  return parseInt(e);\n                });\n                i = 0;\n\n              case 3:\n                if (!(i < elements.length)) {\n                  _context41.next = 13;\n                  break;\n                }\n\n                element = elements[i];\n                _context41.next = 7;\n                return this.state.api.GetLineIDsWithType(modelID, element);\n\n              case 7:\n                lines = _context41.sent;\n                size = lines.size();\n\n                for (_i2 = 0; _i2 < size; _i2++) {\n                  result[lines.get(_i2)] = element;\n                }\n\n              case 10:\n                i++;\n                _context41.next = 3;\n                break;\n\n              case 13:\n                if (!(this.state.worker.active && worker)) {\n                  _context41.next = 18;\n                  break;\n                }\n\n                _context41.next = 16;\n                return worker.workerState.updateModelStateTypes(modelID, result);\n\n              case 16:\n                _context41.next = 19;\n                break;\n\n              case 18:\n                this.state.models[modelID].types = result;\n\n              case 19:\n              case \"end\":\n                return _context41.stop();\n            }\n          }\n        }, _callee41, this);\n      }));\n\n      function getAllTypesOfModel(_x79, _x80) {\n        return _getAllTypesOfModel.apply(this, arguments);\n      }\n\n      return getAllTypesOfModel;\n    }()\n  }]);\n\n  return TypeManager;\n}();\n\nvar BvhManager = /*#__PURE__*/function () {\n  function BvhManager() {\n    _classCallCheck(this, BvhManager);\n  }\n\n  _createClass(BvhManager, [{\n    key: \"initializeMeshBVH\",\n    value: function initializeMeshBVH(computeBoundsTree, disposeBoundsTree, acceleratedRaycast) {\n      this.computeBoundsTree = computeBoundsTree;\n      this.disposeBoundsTree = disposeBoundsTree;\n      this.acceleratedRaycast = acceleratedRaycast;\n      this.setupThreeMeshBVH();\n    }\n  }, {\n    key: \"applyThreeMeshBVH\",\n    value: function applyThreeMeshBVH(geometry) {\n      if (this.computeBoundsTree) geometry.computeBoundsTree();\n    }\n  }, {\n    key: \"setupThreeMeshBVH\",\n    value: function setupThreeMeshBVH() {\n      if (!this.computeBoundsTree || !this.disposeBoundsTree || !this.acceleratedRaycast) return;\n      BufferGeometry.prototype.computeBoundsTree = this.computeBoundsTree;\n      BufferGeometry.prototype.disposeBoundsTree = this.disposeBoundsTree;\n      Mesh.prototype.raycast = this.acceleratedRaycast;\n    }\n  }]);\n\n  return BvhManager;\n}();\n\nvar ItemsHider = /*#__PURE__*/function () {\n  function ItemsHider(state) {\n    _classCallCheck(this, ItemsHider);\n\n    this.modelCoordinates = {};\n    this.expressIDCoordinatesMap = {};\n    this.state = state;\n  }\n\n  _createClass(ItemsHider, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this.modelCoordinates = {};\n      this.expressIDCoordinatesMap = {};\n    }\n  }, {\n    key: \"processCoordinates\",\n    value: function processCoordinates(modelID) {\n      var attributes = this.getAttributes(modelID);\n      var ids = Array.from(attributes.expressID.array);\n      this.expressIDCoordinatesMap[modelID] = {};\n\n      for (var i = 0; i < ids.length; i++) {\n        if (!this.expressIDCoordinatesMap[modelID][ids[i]]) {\n          this.expressIDCoordinatesMap[modelID][ids[i]] = [];\n        }\n\n        var current = this.expressIDCoordinatesMap[modelID];\n        current[ids[i]].push(3 * i);\n      }\n\n      this.initializeCoordinates(modelID);\n    }\n  }, {\n    key: \"hideItems\",\n    value: function hideItems(modelID, ids) {\n      this.editCoordinates(modelID, ids, true);\n    }\n  }, {\n    key: \"showItems\",\n    value: function showItems(modelID, ids) {\n      this.editCoordinates(modelID, ids, false);\n    }\n  }, {\n    key: \"editCoordinates\",\n    value: function editCoordinates(modelID, ids, hide) {\n      var current = this.expressIDCoordinatesMap[modelID];\n      var indices = [];\n      ids.forEach(function (id) {\n        if (current[id]) {\n          for (var i = 0; i < current[id].length; i++) {\n            indices.push(current[id][i]);\n          }\n        }\n      });\n      var coords = this.getCoordinates(modelID);\n      var initial = this.modelCoordinates[modelID];\n      if (hide) indices.forEach(function (i) {\n        return coords.set([0, 0, 0], i);\n      });else indices.forEach(function (i) {\n        return coords.set([initial[i], initial[i + 1], initial[i + 2]], i);\n      });\n      this.getAttributes(modelID).position.needsUpdate = true;\n    }\n  }, {\n    key: \"showAllItems\",\n    value: function showAllItems(modelID) {\n      if (this.modelCoordinates[modelID]) {\n        this.resetCoordinates(modelID);\n        this.getAttributes(modelID).position.needsUpdate = true;\n      }\n    }\n  }, {\n    key: \"hideAllItems\",\n    value: function hideAllItems(modelID) {\n      this.getCoordinates(modelID).fill(0);\n      this.getAttributes(modelID).position.needsUpdate = true;\n    }\n  }, {\n    key: \"initializeCoordinates\",\n    value: function initializeCoordinates(modelID) {\n      var coordinates = this.getCoordinates(modelID);\n\n      if (!this.modelCoordinates[modelID]) {\n        this.modelCoordinates[modelID] = new Float32Array(coordinates);\n      }\n    }\n  }, {\n    key: \"resetCoordinates\",\n    value: function resetCoordinates(modelID) {\n      var initial = this.modelCoordinates[modelID];\n      this.getCoordinates(modelID).set(initial);\n    }\n  }, {\n    key: \"getCoordinates\",\n    value: function getCoordinates(modelID) {\n      return this.getAttributes(modelID).position.array;\n    }\n  }, {\n    key: \"getAttributes\",\n    value: function getAttributes(modelID) {\n      return this.state.models[modelID].mesh.geometry.attributes;\n    }\n  }]);\n\n  return ItemsHider;\n}();\n\nvar MemoryCleaner = /*#__PURE__*/function () {\n  function MemoryCleaner(state) {\n    _classCallCheck(this, MemoryCleaner);\n\n    this.state = state;\n  }\n\n  _createClass(MemoryCleaner, [{\n    key: \"releaseAllModels\",\n    value: function releaseAllModels() {\n      var _this7 = this;\n\n      var models = Object.values(this.state.models);\n      models.forEach(function (model) {\n        _this7.releaseMeshModelMemory(model);\n\n        _this7.releaseJSONMemory(model);\n\n        _this7.releaseGeometryByMaterials(model);\n\n        model.types = null;\n      });\n    }\n  }, {\n    key: \"releaseGeometryByMaterials\",\n    value: function releaseGeometryByMaterials(model) {\n      var keys = Object.keys(model.items);\n      keys.forEach(function (key) {\n        var geomsByMat = model.items[key];\n        geomsByMat.material.dispose();\n        geomsByMat.material = null;\n        Object.values(geomsByMat.geometries).forEach(function (geom) {\n          return geom.dispose();\n        });\n        geomsByMat.geometries = null;\n      });\n      model.items = null;\n    }\n  }, {\n    key: \"releaseJSONMemory\",\n    value: function releaseJSONMemory(model) {\n      var keys = Object.keys(model.jsonData);\n      keys.forEach(function (key) {\n        return delete model.jsonData[parseInt(key)];\n      });\n      model.jsonData = null;\n    }\n  }, {\n    key: \"releaseMeshModelMemory\",\n    value: function releaseMeshModelMemory(model) {\n      this.releaseMeshMemory(model.mesh);\n      model.mesh = null;\n    }\n  }, {\n    key: \"releaseMeshMemory\",\n    value: function releaseMeshMemory(mesh) {\n      var _this8 = this;\n\n      if (mesh.geometry) {\n        mesh.geometry.dispose();\n      }\n\n      if (mesh.parent) {\n        mesh.parent.remove(mesh);\n      }\n\n      if (mesh.material) {\n        Array.isArray(mesh.material) ? mesh.material.forEach(function (mat) {\n          return mat.dispose();\n        }) : mesh.material.dispose();\n      }\n\n      if (mesh.children.length > 0) {\n        mesh.children.forEach(function (child) {\n          if (child.type === \"Mesh\") _this8.releaseMeshMemory(child);\n          mesh.remove(child);\n        });\n      }\n    }\n  }]);\n\n  return MemoryCleaner;\n}();\n\nvar WorkerActions;\n\n(function (WorkerActions) {\n  WorkerActions[\"updateStateUseJson\"] = \"updateStateUseJson\";\n  WorkerActions[\"updateStateWebIfcSettings\"] = \"updateStateWebIfcSettings\";\n  WorkerActions[\"updateModelStateTypes\"] = \"updateModelStateTypes\";\n  WorkerActions[\"updateModelStateJsonData\"] = \"updateModelStateJsonData\";\n  WorkerActions[\"loadJsonDataFromWorker\"] = \"loadJsonDataFromWorker\";\n  WorkerActions[\"Close\"] = \"Close\";\n  WorkerActions[\"Init\"] = \"Init\";\n  WorkerActions[\"OpenModel\"] = \"OpenModel\";\n  WorkerActions[\"CreateModel\"] = \"CreateModel\";\n  WorkerActions[\"ExportFileAsIFC\"] = \"ExportFileAsIFC\";\n  WorkerActions[\"GetGeometry\"] = \"GetGeometry\";\n  WorkerActions[\"GetLine\"] = \"GetLine\";\n  WorkerActions[\"GetAndClearErrors\"] = \"GetAndClearErrors\";\n  WorkerActions[\"WriteLine\"] = \"WriteLine\";\n  WorkerActions[\"FlattenLine\"] = \"FlattenLine\";\n  WorkerActions[\"GetRawLineData\"] = \"GetRawLineData\";\n  WorkerActions[\"WriteRawLineData\"] = \"WriteRawLineData\";\n  WorkerActions[\"GetLineIDsWithType\"] = \"GetLineIDsWithType\";\n  WorkerActions[\"GetAllLines\"] = \"GetAllLines\";\n  WorkerActions[\"SetGeometryTransformation\"] = \"SetGeometryTransformation\";\n  WorkerActions[\"GetCoordinationMatrix\"] = \"GetCoordinationMatrix\";\n  WorkerActions[\"GetVertexArray\"] = \"GetVertexArray\";\n  WorkerActions[\"GetIndexArray\"] = \"GetIndexArray\";\n  WorkerActions[\"getSubArray\"] = \"getSubArray\";\n  WorkerActions[\"CloseModel\"] = \"CloseModel\";\n  WorkerActions[\"StreamAllMeshes\"] = \"StreamAllMeshes\";\n  WorkerActions[\"StreamAllMeshesWithTypes\"] = \"StreamAllMeshesWithTypes\";\n  WorkerActions[\"IsModelOpen\"] = \"IsModelOpen\";\n  WorkerActions[\"LoadAllGeometry\"] = \"LoadAllGeometry\";\n  WorkerActions[\"GetFlatMesh\"] = \"GetFlatMesh\";\n  WorkerActions[\"SetWasmPath\"] = \"SetWasmPath\";\n  WorkerActions[\"parse\"] = \"parse\";\n  WorkerActions[\"setupOptionalCategories\"] = \"setupOptionalCategories\";\n  WorkerActions[\"getExpressId\"] = \"getExpressId\";\n  WorkerActions[\"initializeProperties\"] = \"initializeProperties\";\n  WorkerActions[\"getAllItemsOfType\"] = \"getAllItemsOfType\";\n  WorkerActions[\"getItemProperties\"] = \"getItemProperties\";\n  WorkerActions[\"getMaterialsProperties\"] = \"getMaterialsProperties\";\n  WorkerActions[\"getPropertySets\"] = \"getPropertySets\";\n  WorkerActions[\"getSpatialStructure\"] = \"getSpatialStructure\";\n  WorkerActions[\"getTypeProperties\"] = \"getTypeProperties\";\n})(WorkerActions || (WorkerActions = {}));\n\nvar WorkerAPIs;\n\n(function (WorkerAPIs) {\n  WorkerAPIs[\"workerState\"] = \"workerState\";\n  WorkerAPIs[\"webIfc\"] = \"webIfc\";\n  WorkerAPIs[\"properties\"] = \"properties\";\n  WorkerAPIs[\"parser\"] = \"parser\";\n})(WorkerAPIs || (WorkerAPIs = {}));\n\nvar Vector = /*#__PURE__*/function () {\n  function Vector(vector) {\n    var _this9 = this;\n\n    _classCallCheck(this, Vector);\n\n    this._data = {};\n    this._size = vector.size;\n    var keys = Object.keys(vector).filter(function (key) {\n      return key.indexOf('size') === -1;\n    }).map(function (key) {\n      return parseInt(key);\n    });\n    keys.forEach(function (key) {\n      return _this9._data[key] = vector[key];\n    });\n  }\n\n  _createClass(Vector, [{\n    key: \"size\",\n    value: function size() {\n      return this._size;\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return this._data[index];\n    }\n  }]);\n\n  return Vector;\n}();\n\nvar IfcGeometry = /*#__PURE__*/function () {\n  function IfcGeometry(vector) {\n    _classCallCheck(this, IfcGeometry);\n\n    this._GetVertexData = vector.GetVertexData;\n    this._GetVertexDataSize = vector.GetVertexDataSize;\n    this._GetIndexData = vector.GetIndexData;\n    this._GetIndexDataSize = vector.GetIndexDataSize;\n  }\n\n  _createClass(IfcGeometry, [{\n    key: \"GetVertexData\",\n    value: function GetVertexData() {\n      return this._GetVertexData;\n    }\n  }, {\n    key: \"GetVertexDataSize\",\n    value: function GetVertexDataSize() {\n      return this._GetVertexDataSize;\n    }\n  }, {\n    key: \"GetIndexData\",\n    value: function GetIndexData() {\n      return this._GetIndexData;\n    }\n  }, {\n    key: \"GetIndexDataSize\",\n    value: function GetIndexDataSize() {\n      return this._GetIndexDataSize;\n    }\n  }]);\n\n  return IfcGeometry;\n}();\n\nvar FlatMesh = function FlatMesh(serializer, flatMesh) {\n  _classCallCheck(this, FlatMesh);\n\n  this.expressID = flatMesh.expressID;\n  this.geometries = serializer.reconstructVector(flatMesh.geometries);\n};\n\nvar FlatMeshVector = /*#__PURE__*/function () {\n  function FlatMeshVector(serializer, vector) {\n    var _this10 = this;\n\n    _classCallCheck(this, FlatMeshVector);\n\n    this._data = {};\n    this._size = vector.size;\n    var keys = Object.keys(vector).filter(function (key) {\n      return key.indexOf('size') === -1;\n    }).map(function (key) {\n      return parseInt(key);\n    });\n    keys.forEach(function (key) {\n      return _this10._data[key] = serializer.reconstructFlatMesh(vector[key]);\n    });\n  }\n\n  _createClass(FlatMeshVector, [{\n    key: \"size\",\n    value: function size() {\n      return this._size;\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return this._data[index];\n    }\n  }]);\n\n  return FlatMeshVector;\n}();\n\nvar SerializedMaterial = function SerializedMaterial(material) {\n  _classCallCheck(this, SerializedMaterial);\n\n  this.color = [material.color.r, material.color.g, material.color.b];\n  this.opacity = material.opacity;\n  this.transparent = material.transparent;\n};\n\nvar MaterialReconstructor = /*#__PURE__*/function () {\n  function MaterialReconstructor() {\n    _classCallCheck(this, MaterialReconstructor);\n  }\n\n  _createClass(MaterialReconstructor, null, [{\n    key: \"new\",\n    value: function _new(material) {\n      return new MeshLambertMaterial({\n        color: new Color(material.color[0], material.color[1], material.color[2]),\n        opacity: material.opacity,\n        transparent: material.transparent\n      });\n    }\n  }]);\n\n  return MaterialReconstructor;\n}();\n\nvar SerializedGeometry = function SerializedGeometry(geometry) {\n  _classCallCheck(this, SerializedGeometry);\n\n  var _a, _b, _c, _d;\n\n  this.position = ((_a = geometry.attributes.position) === null || _a === void 0 ? void 0 : _a.array) || [];\n  this.normal = ((_b = geometry.attributes.normal) === null || _b === void 0 ? void 0 : _b.array) || [];\n  this.expressID = ((_c = geometry.attributes.expressID) === null || _c === void 0 ? void 0 : _c.array) || [];\n  this.index = ((_d = geometry.index) === null || _d === void 0 ? void 0 : _d.array) || [];\n  this.groups = geometry.groups;\n};\n\nvar GeometryReconstructor = /*#__PURE__*/function () {\n  function GeometryReconstructor() {\n    _classCallCheck(this, GeometryReconstructor);\n  }\n\n  _createClass(GeometryReconstructor, null, [{\n    key: \"new\",\n    value: function _new(serialized) {\n      var geom = new BufferGeometry();\n      GeometryReconstructor.set(geom, 'expressID', new Uint32Array(serialized.expressID), 1);\n      GeometryReconstructor.set(geom, 'position', new Float32Array(serialized.position), 3);\n      GeometryReconstructor.set(geom, 'normal', new Float32Array(serialized.normal), 3);\n      geom.setIndex(Array.from(serialized.index));\n      geom.groups = serialized.groups;\n      return geom;\n    }\n  }, {\n    key: \"set\",\n    value: function set(geom, name, data, size) {\n      if (data.length > 0) {\n        geom.setAttribute(name, new BufferAttribute(data, size));\n      }\n    }\n  }]);\n\n  return GeometryReconstructor;\n}();\n\nvar SerializedMesh = function SerializedMesh(model) {\n  var _this11 = this;\n\n  _classCallCheck(this, SerializedMesh);\n\n  this.materials = [];\n  this.modelID = model.modelID;\n  this.geometry = new SerializedGeometry(model.geometry);\n\n  if (Array.isArray(model.material)) {\n    model.material.forEach(function (mat) {\n      _this11.materials.push(new SerializedMaterial(mat));\n    });\n  } else {\n    this.materials.push(new SerializedMaterial(model.material));\n  }\n};\n\nvar MeshReconstructor = /*#__PURE__*/function () {\n  function MeshReconstructor() {\n    _classCallCheck(this, MeshReconstructor);\n  }\n\n  _createClass(MeshReconstructor, null, [{\n    key: \"new\",\n    value: function _new(serialized) {\n      var model = new IFCModel();\n      model.modelID = serialized.modelID;\n      model.geometry = GeometryReconstructor.new(serialized.geometry);\n      MeshReconstructor.getMaterials(serialized, model);\n      return model;\n    }\n  }, {\n    key: \"getMaterials\",\n    value: function getMaterials(serialized, model) {\n      model.material = [];\n      var mats = model.material;\n      serialized.materials.forEach(function (mat) {\n        mats.push(MaterialReconstructor.new(mat));\n      });\n    }\n  }]);\n\n  return MeshReconstructor;\n}();\n\nvar SerializedGeomsByMaterials = function SerializedGeomsByMaterials(geoms) {\n  var _this12 = this;\n\n  _classCallCheck(this, SerializedGeomsByMaterials);\n\n  var matIDs = Object.keys(geoms);\n  matIDs.forEach(function (id) {\n    _this12[id] = {};\n    _this12[id].material = new SerializedMaterial(geoms[id].material);\n    _this12[id].geometries = {};\n    var expressIDs = Object.keys(geoms[id].geometries).map(function (key) {\n      return parseInt(key);\n    });\n    expressIDs.forEach(function (expressID) {\n      _this12[id].geometries[expressID] = new SerializedGeometry(geoms[id].geometries[expressID]);\n    });\n  });\n};\n\nvar GeomsByMaterialsReconstructor = /*#__PURE__*/function () {\n  function GeomsByMaterialsReconstructor() {\n    _classCallCheck(this, GeomsByMaterialsReconstructor);\n  }\n\n  _createClass(GeomsByMaterialsReconstructor, null, [{\n    key: \"new\",\n    value: function _new(serialized) {\n      var geomsByMat = {};\n      var matIDs = Object.keys(serialized);\n      matIDs.forEach(function (id) {\n        geomsByMat[id] = {};\n        geomsByMat[id].material = MaterialReconstructor.new(serialized[id].material);\n        geomsByMat[id].geometries = {};\n        var expressIDs = Object.keys(serialized[id].geometries).map(function (id) {\n          return parseInt(id);\n        });\n        expressIDs.forEach(function (expressID) {\n          geomsByMat[id].geometries[expressID] = GeometryReconstructor.new(serialized[id].geometries[expressID]);\n        });\n      });\n      return geomsByMat;\n    }\n  }]);\n\n  return GeomsByMaterialsReconstructor;\n}();\n\nvar Serializer = /*#__PURE__*/function () {\n  function Serializer() {\n    _classCallCheck(this, Serializer);\n  }\n\n  _createClass(Serializer, [{\n    key: \"serializeVector\",\n    value: function serializeVector(vector) {\n      var size = vector.size();\n      var serialized = {\n        size: size\n      };\n\n      for (var i = 0; i < size; i++) {\n        serialized[i] = vector.get(i);\n      }\n\n      return serialized;\n    }\n  }, {\n    key: \"reconstructVector\",\n    value: function reconstructVector(vector) {\n      return new Vector(vector);\n    }\n  }, {\n    key: \"serializeIfcGeometry\",\n    value: function serializeIfcGeometry(geometry) {\n      var GetVertexData = geometry.GetVertexData();\n      var GetVertexDataSize = geometry.GetVertexDataSize();\n      var GetIndexData = geometry.GetIndexData();\n      var GetIndexDataSize = geometry.GetIndexDataSize();\n      return {\n        GetVertexData: GetVertexData,\n        GetVertexDataSize: GetVertexDataSize,\n        GetIndexData: GetIndexData,\n        GetIndexDataSize: GetIndexDataSize\n      };\n    }\n  }, {\n    key: \"reconstructIfcGeometry\",\n    value: function reconstructIfcGeometry(geometry) {\n      return new IfcGeometry(geometry);\n    }\n  }, {\n    key: \"serializeFlatMesh\",\n    value: function serializeFlatMesh(flatMesh) {\n      return {\n        expressID: flatMesh.expressID,\n        geometries: this.serializeVector(flatMesh.geometries)\n      };\n    }\n  }, {\n    key: \"reconstructFlatMesh\",\n    value: function reconstructFlatMesh(flatMesh) {\n      return new FlatMesh(this, flatMesh);\n    }\n  }, {\n    key: \"serializeFlatMeshVector\",\n    value: function serializeFlatMeshVector(vector) {\n      var size = vector.size();\n      var serialized = {\n        size: size\n      };\n\n      for (var i = 0; i < size; i++) {\n        var flatMesh = vector.get(i);\n        serialized[i] = this.serializeFlatMesh(flatMesh);\n      }\n\n      return serialized;\n    }\n  }, {\n    key: \"reconstructFlatMeshVector\",\n    value: function reconstructFlatMeshVector(vector) {\n      return new FlatMeshVector(this, vector);\n    }\n  }, {\n    key: \"serializeIfcModel\",\n    value: function serializeIfcModel(model) {\n      return new SerializedMesh(model);\n    }\n  }, {\n    key: \"reconstructIfcModel\",\n    value: function reconstructIfcModel(model) {\n      return MeshReconstructor.new(model);\n    }\n  }, {\n    key: \"serializeGeometriesByMaterials\",\n    value: function serializeGeometriesByMaterials(geoms) {\n      return new SerializedGeomsByMaterials(geoms);\n    }\n  }, {\n    key: \"reconstructGeometriesByMaterials\",\n    value: function reconstructGeometriesByMaterials(geoms) {\n      return GeomsByMaterialsReconstructor.new(geoms);\n    }\n  }]);\n\n  return Serializer;\n}();\n\nvar PropertyHandler = /*#__PURE__*/function () {\n  function PropertyHandler(handler) {\n    _classCallCheck(this, PropertyHandler);\n\n    this.handler = handler;\n    this.API = WorkerAPIs.properties;\n  }\n\n  _createClass(PropertyHandler, [{\n    key: \"getExpressId\",\n    value: function getExpressId(geometry, faceIndex) {\n      if (!geometry.index) throw new Error('Geometry does not have index information.');\n      var geoIndex = geometry.index.array;\n      return geometry.attributes[IdAttrName].getX(geoIndex[3 * faceIndex]);\n    }\n  }, {\n    key: \"getAllItemsOfType\",\n    value: function getAllItemsOfType(modelID, type, verbose) {\n      return this.handler.request(this.API, WorkerActions.getAllItemsOfType, {\n        modelID: modelID,\n        type: type,\n        verbose: verbose\n      });\n    }\n  }, {\n    key: \"getItemProperties\",\n    value: function getItemProperties(modelID, elementID, recursive) {\n      return this.handler.request(this.API, WorkerActions.getItemProperties, {\n        modelID: modelID,\n        elementID: elementID,\n        recursive: recursive\n      });\n    }\n  }, {\n    key: \"getMaterialsProperties\",\n    value: function getMaterialsProperties(modelID, elementID, recursive) {\n      return this.handler.request(this.API, WorkerActions.getMaterialsProperties, {\n        modelID: modelID,\n        elementID: elementID,\n        recursive: recursive\n      });\n    }\n  }, {\n    key: \"getPropertySets\",\n    value: function getPropertySets(modelID, elementID, recursive) {\n      return this.handler.request(this.API, WorkerActions.getPropertySets, {\n        modelID: modelID,\n        elementID: elementID,\n        recursive: recursive\n      });\n    }\n  }, {\n    key: \"getTypeProperties\",\n    value: function getTypeProperties(modelID, elementID, recursive) {\n      return this.handler.request(this.API, WorkerActions.getTypeProperties, {\n        modelID: modelID,\n        elementID: elementID,\n        recursive: recursive\n      });\n    }\n  }, {\n    key: \"getSpatialStructure\",\n    value: function getSpatialStructure(modelID, includeProperties) {\n      return this.handler.request(this.API, WorkerActions.getSpatialStructure, {\n        modelID: modelID,\n        includeProperties: includeProperties\n      });\n    }\n  }]);\n\n  return PropertyHandler;\n}();\n\nvar WebIfcHandler = /*#__PURE__*/function () {\n  function WebIfcHandler(handler, serializer) {\n    _classCallCheck(this, WebIfcHandler);\n\n    this.handler = handler;\n    this.serializer = serializer;\n    this.API = WorkerAPIs.webIfc;\n  }\n\n  _createClass(WebIfcHandler, [{\n    key: \"Init\",\n    value: function () {\n      var _Init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee42() {\n        return _regeneratorRuntime.wrap(function _callee42$(_context42) {\n          while (1) {\n            switch (_context42.prev = _context42.next) {\n              case 0:\n                this.wasmModule = true;\n                return _context42.abrupt(\"return\", this.handler.request(this.API, WorkerActions.Init));\n\n              case 2:\n              case \"end\":\n                return _context42.stop();\n            }\n          }\n        }, _callee42, this);\n      }));\n\n      function Init() {\n        return _Init.apply(this, arguments);\n      }\n\n      return Init;\n    }()\n  }, {\n    key: \"OpenModel\",\n    value: function () {\n      var _OpenModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee43(data, settings) {\n        return _regeneratorRuntime.wrap(function _callee43$(_context43) {\n          while (1) {\n            switch (_context43.prev = _context43.next) {\n              case 0:\n                return _context43.abrupt(\"return\", this.handler.request(this.API, WorkerActions.OpenModel, {\n                  data: data,\n                  settings: settings\n                }));\n\n              case 1:\n              case \"end\":\n                return _context43.stop();\n            }\n          }\n        }, _callee43, this);\n      }));\n\n      function OpenModel(_x81, _x82) {\n        return _OpenModel.apply(this, arguments);\n      }\n\n      return OpenModel;\n    }()\n  }, {\n    key: \"CreateModel\",\n    value: function () {\n      var _CreateModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee44(settings) {\n        return _regeneratorRuntime.wrap(function _callee44$(_context44) {\n          while (1) {\n            switch (_context44.prev = _context44.next) {\n              case 0:\n                return _context44.abrupt(\"return\", this.handler.request(this.API, WorkerActions.CreateModel, {\n                  settings: settings\n                }));\n\n              case 1:\n              case \"end\":\n                return _context44.stop();\n            }\n          }\n        }, _callee44, this);\n      }));\n\n      function CreateModel(_x83) {\n        return _CreateModel.apply(this, arguments);\n      }\n\n      return CreateModel;\n    }()\n  }, {\n    key: \"ExportFileAsIFC\",\n    value: function () {\n      var _ExportFileAsIFC = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee45(modelID) {\n        return _regeneratorRuntime.wrap(function _callee45$(_context45) {\n          while (1) {\n            switch (_context45.prev = _context45.next) {\n              case 0:\n                return _context45.abrupt(\"return\", this.handler.request(this.API, WorkerActions.ExportFileAsIFC, {\n                  modelID: modelID\n                }));\n\n              case 1:\n              case \"end\":\n                return _context45.stop();\n            }\n          }\n        }, _callee45, this);\n      }));\n\n      function ExportFileAsIFC(_x84) {\n        return _ExportFileAsIFC.apply(this, arguments);\n      }\n\n      return ExportFileAsIFC;\n    }()\n  }, {\n    key: \"GetGeometry\",\n    value: function () {\n      var _GetGeometry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee46(modelID, geometryExpressID) {\n        var _this13 = this;\n\n        return _regeneratorRuntime.wrap(function _callee46$(_context46) {\n          while (1) {\n            switch (_context46.prev = _context46.next) {\n              case 0:\n                this.handler.serializeHandlers[this.handler.requestID] = function (geom) {\n                  return _this13.serializer.reconstructIfcGeometry(geom);\n                };\n\n                return _context46.abrupt(\"return\", this.handler.request(this.API, WorkerActions.GetGeometry, {\n                  modelID: modelID,\n                  geometryExpressID: geometryExpressID\n                }));\n\n              case 2:\n              case \"end\":\n                return _context46.stop();\n            }\n          }\n        }, _callee46, this);\n      }));\n\n      function GetGeometry(_x85, _x86) {\n        return _GetGeometry.apply(this, arguments);\n      }\n\n      return GetGeometry;\n    }()\n  }, {\n    key: \"GetLine\",\n    value: function () {\n      var _GetLine = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee47(modelID, expressID, flatten) {\n        return _regeneratorRuntime.wrap(function _callee47$(_context47) {\n          while (1) {\n            switch (_context47.prev = _context47.next) {\n              case 0:\n                return _context47.abrupt(\"return\", this.handler.request(this.API, WorkerActions.GetLine, {\n                  modelID: modelID,\n                  expressID: expressID,\n                  flatten: flatten\n                }));\n\n              case 1:\n              case \"end\":\n                return _context47.stop();\n            }\n          }\n        }, _callee47, this);\n      }));\n\n      function GetLine(_x87, _x88, _x89) {\n        return _GetLine.apply(this, arguments);\n      }\n\n      return GetLine;\n    }()\n  }, {\n    key: \"GetAndClearErrors\",\n    value: function () {\n      var _GetAndClearErrors = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee48(modelID) {\n        var _this14 = this;\n\n        return _regeneratorRuntime.wrap(function _callee48$(_context48) {\n          while (1) {\n            switch (_context48.prev = _context48.next) {\n              case 0:\n                this.handler.serializeHandlers[this.handler.requestID] = function (vector) {\n                  return _this14.serializer.reconstructVector(vector);\n                };\n\n                return _context48.abrupt(\"return\", this.handler.request(this.API, WorkerActions.GetAndClearErrors, {\n                  modelID: modelID\n                }));\n\n              case 2:\n              case \"end\":\n                return _context48.stop();\n            }\n          }\n        }, _callee48, this);\n      }));\n\n      function GetAndClearErrors(_x90) {\n        return _GetAndClearErrors.apply(this, arguments);\n      }\n\n      return GetAndClearErrors;\n    }()\n  }, {\n    key: \"WriteLine\",\n    value: function () {\n      var _WriteLine = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee49(modelID, lineObject) {\n        return _regeneratorRuntime.wrap(function _callee49$(_context49) {\n          while (1) {\n            switch (_context49.prev = _context49.next) {\n              case 0:\n                return _context49.abrupt(\"return\", this.handler.request(this.API, WorkerActions.WriteLine, {\n                  modelID: modelID,\n                  lineObject: lineObject\n                }));\n\n              case 1:\n              case \"end\":\n                return _context49.stop();\n            }\n          }\n        }, _callee49, this);\n      }));\n\n      function WriteLine(_x91, _x92) {\n        return _WriteLine.apply(this, arguments);\n      }\n\n      return WriteLine;\n    }()\n  }, {\n    key: \"FlattenLine\",\n    value: function () {\n      var _FlattenLine = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee50(modelID, line) {\n        return _regeneratorRuntime.wrap(function _callee50$(_context50) {\n          while (1) {\n            switch (_context50.prev = _context50.next) {\n              case 0:\n                return _context50.abrupt(\"return\", this.handler.request(this.API, WorkerActions.FlattenLine, {\n                  modelID: modelID,\n                  line: line\n                }));\n\n              case 1:\n              case \"end\":\n                return _context50.stop();\n            }\n          }\n        }, _callee50, this);\n      }));\n\n      function FlattenLine(_x93, _x94) {\n        return _FlattenLine.apply(this, arguments);\n      }\n\n      return FlattenLine;\n    }()\n  }, {\n    key: \"GetRawLineData\",\n    value: function () {\n      var _GetRawLineData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee51(modelID, expressID) {\n        return _regeneratorRuntime.wrap(function _callee51$(_context51) {\n          while (1) {\n            switch (_context51.prev = _context51.next) {\n              case 0:\n                return _context51.abrupt(\"return\", this.handler.request(this.API, WorkerActions.GetRawLineData, {\n                  modelID: modelID,\n                  expressID: expressID\n                }));\n\n              case 1:\n              case \"end\":\n                return _context51.stop();\n            }\n          }\n        }, _callee51, this);\n      }));\n\n      function GetRawLineData(_x95, _x96) {\n        return _GetRawLineData.apply(this, arguments);\n      }\n\n      return GetRawLineData;\n    }()\n  }, {\n    key: \"WriteRawLineData\",\n    value: function () {\n      var _WriteRawLineData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee52(modelID, data) {\n        return _regeneratorRuntime.wrap(function _callee52$(_context52) {\n          while (1) {\n            switch (_context52.prev = _context52.next) {\n              case 0:\n                return _context52.abrupt(\"return\", this.handler.request(this.API, WorkerActions.WriteRawLineData, {\n                  modelID: modelID,\n                  data: data\n                }));\n\n              case 1:\n              case \"end\":\n                return _context52.stop();\n            }\n          }\n        }, _callee52, this);\n      }));\n\n      function WriteRawLineData(_x97, _x98) {\n        return _WriteRawLineData.apply(this, arguments);\n      }\n\n      return WriteRawLineData;\n    }()\n  }, {\n    key: \"GetLineIDsWithType\",\n    value: function () {\n      var _GetLineIDsWithType = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee53(modelID, type) {\n        var _this15 = this;\n\n        return _regeneratorRuntime.wrap(function _callee53$(_context53) {\n          while (1) {\n            switch (_context53.prev = _context53.next) {\n              case 0:\n                this.handler.serializeHandlers[this.handler.requestID] = function (vector) {\n                  return _this15.serializer.reconstructVector(vector);\n                };\n\n                return _context53.abrupt(\"return\", this.handler.request(this.API, WorkerActions.GetLineIDsWithType, {\n                  modelID: modelID,\n                  type: type\n                }));\n\n              case 2:\n              case \"end\":\n                return _context53.stop();\n            }\n          }\n        }, _callee53, this);\n      }));\n\n      function GetLineIDsWithType(_x99, _x100) {\n        return _GetLineIDsWithType.apply(this, arguments);\n      }\n\n      return GetLineIDsWithType;\n    }()\n  }, {\n    key: \"GetAllLines\",\n    value: function () {\n      var _GetAllLines = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee54(modelID) {\n        var _this16 = this;\n\n        return _regeneratorRuntime.wrap(function _callee54$(_context54) {\n          while (1) {\n            switch (_context54.prev = _context54.next) {\n              case 0:\n                this.handler.serializeHandlers[this.handler.requestID] = function (vector) {\n                  return _this16.serializer.reconstructVector(vector);\n                };\n\n                return _context54.abrupt(\"return\", this.handler.request(this.API, WorkerActions.GetAllLines, {\n                  modelID: modelID\n                }));\n\n              case 2:\n              case \"end\":\n                return _context54.stop();\n            }\n          }\n        }, _callee54, this);\n      }));\n\n      function GetAllLines(_x101) {\n        return _GetAllLines.apply(this, arguments);\n      }\n\n      return GetAllLines;\n    }()\n  }, {\n    key: \"SetGeometryTransformation\",\n    value: function () {\n      var _SetGeometryTransformation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee55(modelID, transformationMatrix) {\n        return _regeneratorRuntime.wrap(function _callee55$(_context55) {\n          while (1) {\n            switch (_context55.prev = _context55.next) {\n              case 0:\n                return _context55.abrupt(\"return\", this.handler.request(this.API, WorkerActions.SetGeometryTransformation, {\n                  modelID: modelID,\n                  transformationMatrix: transformationMatrix\n                }));\n\n              case 1:\n              case \"end\":\n                return _context55.stop();\n            }\n          }\n        }, _callee55, this);\n      }));\n\n      function SetGeometryTransformation(_x102, _x103) {\n        return _SetGeometryTransformation.apply(this, arguments);\n      }\n\n      return SetGeometryTransformation;\n    }()\n  }, {\n    key: \"GetCoordinationMatrix\",\n    value: function () {\n      var _GetCoordinationMatrix = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee56(modelID) {\n        return _regeneratorRuntime.wrap(function _callee56$(_context56) {\n          while (1) {\n            switch (_context56.prev = _context56.next) {\n              case 0:\n                return _context56.abrupt(\"return\", this.handler.request(this.API, WorkerActions.GetCoordinationMatrix, {\n                  modelID: modelID\n                }));\n\n              case 1:\n              case \"end\":\n                return _context56.stop();\n            }\n          }\n        }, _callee56, this);\n      }));\n\n      function GetCoordinationMatrix(_x104) {\n        return _GetCoordinationMatrix.apply(this, arguments);\n      }\n\n      return GetCoordinationMatrix;\n    }()\n  }, {\n    key: \"GetVertexArray\",\n    value: function () {\n      var _GetVertexArray = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee57(ptr, size) {\n        return _regeneratorRuntime.wrap(function _callee57$(_context57) {\n          while (1) {\n            switch (_context57.prev = _context57.next) {\n              case 0:\n                return _context57.abrupt(\"return\", this.handler.request(this.API, WorkerActions.GetVertexArray, {\n                  ptr: ptr,\n                  size: size\n                }));\n\n              case 1:\n              case \"end\":\n                return _context57.stop();\n            }\n          }\n        }, _callee57, this);\n      }));\n\n      function GetVertexArray(_x105, _x106) {\n        return _GetVertexArray.apply(this, arguments);\n      }\n\n      return GetVertexArray;\n    }()\n  }, {\n    key: \"GetIndexArray\",\n    value: function () {\n      var _GetIndexArray = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee58(ptr, size) {\n        return _regeneratorRuntime.wrap(function _callee58$(_context58) {\n          while (1) {\n            switch (_context58.prev = _context58.next) {\n              case 0:\n                return _context58.abrupt(\"return\", this.handler.request(this.API, WorkerActions.GetIndexArray, {\n                  ptr: ptr,\n                  size: size\n                }));\n\n              case 1:\n              case \"end\":\n                return _context58.stop();\n            }\n          }\n        }, _callee58, this);\n      }));\n\n      function GetIndexArray(_x107, _x108) {\n        return _GetIndexArray.apply(this, arguments);\n      }\n\n      return GetIndexArray;\n    }()\n  }, {\n    key: \"getSubArray\",\n    value: function () {\n      var _getSubArray = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee59(heap, startPtr, sizeBytes) {\n        return _regeneratorRuntime.wrap(function _callee59$(_context59) {\n          while (1) {\n            switch (_context59.prev = _context59.next) {\n              case 0:\n                return _context59.abrupt(\"return\", this.handler.request(this.API, WorkerActions.getSubArray, {\n                  heap: heap,\n                  startPtr: startPtr,\n                  sizeBytes: sizeBytes\n                }));\n\n              case 1:\n              case \"end\":\n                return _context59.stop();\n            }\n          }\n        }, _callee59, this);\n      }));\n\n      function getSubArray(_x109, _x110, _x111) {\n        return _getSubArray.apply(this, arguments);\n      }\n\n      return getSubArray;\n    }()\n  }, {\n    key: \"CloseModel\",\n    value: function () {\n      var _CloseModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee60(modelID) {\n        return _regeneratorRuntime.wrap(function _callee60$(_context60) {\n          while (1) {\n            switch (_context60.prev = _context60.next) {\n              case 0:\n                return _context60.abrupt(\"return\", this.handler.request(this.API, WorkerActions.CloseModel, {\n                  modelID: modelID\n                }));\n\n              case 1:\n              case \"end\":\n                return _context60.stop();\n            }\n          }\n        }, _callee60, this);\n      }));\n\n      function CloseModel(_x112) {\n        return _CloseModel.apply(this, arguments);\n      }\n\n      return CloseModel;\n    }()\n  }, {\n    key: \"StreamAllMeshes\",\n    value: function () {\n      var _StreamAllMeshes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee61(modelID, meshCallback) {\n        return _regeneratorRuntime.wrap(function _callee61$(_context61) {\n          while (1) {\n            switch (_context61.prev = _context61.next) {\n              case 0:\n                this.handler.callbackHandlers[this.handler.requestID] = {\n                  action: meshCallback,\n                  serializer: this.serializer.reconstructFlatMesh\n                };\n                return _context61.abrupt(\"return\", this.handler.request(this.API, WorkerActions.StreamAllMeshes, {\n                  modelID: modelID\n                }));\n\n              case 2:\n              case \"end\":\n                return _context61.stop();\n            }\n          }\n        }, _callee61, this);\n      }));\n\n      function StreamAllMeshes(_x113, _x114) {\n        return _StreamAllMeshes.apply(this, arguments);\n      }\n\n      return StreamAllMeshes;\n    }()\n  }, {\n    key: \"StreamAllMeshesWithTypes\",\n    value: function () {\n      var _StreamAllMeshesWithTypes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee62(modelID, types, meshCallback) {\n        return _regeneratorRuntime.wrap(function _callee62$(_context62) {\n          while (1) {\n            switch (_context62.prev = _context62.next) {\n              case 0:\n                this.handler.callbackHandlers[this.handler.requestID] = {\n                  action: meshCallback,\n                  serializer: this.serializer.reconstructFlatMesh\n                };\n                return _context62.abrupt(\"return\", this.handler.request(this.API, WorkerActions.StreamAllMeshesWithTypes, {\n                  modelID: modelID,\n                  types: types\n                }));\n\n              case 2:\n              case \"end\":\n                return _context62.stop();\n            }\n          }\n        }, _callee62, this);\n      }));\n\n      function StreamAllMeshesWithTypes(_x115, _x116, _x117) {\n        return _StreamAllMeshesWithTypes.apply(this, arguments);\n      }\n\n      return StreamAllMeshesWithTypes;\n    }()\n  }, {\n    key: \"IsModelOpen\",\n    value: function () {\n      var _IsModelOpen = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee63(modelID) {\n        return _regeneratorRuntime.wrap(function _callee63$(_context63) {\n          while (1) {\n            switch (_context63.prev = _context63.next) {\n              case 0:\n                return _context63.abrupt(\"return\", this.handler.request(this.API, WorkerActions.IsModelOpen, {\n                  modelID: modelID\n                }));\n\n              case 1:\n              case \"end\":\n                return _context63.stop();\n            }\n          }\n        }, _callee63, this);\n      }));\n\n      function IsModelOpen(_x118) {\n        return _IsModelOpen.apply(this, arguments);\n      }\n\n      return IsModelOpen;\n    }()\n  }, {\n    key: \"LoadAllGeometry\",\n    value: function () {\n      var _LoadAllGeometry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee64(modelID) {\n        var _this17 = this;\n\n        return _regeneratorRuntime.wrap(function _callee64$(_context64) {\n          while (1) {\n            switch (_context64.prev = _context64.next) {\n              case 0:\n                this.handler.serializeHandlers[this.handler.requestID] = function (vector) {\n                  return _this17.serializer.reconstructFlatMeshVector(vector);\n                };\n\n                return _context64.abrupt(\"return\", this.handler.request(this.API, WorkerActions.LoadAllGeometry, {\n                  modelID: modelID\n                }));\n\n              case 2:\n              case \"end\":\n                return _context64.stop();\n            }\n          }\n        }, _callee64, this);\n      }));\n\n      function LoadAllGeometry(_x119) {\n        return _LoadAllGeometry.apply(this, arguments);\n      }\n\n      return LoadAllGeometry;\n    }()\n  }, {\n    key: \"GetFlatMesh\",\n    value: function () {\n      var _GetFlatMesh = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee65(modelID, expressID) {\n        var _this18 = this;\n\n        return _regeneratorRuntime.wrap(function _callee65$(_context65) {\n          while (1) {\n            switch (_context65.prev = _context65.next) {\n              case 0:\n                this.handler.serializeHandlers[this.handler.requestID] = function (flatMesh) {\n                  return _this18.serializer.reconstructFlatMesh(flatMesh);\n                };\n\n                return _context65.abrupt(\"return\", this.handler.request(this.API, WorkerActions.GetFlatMesh, {\n                  modelID: modelID,\n                  expressID: expressID\n                }));\n\n              case 2:\n              case \"end\":\n                return _context65.stop();\n            }\n          }\n        }, _callee65, this);\n      }));\n\n      function GetFlatMesh(_x120, _x121) {\n        return _GetFlatMesh.apply(this, arguments);\n      }\n\n      return GetFlatMesh;\n    }()\n  }, {\n    key: \"SetWasmPath\",\n    value: function () {\n      var _SetWasmPath = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee66(path) {\n        return _regeneratorRuntime.wrap(function _callee66$(_context66) {\n          while (1) {\n            switch (_context66.prev = _context66.next) {\n              case 0:\n                return _context66.abrupt(\"return\", this.handler.request(this.API, WorkerActions.SetWasmPath, {\n                  path: path\n                }));\n\n              case 1:\n              case \"end\":\n                return _context66.stop();\n            }\n          }\n        }, _callee66, this);\n      }));\n\n      function SetWasmPath(_x122) {\n        return _SetWasmPath.apply(this, arguments);\n      }\n\n      return SetWasmPath;\n    }()\n  }]);\n\n  return WebIfcHandler;\n}();\n\nvar WorkerStateHandler = /*#__PURE__*/function () {\n  function WorkerStateHandler(handler) {\n    _classCallCheck(this, WorkerStateHandler);\n\n    this.handler = handler;\n    this.API = WorkerAPIs.workerState;\n    this.state = this.handler.state;\n  }\n\n  _createClass(WorkerStateHandler, [{\n    key: \"updateStateUseJson\",\n    value: function () {\n      var _updateStateUseJson = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee67() {\n        var useJson;\n        return _regeneratorRuntime.wrap(function _callee67$(_context67) {\n          while (1) {\n            switch (_context67.prev = _context67.next) {\n              case 0:\n                useJson = this.state.useJSON;\n                return _context67.abrupt(\"return\", this.handler.request(this.API, WorkerActions.updateStateUseJson, {\n                  useJson: useJson\n                }));\n\n              case 2:\n              case \"end\":\n                return _context67.stop();\n            }\n          }\n        }, _callee67, this);\n      }));\n\n      function updateStateUseJson() {\n        return _updateStateUseJson.apply(this, arguments);\n      }\n\n      return updateStateUseJson;\n    }()\n  }, {\n    key: \"updateStateWebIfcSettings\",\n    value: function () {\n      var _updateStateWebIfcSettings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee68() {\n        var webIfcSettings;\n        return _regeneratorRuntime.wrap(function _callee68$(_context68) {\n          while (1) {\n            switch (_context68.prev = _context68.next) {\n              case 0:\n                webIfcSettings = this.state.webIfcSettings;\n                return _context68.abrupt(\"return\", this.handler.request(this.API, WorkerActions.updateStateWebIfcSettings, {\n                  webIfcSettings: webIfcSettings\n                }));\n\n              case 2:\n              case \"end\":\n                return _context68.stop();\n            }\n          }\n        }, _callee68, this);\n      }));\n\n      function updateStateWebIfcSettings() {\n        return _updateStateWebIfcSettings.apply(this, arguments);\n      }\n\n      return updateStateWebIfcSettings;\n    }()\n  }, {\n    key: \"updateModelStateTypes\",\n    value: function () {\n      var _updateModelStateTypes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee69(modelID, types) {\n        return _regeneratorRuntime.wrap(function _callee69$(_context69) {\n          while (1) {\n            switch (_context69.prev = _context69.next) {\n              case 0:\n                return _context69.abrupt(\"return\", this.handler.request(this.API, WorkerActions.updateModelStateTypes, {\n                  modelID: modelID,\n                  types: types\n                }));\n\n              case 1:\n              case \"end\":\n                return _context69.stop();\n            }\n          }\n        }, _callee69, this);\n      }));\n\n      function updateModelStateTypes(_x123, _x124) {\n        return _updateModelStateTypes.apply(this, arguments);\n      }\n\n      return updateModelStateTypes;\n    }()\n  }, {\n    key: \"updateModelStateJsonData\",\n    value: function () {\n      var _updateModelStateJsonData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee70(modelID, jsonData) {\n        return _regeneratorRuntime.wrap(function _callee70$(_context70) {\n          while (1) {\n            switch (_context70.prev = _context70.next) {\n              case 0:\n                return _context70.abrupt(\"return\", this.handler.request(this.API, WorkerActions.updateModelStateJsonData, {\n                  modelID: modelID,\n                  jsonData: jsonData\n                }));\n\n              case 1:\n              case \"end\":\n                return _context70.stop();\n            }\n          }\n        }, _callee70, this);\n      }));\n\n      function updateModelStateJsonData(_x125, _x126) {\n        return _updateModelStateJsonData.apply(this, arguments);\n      }\n\n      return updateModelStateJsonData;\n    }()\n  }, {\n    key: \"loadJsonDataFromWorker\",\n    value: function () {\n      var _loadJsonDataFromWorker = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee71(modelID, path) {\n        return _regeneratorRuntime.wrap(function _callee71$(_context71) {\n          while (1) {\n            switch (_context71.prev = _context71.next) {\n              case 0:\n                return _context71.abrupt(\"return\", this.handler.request(this.API, WorkerActions.loadJsonDataFromWorker, {\n                  modelID: modelID,\n                  path: path\n                }));\n\n              case 1:\n              case \"end\":\n                return _context71.stop();\n            }\n          }\n        }, _callee71, this);\n      }));\n\n      function loadJsonDataFromWorker(_x127, _x128) {\n        return _loadJsonDataFromWorker.apply(this, arguments);\n      }\n\n      return loadJsonDataFromWorker;\n    }()\n  }]);\n\n  return WorkerStateHandler;\n}();\n\nvar DBOperation;\n\n(function (DBOperation) {\n  DBOperation[DBOperation[\"transferIfcModel\"] = 0] = \"transferIfcModel\";\n  DBOperation[DBOperation[\"transferIndividualItems\"] = 1] = \"transferIndividualItems\";\n})(DBOperation || (DBOperation = {}));\n\nvar IndexedDatabase = /*#__PURE__*/function () {\n  function IndexedDatabase() {\n    _classCallCheck(this, IndexedDatabase);\n  }\n\n  _createClass(IndexedDatabase, [{\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee72(item, id) {\n        var _this19 = this;\n\n        var open;\n        return _regeneratorRuntime.wrap(function _callee72$(_context72) {\n          while (1) {\n            switch (_context72.prev = _context72.next) {\n              case 0:\n                open = IndexedDatabase.openOrCreateDB(id);\n                this.createSchema(open, id);\n                return _context72.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  open.onsuccess = function () {\n                    return _this19.saveItem(item, open, id, resolve);\n                  };\n                }));\n\n              case 3:\n              case \"end\":\n                return _context72.stop();\n            }\n          }\n        }, _callee72, this);\n      }));\n\n      function save(_x129, _x130) {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }()\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee73(id) {\n        var _this20 = this;\n\n        var open;\n        return _regeneratorRuntime.wrap(function _callee73$(_context73) {\n          while (1) {\n            switch (_context73.prev = _context73.next) {\n              case 0:\n                open = IndexedDatabase.openOrCreateDB(id);\n                return _context73.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  open.onsuccess = function () {\n                    return _this20.loadItem(open, id, resolve);\n                  };\n                }));\n\n              case 2:\n              case \"end\":\n                return _context73.stop();\n            }\n          }\n        }, _callee73);\n      }));\n\n      function load(_x131) {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }, {\n    key: \"createSchema\",\n    value: function createSchema(open, id) {\n      open.onupgradeneeded = function () {\n        var db = open.result;\n        db.createObjectStore(id.toString(), {\n          keyPath: \"id\"\n        });\n      };\n    }\n  }, {\n    key: \"saveItem\",\n    value: function saveItem(item, open, id, resolve) {\n      var _IndexedDatabase$getD = IndexedDatabase.getDBItems(open, id),\n          db = _IndexedDatabase$getD.db,\n          tx = _IndexedDatabase$getD.tx,\n          store = _IndexedDatabase$getD.store;\n\n      item.id = id;\n      store.put(item);\n\n      tx.oncomplete = function () {\n        return IndexedDatabase.closeDB(db, tx, resolve);\n      };\n    }\n  }, {\n    key: \"loadItem\",\n    value: function loadItem(open, id, resolve) {\n      var _IndexedDatabase$getD2 = IndexedDatabase.getDBItems(open, id),\n          db = _IndexedDatabase$getD2.db,\n          tx = _IndexedDatabase$getD2.tx,\n          store = _IndexedDatabase$getD2.store;\n\n      var item = store.get(id);\n\n      var callback = function callback() {\n        delete item.result.id;\n        resolve(item.result);\n      };\n\n      tx.oncomplete = function () {\n        return IndexedDatabase.closeDB(db, tx, callback);\n      };\n    }\n  }], [{\n    key: \"getDBItems\",\n    value: function getDBItems(open, id) {\n      var db = open.result;\n      var tx = db.transaction(id.toString(), \"readwrite\");\n      var store = tx.objectStore(id.toString());\n      return {\n        db: db,\n        tx: tx,\n        store: store\n      };\n    }\n  }, {\n    key: \"openOrCreateDB\",\n    value: function openOrCreateDB(id) {\n      return indexedDB.open(id.toString(), 1);\n    }\n  }, {\n    key: \"closeDB\",\n    value: function closeDB(db, tx, resolve) {\n      db.close();\n      resolve(\"success\");\n    }\n  }]);\n\n  return IndexedDatabase;\n}();\n\nvar ParserHandler = /*#__PURE__*/function () {\n  function ParserHandler(handler, serializer, BVH, IDB) {\n    _classCallCheck(this, ParserHandler);\n\n    this.handler = handler;\n    this.serializer = serializer;\n    this.BVH = BVH;\n    this.IDB = IDB;\n    this.API = WorkerAPIs.parser;\n  }\n\n  _createClass(ParserHandler, [{\n    key: \"setupOptionalCategories\",\n    value: function () {\n      var _setupOptionalCategories2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee74(config) {\n        return _regeneratorRuntime.wrap(function _callee74$(_context74) {\n          while (1) {\n            switch (_context74.prev = _context74.next) {\n              case 0:\n                return _context74.abrupt(\"return\", this.handler.request(this.API, WorkerActions.setupOptionalCategories, {\n                  config: config\n                }));\n\n              case 1:\n              case \"end\":\n                return _context74.stop();\n            }\n          }\n        }, _callee74, this);\n      }));\n\n      function setupOptionalCategories(_x132) {\n        return _setupOptionalCategories2.apply(this, arguments);\n      }\n\n      return setupOptionalCategories;\n    }()\n  }, {\n    key: \"parse\",\n    value: function () {\n      var _parse2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee76(buffer, coordinationMatrix) {\n        var _this21 = this;\n\n        return _regeneratorRuntime.wrap(function _callee76$(_context76) {\n          while (1) {\n            switch (_context76.prev = _context76.next) {\n              case 0:\n                this.handler.onprogressHandlers[this.handler.requestID] = function (progress) {\n                  if (_this21.handler.state.onProgress) _this21.handler.state.onProgress(progress);\n                };\n\n                this.handler.serializeHandlers[this.handler.requestID] = /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee75(result) {\n                    return _regeneratorRuntime.wrap(function _callee75$(_context75) {\n                      while (1) {\n                        switch (_context75.prev = _context75.next) {\n                          case 0:\n                            _this21.updateState(result.modelID);\n\n                            _context75.next = 3;\n                            return _this21.getItems(result.modelID);\n\n                          case 3:\n                            return _context75.abrupt(\"return\", _this21.getModel());\n\n                          case 4:\n                          case \"end\":\n                            return _context75.stop();\n                        }\n                      }\n                    }, _callee75);\n                  }));\n\n                  return function (_x135) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }();\n\n                return _context76.abrupt(\"return\", this.handler.request(this.API, WorkerActions.parse, {\n                  buffer: buffer,\n                  coordinationMatrix: coordinationMatrix\n                }));\n\n              case 3:\n              case \"end\":\n                return _context76.stop();\n            }\n          }\n        }, _callee76, this);\n      }));\n\n      function parse(_x133, _x134) {\n        return _parse2.apply(this, arguments);\n      }\n\n      return parse;\n    }()\n  }, {\n    key: \"getAndClearErrors\",\n    value: function getAndClearErrors(_modelId) {}\n  }, {\n    key: \"updateState\",\n    value: function updateState(modelID) {\n      this.handler.state.models[modelID] = {\n        modelID: modelID,\n        mesh: {},\n        items: {},\n        types: {},\n        jsonData: {}\n      };\n    }\n  }, {\n    key: \"getItems\",\n    value: function () {\n      var _getItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee77(modelID) {\n        var items;\n        return _regeneratorRuntime.wrap(function _callee77$(_context77) {\n          while (1) {\n            switch (_context77.prev = _context77.next) {\n              case 0:\n                _context77.next = 2;\n                return this.IDB.load(DBOperation.transferIndividualItems);\n\n              case 2:\n                items = _context77.sent;\n                this.handler.state.models[modelID].items = this.serializer.reconstructGeometriesByMaterials(items);\n\n              case 4:\n              case \"end\":\n                return _context77.stop();\n            }\n          }\n        }, _callee77, this);\n      }));\n\n      function getItems(_x136) {\n        return _getItems.apply(this, arguments);\n      }\n\n      return getItems;\n    }()\n  }, {\n    key: \"getModel\",\n    value: function () {\n      var _getModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee78() {\n        var serializedModel, model;\n        return _regeneratorRuntime.wrap(function _callee78$(_context78) {\n          while (1) {\n            switch (_context78.prev = _context78.next) {\n              case 0:\n                _context78.next = 2;\n                return this.IDB.load(DBOperation.transferIfcModel);\n\n              case 2:\n                serializedModel = _context78.sent;\n                model = this.serializer.reconstructIfcModel(serializedModel);\n                this.BVH.applyThreeMeshBVH(model.geometry);\n                this.handler.state.models[model.modelID].mesh = model;\n                return _context78.abrupt(\"return\", model);\n\n              case 7:\n              case \"end\":\n                return _context78.stop();\n            }\n          }\n        }, _callee78, this);\n      }));\n\n      function getModel() {\n        return _getModel.apply(this, arguments);\n      }\n\n      return getModel;\n    }()\n  }]);\n\n  return ParserHandler;\n}();\n\nvar IFCWorkerHandler = /*#__PURE__*/function () {\n  function IFCWorkerHandler(state, BVH) {\n    var _this22 = this;\n\n    _classCallCheck(this, IFCWorkerHandler);\n\n    this.state = state;\n    this.BVH = BVH;\n    this.requestID = 0;\n    this.rejectHandlers = {};\n    this.resolveHandlers = {};\n    this.serializeHandlers = {};\n    this.callbackHandlers = {};\n    this.onprogressHandlers = {};\n    this.serializer = new Serializer();\n    this.IDB = new IndexedDatabase();\n    this.workerPath = this.state.worker.path;\n    this.ifcWorker = new Worker(this.workerPath);\n\n    this.ifcWorker.onmessage = function (data) {\n      return _this22.handleResponse(data);\n    };\n\n    this.properties = new PropertyHandler(this);\n    this.parser = new ParserHandler(this, this.serializer, this.BVH, this.IDB);\n    this.webIfc = new WebIfcHandler(this, this.serializer);\n    this.workerState = new WorkerStateHandler(this);\n  }\n\n  _createClass(IFCWorkerHandler, [{\n    key: \"request\",\n    value: function request(worker, action, args) {\n      var _this23 = this;\n\n      var data = {\n        worker: worker,\n        action: action,\n        args: args,\n        id: this.requestID,\n        result: undefined,\n        onProgress: false\n      };\n      return new Promise(function (resolve, reject) {\n        _this23.resolveHandlers[_this23.requestID] = resolve;\n        _this23.rejectHandlers[_this23.requestID] = reject;\n        _this23.requestID++;\n\n        _this23.ifcWorker.postMessage(data);\n      });\n    }\n  }, {\n    key: \"Close\",\n    value: function () {\n      var _Close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee79() {\n        return _regeneratorRuntime.wrap(function _callee79$(_context79) {\n          while (1) {\n            switch (_context79.prev = _context79.next) {\n              case 0:\n                _context79.next = 2;\n                return this.request(WorkerAPIs.webIfc, WorkerActions.Close);\n\n              case 2:\n              case \"end\":\n                return _context79.stop();\n            }\n          }\n        }, _callee79, this);\n      }));\n\n      function Close() {\n        return _Close.apply(this, arguments);\n      }\n\n      return Close;\n    }()\n  }, {\n    key: \"handleResponse\",\n    value: function handleResponse(event) {\n      var data = event.data;\n\n      if (data.onProgress) {\n        this.resolveOnProgress(data);\n        return;\n      }\n\n      this.callHandlers(data);\n      delete this.resolveHandlers[data.id];\n      delete this.rejectHandlers[data.id];\n      delete this.onprogressHandlers[data.id];\n    }\n  }, {\n    key: \"callHandlers\",\n    value: function callHandlers(data) {\n      try {\n        this.resolveSerializations(data);\n        this.resolveCallbacks(data);\n        this.resolveHandlers[data.id](data.result);\n      } catch (error) {\n        this.rejectHandlers[data.id](error);\n      }\n    }\n  }, {\n    key: \"resolveOnProgress\",\n    value: function resolveOnProgress(data) {\n      if (this.onprogressHandlers[data.id]) {\n        data.result = this.onprogressHandlers[data.id](data.result);\n      }\n    }\n  }, {\n    key: \"resolveSerializations\",\n    value: function resolveSerializations(data) {\n      if (this.serializeHandlers[data.id]) {\n        data.result = this.serializeHandlers[data.id](data.result);\n        delete this.serializeHandlers[data.id];\n      }\n    }\n  }, {\n    key: \"resolveCallbacks\",\n    value: function resolveCallbacks(data) {\n      if (this.callbackHandlers[data.id]) {\n        var callbackParameter = data.result;\n\n        if (this.callbackHandlers[data.id].serializer) {\n          callbackParameter = this.callbackHandlers[data.id].serializer(data.result);\n        }\n\n        this.callbackHandlers[data.id].action(callbackParameter);\n      }\n    }\n  }]);\n\n  return IFCWorkerHandler;\n}();\n\nvar IFCManager = /*#__PURE__*/function () {\n  function IFCManager() {\n    _classCallCheck(this, IFCManager);\n\n    this.state = {\n      models: [],\n      api: new WebIFC.IfcAPI(),\n      useJSON: false,\n      worker: {\n        active: false,\n        path: ''\n      }\n    };\n    this.BVH = new BvhManager();\n    this.parser = new IFCParser(this.state, this.BVH);\n    this.subsets = new SubsetManager(this.state, this.BVH);\n    this.properties = new PropertyManager(this.state);\n    this.types = new TypeManager(this.state);\n    this.hider = new ItemsHider(this.state);\n    this.cleaner = new MemoryCleaner(this.state);\n  }\n\n  _createClass(IFCManager, [{\n    key: \"ifcAPI\",\n    get: function get() {\n      return this.state.api;\n    }\n  }, {\n    key: \"parse\",\n    value: function () {\n      var _parse3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee80(buffer) {\n        var _a, model;\n\n        return _regeneratorRuntime.wrap(function _callee80$(_context80) {\n          while (1) {\n            switch (_context80.prev = _context80.next) {\n              case 0:\n                _context80.next = 2;\n                return this.parser.parse(buffer, (_a = this.state.coordinationMatrix) === null || _a === void 0 ? void 0 : _a.toArray());\n\n              case 2:\n                model = _context80.sent;\n                model.setIFCManager(this);\n\n                if (!this.state.useJSON) {\n                  _context80.next = 9;\n                  break;\n                }\n\n                _context80.next = 7;\n                return this.disposeMemory();\n\n              case 7:\n                _context80.next = 11;\n                break;\n\n              case 9:\n                _context80.next = 11;\n                return this.types.getAllTypes(this.worker);\n\n              case 11:\n                this.hider.processCoordinates(model.modelID);\n                return _context80.abrupt(\"return\", model);\n\n              case 13:\n              case \"end\":\n                return _context80.stop();\n            }\n          }\n        }, _callee80, this);\n      }));\n\n      function parse(_x137) {\n        return _parse3.apply(this, arguments);\n      }\n\n      return parse;\n    }()\n  }, {\n    key: \"setWasmPath\",\n    value: function () {\n      var _setWasmPath = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee81(path) {\n        return _regeneratorRuntime.wrap(function _callee81$(_context81) {\n          while (1) {\n            switch (_context81.prev = _context81.next) {\n              case 0:\n                this.state.api.SetWasmPath(path);\n\n              case 1:\n              case \"end\":\n                return _context81.stop();\n            }\n          }\n        }, _callee81, this);\n      }));\n\n      function setWasmPath(_x138) {\n        return _setWasmPath.apply(this, arguments);\n      }\n\n      return setWasmPath;\n    }()\n  }, {\n    key: \"setupThreeMeshBVH\",\n    value: function setupThreeMeshBVH(computeBoundsTree, disposeBoundsTree, acceleratedRaycast) {\n      this.BVH.initializeMeshBVH(computeBoundsTree, disposeBoundsTree, acceleratedRaycast);\n    }\n  }, {\n    key: \"setOnProgress\",\n    value: function setOnProgress(onProgress) {\n      this.state.onProgress = onProgress;\n    }\n  }, {\n    key: \"setupCoordinationMatrix\",\n    value: function setupCoordinationMatrix(matrix) {\n      this.state.coordinationMatrix = matrix;\n    }\n  }, {\n    key: \"clearCoordinationMatrix\",\n    value: function clearCoordinationMatrix() {\n      delete this.state.coordinationMatrix;\n    }\n  }, {\n    key: \"applyWebIfcConfig\",\n    value: function () {\n      var _applyWebIfcConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee82(settings) {\n        return _regeneratorRuntime.wrap(function _callee82$(_context82) {\n          while (1) {\n            switch (_context82.prev = _context82.next) {\n              case 0:\n                this.state.webIfcSettings = settings;\n\n                if (!(this.state.worker.active && this.worker)) {\n                  _context82.next = 4;\n                  break;\n                }\n\n                _context82.next = 4;\n                return this.worker.workerState.updateStateWebIfcSettings();\n\n              case 4:\n              case \"end\":\n                return _context82.stop();\n            }\n          }\n        }, _callee82, this);\n      }));\n\n      function applyWebIfcConfig(_x139) {\n        return _applyWebIfcConfig.apply(this, arguments);\n      }\n\n      return applyWebIfcConfig;\n    }()\n  }, {\n    key: \"useWebWorkers\",\n    value: function () {\n      var _useWebWorkers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee83(active, path) {\n        return _regeneratorRuntime.wrap(function _callee83$(_context83) {\n          while (1) {\n            switch (_context83.prev = _context83.next) {\n              case 0:\n                if (!(this.state.worker.active === active)) {\n                  _context83.next = 2;\n                  break;\n                }\n\n                return _context83.abrupt(\"return\");\n\n              case 2:\n                this.state.api = null;\n\n                if (!active) {\n                  _context83.next = 12;\n                  break;\n                }\n\n                if (path) {\n                  _context83.next = 6;\n                  break;\n                }\n\n                throw new Error('You must provide a path to the web worker.');\n\n              case 6:\n                this.state.worker.active = active;\n                this.state.worker.path = path;\n                _context83.next = 10;\n                return this.initializeWorkers();\n\n              case 10:\n                _context83.next = 13;\n                break;\n\n              case 12:\n                this.state.api = new WebIFC.IfcAPI();\n\n              case 13:\n              case \"end\":\n                return _context83.stop();\n            }\n          }\n        }, _callee83, this);\n      }));\n\n      function useWebWorkers(_x140, _x141) {\n        return _useWebWorkers.apply(this, arguments);\n      }\n\n      return useWebWorkers;\n    }()\n  }, {\n    key: \"useJSONData\",\n    value: function () {\n      var _useJSONData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee84() {\n        var useJSON,\n            _a,\n            _args84 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee84$(_context84) {\n          while (1) {\n            switch (_context84.prev = _context84.next) {\n              case 0:\n                useJSON = _args84.length > 0 && _args84[0] !== undefined ? _args84[0] : true;\n                this.state.useJSON = useJSON;\n\n                if (!useJSON) {\n                  _context84.next = 5;\n                  break;\n                }\n\n                _context84.next = 5;\n                return (_a = this.worker) === null || _a === void 0 ? void 0 : _a.workerState.updateStateUseJson();\n\n              case 5:\n              case \"end\":\n                return _context84.stop();\n            }\n          }\n        }, _callee84, this);\n      }));\n\n      function useJSONData() {\n        return _useJSONData.apply(this, arguments);\n      }\n\n      return useJSONData;\n    }()\n  }, {\n    key: \"addModelJSONData\",\n    value: function () {\n      var _addModelJSONData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee85(modelID, data) {\n        var _a, model;\n\n        return _regeneratorRuntime.wrap(function _callee85$(_context85) {\n          while (1) {\n            switch (_context85.prev = _context85.next) {\n              case 0:\n                model = this.state.models[modelID];\n\n                if (model) {\n                  _context85.next = 3;\n                  break;\n                }\n\n                throw new Error('The specified model for the JSON data does not exist');\n\n              case 3:\n                if (!this.state.worker.active) {\n                  _context85.next = 8;\n                  break;\n                }\n\n                _context85.next = 6;\n                return (_a = this.worker) === null || _a === void 0 ? void 0 : _a.workerState.updateModelStateJsonData(modelID, data);\n\n              case 6:\n                _context85.next = 9;\n                break;\n\n              case 8:\n                model.jsonData = data;\n\n              case 9:\n              case \"end\":\n                return _context85.stop();\n            }\n          }\n        }, _callee85, this);\n      }));\n\n      function addModelJSONData(_x142, _x143) {\n        return _addModelJSONData.apply(this, arguments);\n      }\n\n      return addModelJSONData;\n    }()\n  }, {\n    key: \"loadJsonDataFromWorker\",\n    value: function () {\n      var _loadJsonDataFromWorker2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee86(modelID, path) {\n        var _a;\n\n        return _regeneratorRuntime.wrap(function _callee86$(_context86) {\n          while (1) {\n            switch (_context86.prev = _context86.next) {\n              case 0:\n                if (!this.state.worker.active) {\n                  _context86.next = 3;\n                  break;\n                }\n\n                _context86.next = 3;\n                return (_a = this.worker) === null || _a === void 0 ? void 0 : _a.workerState.loadJsonDataFromWorker(modelID, path);\n\n              case 3:\n              case \"end\":\n                return _context86.stop();\n            }\n          }\n        }, _callee86, this);\n      }));\n\n      function loadJsonDataFromWorker(_x144, _x145) {\n        return _loadJsonDataFromWorker2.apply(this, arguments);\n      }\n\n      return loadJsonDataFromWorker;\n    }()\n  }, {\n    key: \"close\",\n    value: function close(modelID, scene) {\n      this.state.api.CloseModel(modelID);\n      if (scene) scene.remove(this.state.models[modelID].mesh);\n      delete this.state.models[modelID];\n    }\n  }, {\n    key: \"getExpressId\",\n    value: function getExpressId(geometry, faceIndex) {\n      return this.properties.getExpressId(geometry, faceIndex);\n    }\n  }, {\n    key: \"getAllItemsOfType\",\n    value: function getAllItemsOfType(modelID, type, verbose) {\n      return this.properties.getAllItemsOfType(modelID, type, verbose);\n    }\n  }, {\n    key: \"getItemProperties\",\n    value: function getItemProperties(modelID, id) {\n      var recursive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return this.properties.getItemProperties(modelID, id, recursive);\n    }\n  }, {\n    key: \"getPropertySets\",\n    value: function getPropertySets(modelID, id) {\n      var recursive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return this.properties.getPropertySets(modelID, id, recursive);\n    }\n  }, {\n    key: \"getTypeProperties\",\n    value: function getTypeProperties(modelID, id) {\n      var recursive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return this.properties.getTypeProperties(modelID, id, recursive);\n    }\n  }, {\n    key: \"getMaterialsProperties\",\n    value: function getMaterialsProperties(modelID, id) {\n      var recursive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return this.properties.getMaterialsProperties(modelID, id, recursive);\n    }\n  }, {\n    key: \"getIfcType\",\n    value: function getIfcType(modelID, id) {\n      var typeID = this.state.models[modelID].types[id];\n      return IfcElements[typeID];\n    }\n  }, {\n    key: \"getSpatialStructure\",\n    value: function getSpatialStructure(modelID, includeProperties) {\n      return this.properties.getSpatialStructure(modelID, includeProperties);\n    }\n  }, {\n    key: \"getSubset\",\n    value: function getSubset(modelID, material, customId) {\n      return this.subsets.getSubset(modelID, material, customId);\n    }\n  }, {\n    key: \"removeSubset\",\n    value: function removeSubset(modelID, parent, material, customId) {\n      this.subsets.removeSubset(modelID, parent, material, customId);\n    }\n  }, {\n    key: \"createSubset\",\n    value: function createSubset(config) {\n      return this.subsets.createSubset(config);\n    }\n  }, {\n    key: \"hideItems\",\n    value: function hideItems(modelID, ids) {\n      this.hider.hideItems(modelID, ids);\n    }\n  }, {\n    key: \"hideAllItems\",\n    value: function hideAllItems(modelID) {\n      this.hider.hideAllItems(modelID);\n    }\n  }, {\n    key: \"showItems\",\n    value: function showItems(modelID, ids) {\n      this.hider.showItems(modelID, ids);\n    }\n  }, {\n    key: \"showAllItems\",\n    value: function showAllItems(modelID) {\n      this.hider.showAllItems(modelID);\n    }\n  }, {\n    key: \"releaseAllMemory\",\n    value: function releaseAllMemory() {\n      this.subsets.dispose();\n      this.hider.dispose();\n      this.cleaner.releaseAllModels();\n      this.state.api = null;\n      this.state.models = null;\n      this.state = null;\n    }\n  }, {\n    key: \"disposeMemory\",\n    value: function () {\n      var _disposeMemory = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee87() {\n        var _a;\n\n        return _regeneratorRuntime.wrap(function _callee87$(_context87) {\n          while (1) {\n            switch (_context87.prev = _context87.next) {\n              case 0:\n                if (!this.state.worker.active) {\n                  _context87.next = 5;\n                  break;\n                }\n\n                _context87.next = 3;\n                return (_a = this.worker) === null || _a === void 0 ? void 0 : _a.Close();\n\n              case 3:\n                _context87.next = 7;\n                break;\n\n              case 5:\n                this.state.api = null;\n                this.state.api = new WebIFC.IfcAPI();\n\n              case 7:\n              case \"end\":\n                return _context87.stop();\n            }\n          }\n        }, _callee87, this);\n      }));\n\n      function disposeMemory() {\n        return _disposeMemory.apply(this, arguments);\n      }\n\n      return disposeMemory;\n    }()\n  }, {\n    key: \"getAndClearErrors\",\n    value: function getAndClearErrors(modelID) {\n      return this.parser.getAndClearErrors(modelID);\n    }\n  }, {\n    key: \"initializeWorkers\",\n    value: function () {\n      var _initializeWorkers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee88() {\n        return _regeneratorRuntime.wrap(function _callee88$(_context88) {\n          while (1) {\n            switch (_context88.prev = _context88.next) {\n              case 0:\n                this.worker = new IFCWorkerHandler(this.state, this.BVH);\n                this.state.api = this.worker.webIfc;\n                this.properties = this.worker.properties;\n                this.parser = this.worker.parser;\n                _context88.next = 6;\n                return this.worker.workerState.updateStateUseJson();\n\n              case 6:\n                _context88.next = 8;\n                return this.worker.workerState.updateStateWebIfcSettings();\n\n              case 8:\n              case \"end\":\n                return _context88.stop();\n            }\n          }\n        }, _callee88, this);\n      }));\n\n      function initializeWorkers() {\n        return _initializeWorkers.apply(this, arguments);\n      }\n\n      return initializeWorkers;\n    }()\n  }]);\n\n  return IFCManager;\n}();\n\nvar IFCLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(IFCLoader, _Loader);\n\n  var _super4 = _createSuper(IFCLoader);\n\n  function IFCLoader(manager) {\n    var _this24;\n\n    _classCallCheck(this, IFCLoader);\n\n    _this24 = _super4.call(this, manager);\n    _this24.ifcManager = new IFCManager();\n    return _this24;\n  }\n\n  _createClass(IFCLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      this.onProgress = onProgress;\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee89(buffer) {\n          return _regeneratorRuntime.wrap(function _callee89$(_context89) {\n            while (1) {\n              switch (_context89.prev = _context89.next) {\n                case 0:\n                  _context89.prev = 0;\n\n                  if (!(typeof buffer == 'string')) {\n                    _context89.next = 3;\n                    break;\n                  }\n\n                  throw new Error('IFC files must be given as a buffer!');\n\n                case 3:\n                  _context89.t0 = onLoad;\n                  _context89.next = 6;\n                  return scope.parse(buffer);\n\n                case 6:\n                  _context89.t1 = _context89.sent;\n                  (0, _context89.t0)(_context89.t1);\n                  _context89.next = 14;\n                  break;\n\n                case 10:\n                  _context89.prev = 10;\n                  _context89.t2 = _context89[\"catch\"](0);\n\n                  if (onError) {\n                    onError(_context89.t2);\n                  } else {\n                    console.error(_context89.t2);\n                  }\n\n                  scope.manager.itemError(url);\n\n                case 14:\n                case \"end\":\n                  return _context89.stop();\n              }\n            }\n          }, _callee89, null, [[0, 10]]);\n        }));\n\n        return function (_x146) {\n          return _ref3.apply(this, arguments);\n        };\n      }(), onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(buffer) {\n      return this.ifcManager.parse(buffer);\n    }\n  }]);\n\n  return IFCLoader;\n}(Loader);\n\nexport { IFCLoader };","map":{"version":3,"sources":["../src/IFC/BaseDefinitions.ts","../src/IFC/components/IFCModel.ts","../src/IFC/components/IFCParser.ts","../src/IFC/components/SubsetManager.ts","../src/IFC/components/properties/BasePropertyManager.ts","../src/IFC/components/IFCElementsMap.ts","../src/IFC/components/properties/WebIfcPropertyManager.ts","../src/IFC/components/IfcTypesMap.ts","../src/IFC/components/properties/JSONPropertyManager.ts","../src/IFC/components/properties/PropertyManager.ts","../src/IFC/components/TypeManager.ts","../src/IFC/components/BvhManager.ts","../src/IFC/components/ItemsHider.ts","../src/IFC/components/MemoryCleaner.ts","../src/IFC/web-workers/BaseDefinitions.ts","../src/IFC/web-workers/serializer/Vector.ts","../src/IFC/web-workers/serializer/IfcGeometry.ts","../src/IFC/web-workers/serializer/FlatMesh.ts","../src/IFC/web-workers/serializer/FlatMeshVector.ts","../src/IFC/web-workers/serializer/Material.ts","../src/IFC/web-workers/serializer/Geometry.ts","../src/IFC/web-workers/serializer/Mesh.ts","../src/IFC/web-workers/serializer/GeomsByMaterials.ts","../src/IFC/web-workers/serializer/Serializer.ts","../src/IFC/web-workers/handlers/PropertyHandler.ts","../src/IFC/web-workers/handlers/WebIfcHandler.ts","../src/IFC/web-workers/handlers/WorkerStateHandler.ts","../src/IFC/indexedDB/IndexedDatabase.ts","../src/IFC/web-workers/handlers/ParserHandler.ts","../src/IFC/web-workers/IFCWorkerHandler.ts","../src/IFC/components/IFCManager.ts","../src/IFCLoader.ts"],"names":[],"mappings":"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FV,aAAM,mBD8FI;AC7FN,aAAA,gBD6FM;AC5FT,cAAA,wBD4FS;AC1FV,cAAM,iBD0FI;ACzFN,cAAM,+BDyFA;ACxFN,cAAM,+BDwFA;ACvFN,cAAM,WDuFA;ACtFN,cAAM,yBDsFA;ACrFN,cAAM,sBDqFA;ACpFN,cAAA,oBDoFM;ACnFT,cAAA,kBDmFS;ACjFV,cAAM,sBDiFI;AChFN,cAAI,iBDgFE;AC/EN,cAAM,kBD+EA;AC9EN,cAAK,4BD8EC;AC9EiC,cAAA,kBD8EjC;AC7EN,cAAK,cD6EC;AC7EQ,cAAA,SD6ER;AC5EN,cAAM,qBD4EA;AC3EN,cAAK,gBD2EC;AC1EF,cAAA,2BD0EE;ACzEL,cAAA,iBDyEK;ACxEN,cAAA,SDwEM;ACvET,cAAA,sBDuES;ACrED,cAAM,uBDqEL;ACpEN,cAAM,wBDoEA;ACnEN,cAAM,aDmEA;AClEN,cAAK,gBDkEC;ACjEF,cAAA,SDiEE;AChEL,cAAA,yBDgEK;AC/DN,cAAA,mBD+DM;AC9DT,cAAA,eD8DS;AC5DS,cAAA,gBD4DT;AC3DN,cAAM,cD2DA;AC1DN,cAAA,iBD0DM;ACzDT,cAAA,YDyDS;ACvDS,cAAM,cDuDf;ACtDN,cAAM,iCDsDA;ACrDN,cAAK,oBDqDC;ACpDF,cAAA,iBDoDE;ACnDF,cAAA,sBDmDE;AClDL,cAAA,SDkDK;ACjDT,cAAA,oBDiDS;AC/CF,cAAM,mBD+CJ;AC9CN,cAAM,WD8CA;AC7CN,cAAM,qBD6CA;AC5CN,cAAK,WD4CC;AC3CF,cAAA,wBD2CE;AC1CF,cAAA,SD0CE;ACzCF,cAAA,eDyCE;cCzCa,qBDyCb;ACxCL,cAAA,4BDwCK;ACvCN,cAAA,qBDuCM;ACtCT,cAAA,wBDsCS;wBAAA;iCAAA;AErGP,cAAM,sBFqGC;AEpGV,cAAU,qBFoGA;AEnGV,cAAU,UFmGA;AElGV,cAAU,4BFkGA;AEjGV,cAAU,qBFiGA;AEhGV,cAAU,eFgGA;AE/FV,cAAS,YF+FC;AE9FV,cAAU,WF8FA;AE7FV,cAAU,8BF6FA;AE5FV,cAAU,kBF4FA;AE3FV,cAAU,QF2FA;AE1FV,cAAS,gBF0FC;AEzFV,cAAU,sBFyFA;AExFV,cA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U,YAhsBE;AAisBZ,cAAU,YAjsBE;AAksBZ,aAAA,iBAlsBY;AAmsBZ,cAAU,+BAnsBE;AAosBf,cAAA,mBApsBe;2CAAA;ACvGH,cAAA,wBDuGG;ACrGZ,cAAM,6BDqGM;ACpGR,cAAA,iBDoGQ;ACnGX,cAAA,yBDmGW;ACjGZ,cAAM,2BDiGM;AChGR,cAAM,0BDgGE;AC/FR,aAAA,wBD+FQ;AC9FR,cAAM,6BD8FE;AC7FR,aAAA,mBD6FQ;AC5FR,cAAM,mBD4FE;AC3FR,cAAA,mBD2FQ;AC1FX,cAAA,4BD0FW;ACxFZ,aAAM,iBDwFM;ACvFR,cAAM,oBDuFE;ACtFR,cAAM,wBDsFE;ACrFR,cAAK,WDqFG;ACpFJ,aAAA,2BDoFI;ACnFP,cAAA,+BDmFO;AClFR,cAAA,qBDkFQ;ACjFX,aAAA,UDiFW;AC/EH,cAAM,gBD+EH;AC9ER,aAAA,aD8EQ;AC7ER,aAAA,SD6EQ;AC5ER,WAAA,aD4EQ;AC3EJ,cAAA,SD2EI;AC1EP,cAAA,aD0EO;ACzER,cAAA,sBDyEQ;ACxEX,cAAA,aDwEW;ACtEO,aAAA,mBDsEP;ACrER,cAAA,WDqEQ;ACpEX,cAAA,iBDoEW;AClEO,cAAM,qBDkEb;ACjER,cAAM,kBDiEE;AChER,cAAA,sBDgEQ;AC/DJ,cAAA,eD+DI;AC9DP,cAAE,uBD8DK;AC7DX,aAAA,oBD6DW;AC3DJ,cAAA,gBD2DI;AC1DR,cAAM,0BD0DE;ACzDR,cAAM,cDyDE;ACxDJ,cAAA,uBDwDI;ACvDJ,cAAA,4BDuDI;cCtDA,uBDsDA;aCrDH,sBDqDG;ACpDP,cAAE,+BDoDK;ACnDR,cAAA,eDmDQ;AClDX,cAAA,kBDkDW;AChDJ,cAAM,sBDgDF;AC/CR,cAAM,eD+CE;AC9CR,cAAM,eD8CE;AC7CR,aAAK,oBD6CG;AC5CJ,cAAA,kCD4CI;AC3CJ,cAAA,2BD2CI;cC3CW,oBD2CX;AC1CP,cAAE,gBD0CK;ACzCR,cAAA,oBDyCQ;ACxCX,cAAA,6BDwCW;ACtCJ,cAAA,qBDsCI;ACrCR,cAAM,yBDqCE;ACpCR,cAAM,wBDoCE;ACnCR,cAAI,wBDmCI;AClCR,cAAA,iCDkCQ;ACjCX,cAAA,iBDiCW;A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","sourcesContent":["import { BufferAttribute, BufferGeometry, Material, Matrix4, Mesh, Object3D } from 'three';\r\n// TODO: Remove ts ignore comments when @types/three gets updated\r\n// @ts-ignore\r\nimport { mergeBufferGeometries } from 'three/examples/jsm/utils/BufferGeometryUtils';\r\nimport {\r\n    FlatMesh,\r\n    IfcGeometry,\r\n    IFCRELAGGREGATES, IFCRELASSOCIATESMATERIAL,\r\n    IFCRELCONTAINEDINSPATIALSTRUCTURE,\r\n    IFCRELDEFINESBYPROPERTIES,\r\n    IFCRELDEFINESBYTYPE, LoaderError, LoaderSettings, RawLineData, Vector\r\n} from 'web-ifc';\r\nimport {ParserProgress} from \"./components/IFCParser\";\r\n\r\nexport const IdAttrName = 'expressID';\r\n\r\nexport type IdAttributeByMaterial = { [id: number]: number };\r\nexport type IdAttributesByMaterials = { [materialID: string]: IdAttributeByMaterial };\r\n\r\nexport const merge = (geoms: BufferGeometry[], createGroups = false) => {\r\n    // @ts-ignore\r\n    return mergeBufferGeometries(geoms, createGroups);\r\n};\r\n\r\nexport const newFloatAttr = (data: any[], size: number) => {\r\n    return new BufferAttribute(new Float32Array(data), size);\r\n};\r\n\r\nexport const newIntAttr = (data: any[], size: number) => {\r\n    return new BufferAttribute(new Uint32Array(data), size);\r\n};\r\n\r\n//TODO: Rename \"scene\" to \"parent\" in the next major release\r\nexport interface HighlightConfig {\r\n    scene: Object3D;\r\n    ids: number[];\r\n    removePrevious: boolean;\r\n    material?: Material;\r\n    customId?: string;\r\n}\r\n\r\nexport interface HighlightConfigOfModel extends HighlightConfig {\r\n    modelID: number;\r\n}\r\n\r\nexport const DEFAULT = 'default';\r\n\r\nexport type SelectedItems = {\r\n    [matID: string]: { ids: Set<number>; mesh: Mesh };\r\n};\r\n\r\nexport type MapFaceindexID = { [key: number]: number };\r\n\r\nexport type IdGeometries = {\r\n    [expressID: number]: BufferGeometry;\r\n};\r\n\r\nexport type GeometriesByMaterial = {\r\n    material: Material;\r\n    geometries: IdGeometries;\r\n};\r\n\r\nexport interface GeometriesByMaterials {\r\n    [materialID: string]: GeometriesByMaterial;\r\n}\r\n\r\nexport interface TypesMap {\r\n    [key: number]: number;\r\n}\r\n\r\nexport interface IfcModel {\r\n    modelID: number;\r\n    mesh: IfcMesh;\r\n    items: GeometriesByMaterials;\r\n    types: TypesMap;\r\n    jsonData: { [id: number]: JSONObject };\r\n}\r\n\r\nexport interface JSONObject {\r\n    expressID: number;\r\n    type: string;\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface Worker {\r\n    active: boolean;\r\n    path: string;\r\n}\r\n\r\nexport interface IfcState {\r\n    models: { [modelID: number]: IfcModel };\r\n    api: WebIfcAPI;\r\n    useJSON: boolean;\r\n    worker: Worker;\r\n    webIfcSettings?: LoaderSettings;\r\n    onProgress?: (event: ParserProgress) => void;\r\n    coordinationMatrix?: Matrix4\r\n}\r\n\r\nexport interface IfcMesh extends Mesh {\r\n    modelID: number;\r\n}\r\n\r\nexport interface Node {\r\n    expressID: number;\r\n    type: string;\r\n    children: Node[];\r\n}\r\n\r\nexport interface pName {\r\n    name: number;\r\n    relating: string;\r\n    related: string;\r\n    key: string;\r\n}\r\n\r\nexport const PropsNames = {\r\n    aggregates: {\r\n        name: IFCRELAGGREGATES,\r\n        relating: 'RelatingObject',\r\n        related: 'RelatedObjects',\r\n        key: 'children'\r\n    },\r\n    spatial: {\r\n        name: IFCRELCONTAINEDINSPATIALSTRUCTURE,\r\n        relating: 'RelatingStructure',\r\n        related: 'RelatedElements',\r\n        key: 'children'\r\n    },\r\n    psets: {\r\n        name: IFCRELDEFINESBYPROPERTIES,\r\n        relating: 'RelatingPropertyDefinition',\r\n        related: 'RelatedObjects',\r\n        key: 'hasPsets'\r\n    },\r\n    materials: {\r\n        name: IFCRELASSOCIATESMATERIAL,\r\n        relating: 'RelatingMaterial',\r\n        related: 'RelatedObjects',\r\n        key: 'hasMaterial'\r\n    },\r\n    type: {\r\n        name: IFCRELDEFINESBYTYPE,\r\n        relating: 'RelatingType',\r\n        related: 'RelatedObjects',\r\n        key: 'hasType'\r\n    }\r\n};\r\n\r\nexport interface WebIfcAPI {\r\n\r\n    wasmModule: any;\r\n\r\n    Init(): void | Promise<void>;\r\n\r\n    // To close the web worker\r\n    Close?: () => void;\r\n\r\n    /**\r\n     * Opens a model and returns a modelID number\r\n     * @data Buffer containing IFC data (bytes)\r\n     * @data Settings settings for loading the model\r\n     */\r\n    OpenModel(data: string | Uint8Array, settings?: LoaderSettings): number | Promise<number>;\r\n\r\n    /**\r\n     * Creates a new model and returns a modelID number\r\n     * @data Settings settings for generating data the model\r\n     */\r\n    CreateModel(settings?: LoaderSettings): number | Promise<number>;\r\n\r\n    ExportFileAsIFC(modelID: number): Uint8Array | Promise<Uint8Array>;\r\n\r\n    /**\r\n     * Opens a model and returns a modelID number\r\n     * @modelID Model handle retrieved by OpenModel, model must not be closed\r\n     * @data Buffer containing IFC data (bytes)\r\n     */\r\n    GetGeometry(modelID: number, geometryExpressID: number): IfcGeometry | Promise<IfcGeometry>;\r\n\r\n    GetLine(modelID: number, expressID: number, flatten?: boolean):  any | Promise<any>;\r\n\r\n    GetAndClearErrors(modelID: number): Vector<LoaderError> | Promise<Vector<LoaderError>>;\r\n\r\n    WriteLine(modelID: number, lineObject: any): void | Promise<void>;\r\n\r\n    FlattenLine(modelID: number, line: any): void | Promise<void>;\r\n\r\n    GetRawLineData(modelID: number, expressID: number): RawLineData | Promise<RawLineData>;\r\n\r\n    WriteRawLineData(modelID: number, data: RawLineData):  any | Promise<any>;\r\n\r\n    GetLineIDsWithType(modelID: number, type: number): Vector<number> | Promise<Vector<number>>;\r\n\r\n    GetAllLines(modelID: Number): Vector<number> | Promise<Vector<number>>;\r\n\r\n    SetGeometryTransformation(modelID: number, transformationMatrix: Array<number>): void | Promise<void>;\r\n\r\n    GetCoordinationMatrix(modelID: number): Array<number> | Promise<Array<number>>;\r\n\r\n    GetVertexArray(ptr: number, size: number): Float32Array | Promise<Float32Array>;\r\n\r\n    GetIndexArray(ptr: number, size: number): Uint32Array | Promise<Uint32Array>;\r\n\r\n    getSubArray(heap: any, startPtr: any, sizeBytes: any): any | Promise<any>;\r\n\r\n    /**\r\n     * Closes a model and frees all related memory\r\n     * @modelID Model handle retrieved by OpenModel, model must not be closed\r\n     */\r\n    CloseModel(modelID: number): void | Promise<void>;\r\n\r\n    StreamAllMeshes(modelID: number, meshCallback: (mesh: FlatMesh) => void): void | Promise<void>;\r\n\r\n    StreamAllMeshesWithTypes(modelID: number, types: Array<number>, meshCallback: (mesh: FlatMesh) => void): void | Promise<void>;\r\n\r\n    /**\r\n     * Checks if a specific model ID is open or closed\r\n     * @modelID Model handle retrieved by OpenModel\r\n     */\r\n    IsModelOpen(modelID: number): boolean | Promise<boolean>;\r\n\r\n    /**\r\n     * Load all geometry in a model\r\n     * @modelID Model handle retrieved by OpenModel\r\n     */\r\n    LoadAllGeometry(modelID: number): Vector<FlatMesh> | Promise<Vector<FlatMesh>>;\r\n\r\n    /**\r\n     * Load geometry for a single element\r\n     * @modelID Model handle retrieved by OpenModel\r\n     */\r\n    GetFlatMesh(modelID: number, expressID: number): FlatMesh | Promise<FlatMesh>;\r\n\r\n    SetWasmPath(path: string): void | Promise<void>;\r\n}\r\n","import { BufferGeometry, Material, Mesh, Object3D, Scene } from 'three';\r\nimport { IFCManager } from './IFCManager';\r\nimport { HighlightConfig } from '../BaseDefinitions';\r\n\r\nlet modelIdCounter = 0;\r\nconst nullIfcManagerErrorMessage = 'IfcManager is null!';\r\n\r\n/**\r\n * Represents an IFC model. This object is returned by the `IFCLoader` after loading an IFC.\r\n * @geometry `THREE.Buffergeometry`, see Three.js documentation.\r\n * @materials `THREE.Material[]`, see Three.js documentation.\r\n * @manager contains all the logic to work with IFC.\r\n */\r\nexport class IFCModel extends Mesh {\r\n    modelID = modelIdCounter++;\r\n    ifcManager: IFCManager | null = null;\r\n\r\n    /**\r\n     * @deprecated `IfcModel` is already a mesh; you can place it in the scene directly.\r\n     */\r\n    mesh = this;\r\n\r\n    setIFCManager(manager: IFCManager) {\r\n        this.ifcManager = manager;\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.setWasmPath` instead.\r\n     *\r\n     * Sets the relative path of web-ifc.wasm file in the project.\r\n     * Beware: you **must** serve this file in your page; this means\r\n     * that you have to copy this files from *node_modules/web-ifc*\r\n     * to your deployment directory.\r\n     *\r\n     * If you don't use this methods,\r\n     * IFC.js assumes that you are serving it in the root directory.\r\n     *\r\n     * Example if web-ifc.wasm is in dist/wasmDir:\r\n     * `ifcLoader.setWasmPath(\"dist/wasmDir/\");`\r\n     *\r\n     * @path Relative path to web-ifc.wasm.\r\n     */\r\n    setWasmPath(path: string) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        this.ifcManager.setWasmPath(path);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.close` instead.\r\n     *\r\n     * Closes the specified model and deletes it from the [scene](https://threejs.org/docs/#api/en/scenes/Scene).\r\n     * @scene Scene where the model is (if it's located in a scene).\r\n     */\r\n    close(scene?: Scene) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        this.ifcManager.close(this.modelID, scene);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.getExpressId` instead.\r\n     *\r\n     * Gets the **Express ID** to which the given face belongs.\r\n     * This ID uniquely identifies this entity within this IFC file.\r\n     * @geometry The geometry of the IFC model.\r\n     * @faceIndex The index of the face of a geometry.You can easily get this index using the [Raycaster](https://threejs.org/docs/#api/en/core/Raycaster).\r\n     */\r\n    getExpressId(geometry: BufferGeometry, faceIndex: number) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        return this.ifcManager.getExpressId(geometry, faceIndex);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.getAllItemsOfType` instead.\r\n     *\r\n     * Returns all items of the specified type. You can import\r\n     * the types from *web-ifc*.\r\n     *\r\n     * Example to get all the standard walls of a project:\r\n     * ```js\r\n     * import { IFCWALLSTANDARDCASE } from 'web-ifc';\r\n     * const walls = ifcLoader.getAllItemsOfType(IFCWALLSTANDARDCASE);\r\n     * ```\r\n     * @type The type of IFC items to get.\r\n     * @verbose If false (default), this only gets IDs. If true, this also gets the native properties of all the fetched items.\r\n     */\r\n    getAllItemsOfType(type: number, verbose: boolean) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        return this.ifcManager.getAllItemsOfType(this.modelID, type, verbose);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.getItemProperties` instead.\r\n     *\r\n     * Gets the native properties of the given element.\r\n     * @id Express ID of the element.\r\n     * @recursive Wether you want to get the information of the referenced elements recursively.\r\n     */\r\n    getItemProperties(id: number, recursive = false) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        return this.ifcManager.getItemProperties(this.modelID, id, recursive);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.getPropertySets` instead.\r\n     *\r\n     * Gets the [property sets](https://standards.buildingsmart.org/IFC/DEV/IFC4_2/FINAL/HTML/schema/ifckernel/lexical/ifcpropertyset.htm)\r\n     * assigned to the given element.\r\n     * @id Express ID of the element.\r\n     * @recursive If true, this gets the native properties of the referenced elements recursively.\r\n     */\r\n    getPropertySets(id: number, recursive = false) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        return this.ifcManager.getPropertySets(this.modelID, id, recursive);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.getTypeProperties` instead.\r\n     *\r\n     * Gets the properties of the type assigned to the element.\r\n     * For example, if applied to a wall (IfcWall), this would get back the information\r\n     * contained in the IfcWallType assigned to it, if any.\r\n     * @id Express ID of the element.\r\n     * @recursive If true, this gets the native properties of the referenced elements recursively.\r\n     */\r\n    getTypeProperties(id: number, recursive = false) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        return this.ifcManager.getTypeProperties(this.modelID, id, recursive);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.getIfcType` instead.\r\n     *\r\n     * Gets the ifc type of the specified item.\r\n     * @id Express ID of the element.\r\n     */\r\n    getIfcType(id: number) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        return this.ifcManager.getIfcType(this.modelID, id);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.getSpatialStructure` instead.\r\n     *\r\n     * Gets the spatial structure of the project. The\r\n     * [spatial structure](https://standards.buildingsmart.org/IFC/DEV/IFC4_2/FINAL/HTML/schema/ifcproductextension/lexical/ifcspatialstructureelement.htm)\r\n     * is the hierarchical structure that organizes every IFC project (all physical items\r\n     * are referenced to an element of the spatial structure). It is formed by\r\n     * one IfcProject that contains one or more IfcSites, that contain one or more\r\n     * IfcBuildings, that contain one or more IfcBuildingStoreys, that contain\r\n     * one or more IfcSpaces.\r\n     */\r\n    getSpatialStructure() {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        return this.ifcManager.getSpatialStructure(this.modelID);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.getSubset` instead.\r\n     *\r\n     * Gets the mesh of the subset with the specified [material](https://threejs.org/docs/#api/en/materials/Material).\r\n     * If no material is given, this returns the subset with the original materials.\r\n     * @material Material assigned to the subset, if any.\r\n     */\r\n    getSubset(material?: Material) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        return this.ifcManager.getSubset(this.modelID, material);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.removeSubset` instead.\r\n     *\r\n     * Removes the specified subset.\r\n     * @parent The parent where the subset is (can be any `THREE.Object3D`).\r\n     * @material Material assigned to the subset, if any.\r\n     */\r\n    removeSubset(parent?: Object3D, material?: Material) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        this.ifcManager.removeSubset(this.modelID, parent, material);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.createSubset` instead.\r\n     *\r\n     * Creates a new geometric subset.\r\n     * @config A configuration object with the following options:\r\n     * - **scene**: `THREE.Object3D` where the model is located.\r\n     * - **ids**: Express IDs of the items of the model that will conform the subset.\r\n     * - **removePrevious**: Wether to remove the previous subset of this model with this material.\r\n     * - **material**: (optional) Wether to apply a material to the subset\r\n     */\r\n    createSubset(config: HighlightConfig) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        const modelConfig = { ...config, modelID: this.modelID };\r\n        return this.ifcManager.createSubset(modelConfig);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.hideItems` instead.\r\n     *\r\n     * Hides the selected items in the specified model\r\n     * @ids Express ID of the elements.\r\n     */\r\n    hideItems(ids: number[]) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        this.ifcManager.hideItems(this.modelID, ids);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.hideAllItems` instead.\r\n     *\r\n     * Hides all the items of the specified model\r\n     */\r\n    hideAllItems() {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        this.ifcManager.hideAllItems(this.modelID);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.showItems` instead.\r\n     *\r\n     * Hides all the items of the specified model\r\n     * @ids Express ID of the elements.\r\n     */\r\n    showItems(ids: number[]) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        this.ifcManager.showItems(this.modelID, ids);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.showAllItems` instead.\r\n     *\r\n     * Shows all the items of the specified model\r\n     */\r\n    showAllItems() {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        this.ifcManager.showAllItems(this.modelID);\r\n    }\r\n}\r\n","//@ts-ignore\r\nimport { PlacedGeometry, Color as ifcColor, IfcGeometry, IFCSPACE, FlatMesh, IFCOPENINGELEMENT } from 'web-ifc';\r\nimport {\r\n    IfcState,\r\n    IfcMesh,\r\n    IdAttrName,\r\n    merge,\r\n    newFloatAttr,\r\n    newIntAttr\r\n} from '../BaseDefinitions';\r\nimport {\r\n    Color,\r\n    MeshLambertMaterial,\r\n    DoubleSide,\r\n    Matrix4,\r\n    BufferGeometry,\r\n    BufferAttribute,\r\n    Material\r\n} from 'three';\r\nimport {BvhManager} from './BvhManager';\r\nimport {IFCModel} from './IFCModel';\r\n\r\nexport interface ParserProgress {\r\n    loaded: number;\r\n    total: number;\r\n}\r\n\r\nexport interface OptionalCategories {\r\n    [category: number]: boolean\r\n}\r\n\r\nexport interface ParserAPI {\r\n    parse(buffer: any, coordinationMatrix?: number[]): Promise<IFCModel>;\r\n\r\n    getAndClearErrors(_modelId: number): void;\r\n\r\n    setupOptionalCategories(config: OptionalCategories): void;\r\n}\r\n\r\n/**\r\n * Reads all the geometry of the IFC file and generates an optimized `THREE.Mesh`.\r\n */\r\nexport class IFCParser implements ParserAPI {\r\n    loadedModels = 0;\r\n\r\n    optionalCategories: OptionalCategories = {\r\n        [IFCSPACE]: true,\r\n        [IFCOPENINGELEMENT]: false\r\n    }\r\n\r\n    // Represents the index of the model in webIfcAPI\r\n    private currentWebIfcID = -1;\r\n    // When using JSON data for optimization, webIfcAPI is reinitialized every time a model is loaded\r\n    // This means that currentID is always 0, while currentModelID is the real index of stored models\r\n    private currentModelID = -1;\r\n\r\n    // BVH is optional because when using workers we have to apply it in the main thread,\r\n    // once the model has been serialized and reconstructed\r\n    constructor(private state: IfcState, private BVH?: BvhManager) {\r\n    }\r\n\r\n    async setupOptionalCategories(config: OptionalCategories) {\r\n        this.optionalCategories = config;\r\n    }\r\n\r\n    async parse(buffer: any, coordinationMatrix?: number[]) {\r\n        if (this.state.api.wasmModule === undefined) await this.state.api.Init();\r\n        await this.newIfcModel(buffer);\r\n        this.loadedModels++;\r\n        if(coordinationMatrix){\r\n            await this.state.api.SetGeometryTransformation(this.currentWebIfcID, coordinationMatrix);\r\n        }\r\n        return this.loadAllGeometry();\r\n    }\r\n\r\n    getAndClearErrors(_modelId: number) {\r\n        // return this.state.api.GetAndClearErrors(modelId);\r\n    }\r\n\r\n    private notifyProgress(loaded: number, total: number) {\r\n        if (this.state.onProgress) this.state.onProgress({loaded, total});\r\n    }\r\n\r\n    private async newIfcModel(buffer: any) {\r\n        const data = new Uint8Array(buffer);\r\n        this.currentWebIfcID = await this.state.api.OpenModel(data, this.state.webIfcSettings);\r\n        this.currentModelID = this.state.useJSON ? this.loadedModels : this.currentWebIfcID;\r\n        this.state.models[this.currentModelID] = {\r\n            modelID: this.currentModelID,\r\n            mesh: {} as IfcMesh,\r\n            items: {},\r\n            types: {},\r\n            jsonData: {}\r\n        };\r\n    }\r\n\r\n    private async loadAllGeometry() {\r\n        await this.saveAllPlacedGeometriesByMaterial();\r\n        return this.generateAllGeometriesByMaterial();\r\n    }\r\n\r\n    private generateAllGeometriesByMaterial() {\r\n        const {geometry, materials} = this.getGeometryAndMaterials();\r\n        if(this.BVH) this.BVH.applyThreeMeshBVH(geometry);\r\n        const mesh = new IFCModel(geometry, materials);\r\n        mesh.modelID = this.currentModelID;\r\n        this.state.models[this.currentModelID].mesh = mesh;\r\n        return mesh;\r\n    }\r\n\r\n    private getGeometryAndMaterials() {\r\n        const items = this.state.models[this.currentModelID].items;\r\n        const mergedByMaterial: BufferGeometry[] = [];\r\n        const materials: Material[] = [];\r\n        for (let materialID in items) {\r\n            if (items.hasOwnProperty(materialID)) {\r\n                materials.push(items[materialID].material);\r\n                const geometries = Object.values(items[materialID].geometries);\r\n                mergedByMaterial.push(merge(geometries));\r\n            }\r\n        }\r\n        const geometry = merge(mergedByMaterial, true);\r\n        return {geometry, materials};\r\n    }\r\n\r\n    private async saveAllPlacedGeometriesByMaterial() {\r\n\r\n        await this.addOptionalCategories();\r\n\r\n        const flatMeshes = await this.state.api.LoadAllGeometry(this.currentWebIfcID);\r\n        const size = flatMeshes.size();\r\n        let counter = 0;\r\n        for (let i = 0; i < size; i++) {\r\n            if(i > counter) {\r\n                this.notifyProgress(i, size);\r\n                counter += Math.trunc(size / 10);\r\n            }\r\n            const flatMesh = flatMeshes.get(i);\r\n            const placedGeom = flatMesh.geometries;\r\n            for (let j = 0; j < placedGeom.size(); j++) {\r\n                await this.savePlacedGeometry(placedGeom.get(j), flatMesh.expressID);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Temporary: in the future everything will use StreamAllMeshes()\r\n    private async addOptionalCategories() {\r\n\r\n        const optionalTypes: number[] =[];\r\n\r\n        for(let key in this.optionalCategories) {\r\n            if(this.optionalCategories.hasOwnProperty(key)) {\r\n                const category = parseInt(key);\r\n                if(this.optionalCategories[category]) optionalTypes.push(category);\r\n            }\r\n        }\r\n\r\n        await this.state.api.StreamAllMeshesWithTypes(this.currentWebIfcID, optionalTypes, async (mesh: FlatMesh) => {\r\n            const geometries = mesh.geometries;\r\n            const size = geometries.size();\r\n            for (let j = 0; j < size; j++) {\r\n                await this.savePlacedGeometry(geometries.get(j), mesh.expressID);\r\n            }\r\n        });\r\n    }\r\n\r\n    private async savePlacedGeometry(placedGeometry: PlacedGeometry, id: number) {\r\n        const geometry = await this.getGeometry(placedGeometry);\r\n        this.saveGeometryByMaterial(geometry, placedGeometry, id);\r\n    }\r\n\r\n    private async getGeometry(placedGeometry: PlacedGeometry) {\r\n        const geometry = await this.getBufferGeometry(placedGeometry);\r\n        geometry.computeVertexNormals();\r\n        const matrix = IFCParser.getMeshMatrix(placedGeometry.flatTransformation);\r\n        geometry.applyMatrix4(matrix);\r\n        return geometry;\r\n    }\r\n\r\n    private async getBufferGeometry(placed: PlacedGeometry) {\r\n        const geometry = await this.state.api.GetGeometry(this.currentWebIfcID, placed.geometryExpressID);\r\n        const vertexData = await this.getVertices(geometry);\r\n        const indices = await this.getIndices(geometry);\r\n        const {vertices, normals} = IFCParser.extractVertexData(vertexData);\r\n        return IFCParser.ifcGeomToBufferGeom(vertices, normals, indices);\r\n    }\r\n\r\n    private async getVertices(geometry: IfcGeometry) {\r\n        const vData = geometry.GetVertexData();\r\n        const vDataSize = geometry.GetVertexDataSize();\r\n        return this.state.api.GetVertexArray(vData, vDataSize);\r\n    }\r\n\r\n    private async getIndices(geometry: IfcGeometry) {\r\n        const iData = geometry.GetIndexData();\r\n        const iDataSize = geometry.GetIndexDataSize();\r\n        return this.state.api.GetIndexArray(iData, iDataSize);\r\n    }\r\n\r\n    private static getMeshMatrix(matrix: number[]) {\r\n        const mat = new Matrix4();\r\n        mat.fromArray(matrix);\r\n        return mat;\r\n    }\r\n\r\n    private static ifcGeomToBufferGeom(vertices: any[], normals: any[], indexData: any) {\r\n        const geometry = new BufferGeometry();\r\n        geometry.setAttribute('position', newFloatAttr(vertices, 3));\r\n        geometry.setAttribute('normal', newFloatAttr(normals, 3));\r\n        geometry.setIndex(new BufferAttribute(indexData, 1));\r\n        return geometry;\r\n    }\r\n\r\n    private static extractVertexData(vertexData: any) {\r\n        const vertices = [];\r\n        const normals = [];\r\n        let isNormalData = false;\r\n        for (let i = 0; i < vertexData.length; i++) {\r\n            isNormalData ? normals.push(vertexData[i]) : vertices.push(vertexData[i]);\r\n            if ((i + 1) % 3 == 0) isNormalData = !isNormalData;\r\n        }\r\n        return {vertices, normals};\r\n    }\r\n\r\n    private saveGeometryByMaterial(geom: BufferGeometry, placedGeom: PlacedGeometry, id: number) {\r\n        const color = placedGeom.color;\r\n        const colorID = `${color.x}${color.y}${color.z}${color.w}`;\r\n        IFCParser.storeGeometryAttribute(id, geom);\r\n        this.createMaterial(colorID, color);\r\n        const item = this.state.models[this.currentModelID].items[colorID];\r\n        const currentGeom = item.geometries[id];\r\n        if (!currentGeom) return (item.geometries[id] = geom);\r\n        item.geometries[id] = merge([currentGeom, geom]);\r\n    }\r\n\r\n    private static storeGeometryAttribute(id: number, geometry: BufferGeometry) {\r\n        const size = geometry.attributes.position.count;\r\n        const idAttribute = new Array(size).fill(id);\r\n        geometry.setAttribute(IdAttrName, newIntAttr(idAttribute, 1));\r\n    }\r\n\r\n    private createMaterial(colorID: string, color: ifcColor) {\r\n        const items = this.state.models[this.currentModelID].items;\r\n        if (items[colorID]) return;\r\n        const col = new Color(color.x, color.y, color.z);\r\n        const newMaterial = new MeshLambertMaterial({color: col, side: DoubleSide});\r\n        newMaterial.transparent = color.w !== 1;\r\n        if (newMaterial.transparent) newMaterial.opacity = color.w;\r\n        items[colorID] = {material: newMaterial, geometries: {}};\r\n    }\r\n}\r\n","import { BufferGeometry, Material, Mesh, Object3D } from 'three';\r\nimport {\r\n    DEFAULT,\r\n    GeometriesByMaterials,\r\n    HighlightConfigOfModel,\r\n    IdGeometries,\r\n    IfcState,\r\n    merge,\r\n    SelectedItems\r\n} from '../BaseDefinitions';\r\nimport { BvhManager } from './BvhManager';\r\n\r\n\r\n/**\r\n * Contains the logic to get, create and delete geometric subsets of an IFC model. For example,\r\n * this can extract all the items in a specific IfcBuildingStorey and create a new Mesh.\r\n */\r\nexport class SubsetManager {\r\n    private state: IfcState;\r\n    private BVH: BvhManager;\r\n    private selected: SelectedItems = {};\r\n\r\n    constructor(state: IfcState, BVH: BvhManager) {\r\n        this.state = state;\r\n        this.BVH = BVH;\r\n    }\r\n\r\n    dispose() {\r\n        // @ts-ignore\r\n        // this.BVH = null;\r\n        // const items = Object.values(this.selected);\r\n        // items.forEach(item => {\r\n        //     const mesh = item.mesh;\r\n        //     mesh.geometry.dispose();\r\n        //     Array.isArray(mesh.material) ?\r\n        //         mesh.material.forEach(mat => mat.dispose()) :\r\n        //         mesh.material.dispose();\r\n        // });\r\n        // this.selected = {};\r\n    }\r\n\r\n    getSubset(modelID: number, material?: Material, customId?: string) {\r\n        const currentMat = this.matIDNoConfig(modelID, material, customId);\r\n        return this.selected[currentMat].mesh || null;\r\n    }\r\n\r\n    removeSubset(modelID: number, parent?: Object3D, material?: Material, customId?: string) {\r\n        const currentMat = this.matIDNoConfig(modelID, material, customId);\r\n        if (!this.selected[currentMat]) return;\r\n        if (parent) parent.remove(this.selected[currentMat].mesh);\r\n\r\n        // const mesh = this.selected[currentMat].mesh;\r\n        // mesh.geometry.dispose();\r\n        // mesh.geometry = {} as any;\r\n        //\r\n        // if(!Array.isArray(mesh.material)) mesh.material.dispose();\r\n        // else mesh.material.forEach(mat => mat.dispose());\r\n        // mesh.material = {} as any;\r\n\r\n        delete this.selected[currentMat];\r\n    }\r\n\r\n    createSubset(config: HighlightConfigOfModel) {\r\n        this.checkConfigValid(config);\r\n        if (this.isPreviousSelection(config)) return;\r\n        if (this.isEasySelection(config)) return this.addToPreviousSelection(config);\r\n        this.updatePreviousSelection(config.scene, config);\r\n        return this.createSelectionInScene(config);\r\n    }\r\n\r\n    private createSelectionInScene(config: HighlightConfigOfModel) {\r\n        const filtered = this.filter(config);\r\n        const { geomsByMaterial, materials } = this.getGeomAndMat(filtered);\r\n        if (geomsByMaterial.length <= 0) return null;\r\n        const isDefMaterial = this.isDefaultMat(config);\r\n        const geometry = this.getMergedGeometry(geomsByMaterial, isDefMaterial);\r\n        const mats = isDefMaterial ? materials : config.material;\r\n        this.BVH.applyThreeMeshBVH(geometry);\r\n        //@ts-ignore\r\n        const mesh = new Mesh(geometry, mats);\r\n        this.selected[this.matID(config)].mesh = mesh;\r\n        //@ts-ignore\r\n        mesh.modelID = config.modelID;\r\n        config.scene.add(mesh);\r\n        return mesh;\r\n    }\r\n\r\n    private getMergedGeometry(geomsByMaterial: BufferGeometry[], hasDefaultMaterial: boolean) {\r\n        return geomsByMaterial.length > 0\r\n            ? merge(geomsByMaterial, hasDefaultMaterial)\r\n            : new BufferGeometry();\r\n    }\r\n\r\n    private checkConfigValid(config: HighlightConfigOfModel) {\r\n        this.checkValidConfigParam(config.scene);\r\n        this.checkValidConfigParam(config.modelID);\r\n        this.checkValidConfigParam(config.ids);\r\n        this.checkValidConfigParam(config.removePrevious);\r\n        if (config.ids.length <= 0) {\r\n            throw new Error('Error: config parameter ids cannot be empty');\r\n        }\r\n    }\r\n\r\n    private checkValidConfigParam(item: any) {\r\n        if (item === undefined || item === null) throw new Error(`Error with subset config parameter: ${item}`);\r\n    }\r\n\r\n    private getGeomAndMat(filtered: GeometriesByMaterials) {\r\n        const geomsByMaterial: BufferGeometry[] = [];\r\n        const materials: Material[] = [];\r\n        for (let matID in filtered) {\r\n            let geoms = Object.values(filtered[matID].geometries);\r\n            geoms = geoms.filter(geom => Object.values(geom.attributes).length > 0);\r\n            if (!geoms.length) continue;\r\n            materials.push(filtered[matID].material);\r\n            if (geoms.length > 1) geomsByMaterial.push(merge(geoms));\r\n            else geomsByMaterial.push(...geoms);\r\n        }\r\n        return { geomsByMaterial, materials };\r\n    }\r\n\r\n    private updatePreviousSelection(parent: Object3D, config: HighlightConfigOfModel) {\r\n        const previous = this.selected[this.matID(config)];\r\n        if (!previous) return this.newSelectionGroup(config);\r\n        parent.remove(previous.mesh);\r\n        config.removePrevious\r\n            ? (previous.ids = new Set(config.ids))\r\n            : config.ids.forEach((id) => previous.ids.add(id));\r\n    }\r\n\r\n    private newSelectionGroup(config: HighlightConfigOfModel) {\r\n        this.selected[this.matID(config)] = {\r\n            ids: new Set(config.ids),\r\n            mesh: {} as Mesh\r\n        };\r\n    }\r\n\r\n    private isPreviousSelection(config: HighlightConfigOfModel) {\r\n        if (!this.selected[this.matID(config)]) return false;\r\n        if (this.containsIds(config)) return true;\r\n        const previousIds = this.selected[this.matID(config)].ids;\r\n        return JSON.stringify(config.ids) === JSON.stringify(previousIds);\r\n    }\r\n\r\n    private containsIds(config: HighlightConfigOfModel) {\r\n        const newIds = config.ids;\r\n        const previous = Array.from(this.selected[this.matID(config)].ids);\r\n        // prettier-ignore\r\n        //@ts-ignore\r\n        return newIds.every((i => v => (i = previous.indexOf(v, i) + 1))(0));\r\n    }\r\n\r\n    private addToPreviousSelection(config: HighlightConfigOfModel) {\r\n        const previous = this.selected[this.matID(config)];\r\n        const filtered = this.filter(config, new Set(config.ids));\r\n        // @ts-ignore\r\n        // prettier-ignore\r\n        const geometries = Object.values(filtered).map((i) => Object.values(i.geometries)).flat();\r\n        const previousGeom = previous.mesh.geometry;\r\n        previous.mesh.geometry = merge([previousGeom, ...geometries]);\r\n        config.ids.forEach((id) => previous.ids.add(id));\r\n    }\r\n\r\n    private filter(config: HighlightConfigOfModel, itemsID?: Set<number>) {\r\n        const ids = itemsID || this.selected[this.matID(config)].ids;\r\n        const items = this.state.models[config.modelID].items;\r\n        const filtered: GeometriesByMaterials = {};\r\n        for (let matID in items) {\r\n            filtered[matID] = {\r\n                material: items[matID].material,\r\n                geometries: this.filterGeometries(ids, items[matID].geometries)\r\n            };\r\n        }\r\n        return filtered;\r\n    }\r\n\r\n    private filterGeometries(selectedIDs: Set<number>, geometries: IdGeometries) {\r\n        const ids = Array.from(selectedIDs);\r\n        return Object.keys(geometries)\r\n            .filter((key) => ids.includes(parseInt(key, 10)))\r\n            .reduce((obj, key) => {\r\n                //@ts-ignore\r\n                return { ...obj, [key]: geometries[key] };\r\n            }, {});\r\n    }\r\n\r\n    private isEasySelection(config: HighlightConfigOfModel) {\r\n        const matID = this.matID(config);\r\n        if (!config.removePrevious && !this.isDefaultMat(config) && this.selected[matID]) return true;\r\n    }\r\n\r\n    private isDefaultMat(config: HighlightConfigOfModel) {\r\n        const id = this.matIDNoConfig(config.modelID, undefined, config.customId);\r\n        const id2 = this.matID(config);\r\n        return id === id2;\r\n    }\r\n\r\n    private matID(config: HighlightConfigOfModel) {\r\n        let name;\r\n        if (!config.material) name = DEFAULT;\r\n        else name = config.material.uuid;\r\n        name += ' - ' + (config.customId || \"\");\r\n        return name.concat(' - ').concat(config.modelID.toString());\r\n    }\r\n\r\n    private matIDNoConfig(modelID: number, material?: Material, customId = \"\") {\r\n        let name = DEFAULT;\r\n        if (material) name = material.uuid;\r\n        name += ' - ' + customId;\r\n        return name.concat(' - ').concat(modelID.toString());\r\n    }\r\n}\r\n","import { IfcState, pName, PropsNames, Node } from '../../BaseDefinitions';\r\n\r\nexport class BasePropertyManager {\r\n\r\n    constructor(protected state: IfcState) {\r\n    }\r\n\r\n    async getPropertySets(modelID: number, elementID: number, recursive = false) {\r\n        return await this.getProperty(modelID, elementID, recursive, PropsNames.psets);\r\n    }\r\n\r\n    async getTypeProperties(modelID: number, elementID: number, recursive = false) {\r\n        return await this.getProperty(modelID, elementID, recursive, PropsNames.type);\r\n    }\r\n\r\n    async getMaterialsProperties(modelID: number, elementID: number, recursive = false) {\r\n        return await this.getProperty(modelID, elementID, recursive, PropsNames.materials);\r\n    }\r\n\r\n    protected async getSpatialNode(modelID: number, node: Node, treeChunks: any, includeProperties?: boolean) {\r\n        await this.getChildren(modelID, node, treeChunks, PropsNames.aggregates, includeProperties);\r\n        await this.getChildren(modelID, node, treeChunks, PropsNames.spatial, includeProperties);\r\n    }\r\n\r\n    protected async getChildren(modelID: number, node: Node, treeChunks: any, propNames: pName, includeProperties?: boolean) {\r\n        const children = treeChunks[node.expressID];\r\n        if (children == undefined) return;\r\n        const prop = propNames.key as keyof Node;\r\n        const nodes: any[] = [];\r\n        for(let i = 0; i < children.length; i++){\r\n            const child = children[i];\r\n            let node = this.newNode(modelID, child);\r\n            if (includeProperties) {\r\n                const properties = await this.getItemProperties(modelID, node.expressID) as any;\r\n                node = { ...properties, ...node };\r\n            }\r\n            await this.getSpatialNode(modelID, node, treeChunks, includeProperties);\r\n            nodes.push(node);\r\n        }\r\n        (node[prop] as Node[]) = nodes;\r\n    }\r\n\r\n    protected newNode(modelID: number, id: number) {\r\n        const typeName = this.getNodeType(modelID, id);\r\n        return {\r\n            expressID: id,\r\n            type: typeName,\r\n            children: []\r\n        };\r\n    }\r\n\r\n    protected async getSpatialTreeChunks(modelID: number) {\r\n        const treeChunks: any = {};\r\n        await this.getChunks(modelID, treeChunks, PropsNames.aggregates);\r\n        await this.getChunks(modelID, treeChunks, PropsNames.spatial);\r\n        return treeChunks;\r\n    }\r\n\r\n    protected saveChunk(chunks: any, propNames: pName, rel: any) {\r\n        const relating = rel[propNames.relating].value;\r\n        const related = rel[propNames.related].map((r: any) => r.value);\r\n        if (chunks[relating] == undefined) {\r\n            chunks[relating] = related;\r\n        } else {\r\n            chunks[relating] = chunks[relating].concat(related);\r\n        }\r\n    }\r\n\r\n    protected getRelated(rel: any, propNames: pName, IDs: number[]) {\r\n        const element = rel[propNames.relating];\r\n        if (!Array.isArray(element)) IDs.push(element.value);\r\n        else element.forEach((ele) => IDs.push(ele.value));\r\n    }\r\n\r\n    protected static isRelated(id: number, rel: any, propNames: pName) {\r\n        const relatedItems = rel[propNames.related];\r\n        if (Array.isArray(relatedItems)) {\r\n            const values = relatedItems.map((item) => item.value);\r\n            return values.includes(id);\r\n        }\r\n        return relatedItems.value === id;\r\n    }\r\n\r\n    protected static newIfcProject(id: number) {\r\n        return {\r\n            expressID: id,\r\n            type: 'IFCPROJECT',\r\n            children: []\r\n        };\r\n    }\r\n\r\n    async getProperty(modelID: number, elementID: number, recursive = false, propName: pName): Promise<any> {\r\n    }\r\n\r\n    protected async getChunks(modelID: number, chunks: any, propNames: pName): Promise<void> {\r\n    }\r\n\r\n    protected async getItemProperties(modelID: number, expressID: number, recursive = false): Promise<any> {\r\n    }\r\n\r\n    protected getNodeType(modelID: number, id: number): any {\r\n    }\r\n}","export const IfcElements: {[key: number]: string} = {\r\n  103090709: 'IFCPROJECT',\r\n  4097777520: 'IFCSITE',\r\n  4031249490: 'IFCBUILDING',\r\n  3124254112: 'IFCBUILDINGSTOREY',\r\n  3856911033: 'IFCSPACE',\r\n  1674181508: 'IFCANNOTATION',\r\n  25142252: 'IFCCONTROLLER',\r\n  32344328: 'IFCBOILER',\r\n  76236018: 'IFCLAMP',\r\n  90941305: 'IFCPUMP',\r\n  177149247: 'IFCAIRTERMINALBOX',\r\n  182646315: 'IFCFLOWINSTRUMENT',\r\n  263784265: 'IFCFURNISHINGELEMENT',\r\n  264262732: 'IFCELECTRICGENERATOR',\r\n  277319702: 'IFCAUDIOVISUALAPPLIANCE',\r\n  310824031: 'IFCPIPEFITTING',\r\n  331165859: 'IFCSTAIR',\r\n  342316401: 'IFCDUCTFITTING',\r\n  377706215: 'IFCMECHANICALFASTENER',\r\n  395920057: 'IFCDOOR',\r\n  402227799: 'IFCELECTRICMOTOR',\r\n  413509423: 'IFCSYSTEMFURNITUREELEMENT',\r\n  484807127: 'IFCEVAPORATOR',\r\n  486154966: 'IFCWINDOWSTANDARDCASE',\r\n  629592764: 'IFCLIGHTFIXTURE',\r\n  630975310: 'IFCUNITARYCONTROLELEMENT',\r\n  635142910: 'IFCCABLECARRIERFITTING',\r\n  639361253: 'IFCCOIL',\r\n  647756555: 'IFCFASTENER',\r\n  707683696: 'IFCFLOWSTORAGEDEVICE',\r\n  738039164: 'IFCPROTECTIVEDEVICE',\r\n  753842376: 'IFCBEAM',\r\n  812556717: 'IFCTANK',\r\n  819412036: 'IFCFILTER',\r\n  843113511: 'IFCCOLUMN',\r\n  862014818: 'IFCELECTRICDISTRIBUTIONBOARD',\r\n  900683007: 'IFCFOOTING',\r\n  905975707: 'IFCCOLUMNSTANDARDCASE',\r\n  926996030: 'IFCVOIDINGFEATURE',\r\n  979691226: 'IFCREINFORCINGBAR',\r\n  987401354: 'IFCFLOWSEGMENT',\r\n  1003880860: 'IFCELECTRICTIMECONTROL',\r\n  1051757585: 'IFCCABLEFITTING',\r\n  1052013943: 'IFCDISTRIBUTIONCHAMBERELEMENT',\r\n  1062813311: 'IFCDISTRIBUTIONCONTROLELEMENT',\r\n  1073191201: 'IFCMEMBER',\r\n  1095909175: 'IFCBUILDINGELEMENTPROXY',\r\n  1156407060: 'IFCPLATESTANDARDCASE',\r\n  1162798199: 'IFCSWITCHINGDEVICE',\r\n  1329646415: 'IFCSHADINGDEVICE',\r\n  1335981549: 'IFCDISCRETEACCESSORY',\r\n  1360408905: 'IFCDUCTSILENCER',\r\n  1404847402: 'IFCSTACKTERMINAL',\r\n  1426591983: 'IFCFIRESUPPRESSIONTERMINAL',\r\n  1437502449: 'IFCMEDICALDEVICE',\r\n  1509553395: 'IFCFURNITURE',\r\n  1529196076: 'IFCSLAB',\r\n  1620046519: 'IFCTRANSPORTELEMENT',\r\n  1634111441: 'IFCAIRTERMINAL',\r\n  1658829314: 'IFCENERGYCONVERSIONDEVICE',\r\n  1677625105: 'IFCCIVILELEMENT',\r\n  1687234759: 'IFCPILE',\r\n  1904799276: 'IFCELECTRICAPPLIANCE',\r\n  1911478936: 'IFCMEMBERSTANDARDCASE',\r\n  1945004755: 'IFCDISTRIBUTIONELEMENT',\r\n  1973544240: 'IFCCOVERING',\r\n  1999602285: 'IFCSPACEHEATER',\r\n  2016517767: 'IFCROOF',\r\n  2056796094: 'IFCAIRTOAIRHEATRECOVERY',\r\n  2058353004: 'IFCFLOWCONTROLLER',\r\n  2068733104: 'IFCHUMIDIFIER',\r\n  2176052936: 'IFCJUNCTIONBOX',\r\n  2188021234: 'IFCFLOWMETER',\r\n  2223149337: 'IFCFLOWTERMINAL',\r\n  2262370178: 'IFCRAILING',\r\n  2272882330: 'IFCCONDENSER',\r\n  2295281155: 'IFCPROTECTIVEDEVICETRIPPINGUNIT',\r\n  2320036040: 'IFCREINFORCINGMESH',\r\n  2347447852: 'IFCTENDONANCHOR',\r\n  2391383451: 'IFCVIBRATIONISOLATOR',\r\n  2391406946: 'IFCWALL',\r\n  2474470126: 'IFCMOTORCONNECTION',\r\n  2769231204: 'IFCVIRTUALELEMENT',\r\n  2814081492: 'IFCENGINE',\r\n  2906023776: 'IFCBEAMSTANDARDCASE',\r\n  2938176219: 'IFCBURNER',\r\n  2979338954: 'IFCBUILDINGELEMENTPART',\r\n  3024970846: 'IFCRAMP',\r\n  3026737570: 'IFCTUBEBUNDLE',\r\n  3027962421: 'IFCSLABSTANDARDCASE',\r\n  3040386961: 'IFCDISTRIBUTIONFLOWELEMENT',\r\n  3053780830: 'IFCSANITARYTERMINAL',\r\n  3079942009: 'IFCOPENINGSTANDARDCASE',\r\n  3087945054: 'IFCALARM',\r\n  3101698114: 'IFCSURFACEFEATURE',\r\n  3127900445: 'IFCSLABELEMENTEDCASE',\r\n  3132237377: 'IFCFLOWMOVINGDEVICE',\r\n  3171933400: 'IFCPLATE',\r\n  3221913625: 'IFCCOMMUNICATIONSAPPLIANCE',\r\n  3242481149: 'IFCDOORSTANDARDCASE',\r\n  3283111854: 'IFCRAMPFLIGHT',\r\n  3296154744: 'IFCCHIMNEY',\r\n  3304561284: 'IFCWINDOW',\r\n  3310460725: 'IFCELECTRICFLOWSTORAGEDEVICE',\r\n  3319311131: 'IFCHEATEXCHANGER',\r\n  3415622556: 'IFCFAN',\r\n  3420628829: 'IFCSOLARDEVICE',\r\n  3493046030: 'IFCGEOGRAPHICELEMENT',\r\n  3495092785: 'IFCCURTAINWALL',\r\n  3508470533: 'IFCFLOWTREATMENTDEVICE',\r\n  3512223829: 'IFCWALLSTANDARDCASE',\r\n  3518393246: 'IFCDUCTSEGMENT',\r\n  3571504051: 'IFCCOMPRESSOR',\r\n  3588315303: 'IFCOPENINGELEMENT',\r\n  3612865200: 'IFCPIPESEGMENT',\r\n  3640358203: 'IFCCOOLINGTOWER',\r\n  3651124850: 'IFCPROJECTIONELEMENT',\r\n  3694346114: 'IFCOUTLET',\r\n  3747195512: 'IFCEVAPORATIVECOOLER',\r\n  3758799889: 'IFCCABLECARRIERSEGMENT',\r\n  3824725483: 'IFCTENDON',\r\n  3825984169: 'IFCTRANSFORMER',\r\n  3902619387: 'IFCCHILLER',\r\n  4074379575: 'IFCDAMPER',\r\n  4086658281: 'IFCSENSOR',\r\n  4123344466: 'IFCELEMENTASSEMBLY',\r\n  4136498852: 'IFCCOOLEDBEAM',\r\n  4156078855: 'IFCWALLELEMENTEDCASE',\r\n  4175244083: 'IFCINTERCEPTOR',\r\n  4207607924: 'IFCVALVE',\r\n  4217484030: 'IFCCABLESEGMENT',\r\n  4237592921: 'IFCWASTETERMINAL',\r\n  4252922144: 'IFCSTAIRFLIGHT',\r\n  4278956645: 'IFCFLOWFITTING',\r\n  4288193352: 'IFCACTUATOR',\r\n  4292641817: 'IFCUNITARYEQUIPMENT',\r\n  3009204131: 'IFCGRID'\r\n};\r\n","import { BasePropertyManager } from './BasePropertyManager';\r\nimport { IFCPROJECT } from 'web-ifc';\r\nimport { pName } from '../../BaseDefinitions';\r\nimport { PropertyAPI } from './BaseDefinitions';\r\nimport { IfcElements } from '../IFCElementsMap';\r\n\r\nexport class WebIfcPropertyManager extends BasePropertyManager  implements PropertyAPI {\r\n    async getItemProperties(modelID: number, id: number, recursive = false) {\r\n        return this.state.api.GetLine(modelID, id, recursive);\r\n    }\r\n\r\n    async getSpatialStructure(modelID: number, includeProperties?: boolean) {\r\n        const chunks = await this.getSpatialTreeChunks(modelID);\r\n        const allLines = await this.state.api.GetLineIDsWithType(modelID, IFCPROJECT);\r\n        const projectID = allLines.get(0);\r\n        const project = WebIfcPropertyManager.newIfcProject(projectID);\r\n        await this.getSpatialNode(modelID, project, chunks, includeProperties);\r\n        return project;\r\n    }\r\n\r\n    async getAllItemsOfType(modelID: number, type: number, verbose: boolean) {\r\n        let items: number[] = [];\r\n        const lines = await this.state.api.GetLineIDsWithType(modelID, type);\r\n        for (let i = 0; i < lines.size(); i++) items.push(lines.get(i));\r\n        if (!verbose) return items;\r\n        const result: any[] = [];\r\n        for (let i = 0; i < items.length; i++) {\r\n            result.push(await this.state.api.GetLine(modelID, items[i]));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    override async getProperty(modelID: number, elementID: number, recursive = false, propName: pName) {\r\n        const propSetIds = await this.getAllRelatedItemsOfType(modelID, elementID, propName);\r\n        const result: any[] = [];\r\n        for (let i = 0; i < propSetIds.length; i++) {\r\n            result.push(await this.state.api.GetLine(modelID, propSetIds[i], recursive));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    protected override getNodeType(modelID: number, id: number) {\r\n        const typeID = this.state.models[modelID].types[id];\r\n        return IfcElements[typeID];\r\n    }\r\n\r\n    protected override async getChunks(modelID: number, chunks: any, propNames: pName) {\r\n        const relation = await this.state.api.GetLineIDsWithType(modelID, propNames.name);\r\n        for (let i = 0; i < relation.size(); i++) {\r\n            const rel = await this.state.api.GetLine(modelID, relation.get(i), false);\r\n            this.saveChunk(chunks, propNames, rel);\r\n        }\r\n    }\r\n\r\n    private async getAllRelatedItemsOfType(modelID: number, id: number, propNames: pName) {\r\n        const lines = await this.state.api.GetLineIDsWithType(modelID, propNames.name);\r\n        const IDs: number[] = [];\r\n        for (let i = 0; i < lines.size(); i++) {\r\n            const rel = await this.state.api.GetLine(modelID, lines.get(i));\r\n            const isRelated = BasePropertyManager.isRelated(id, rel, propNames);\r\n            if (isRelated) this.getRelated(rel, propNames, IDs);\r\n        }\r\n        return IDs;\r\n    }\r\n}","export const IfcTypesMap:  {[key: number]: string} = {\r\n    3821786052: \"IFCACTIONREQUEST\",\r\n    2296667514: \"IFCACTOR\",\r\n    3630933823: \"IFCACTORROLE\",\r\n    4288193352: \"IFCACTUATOR\",\r\n    2874132201: \"IFCACTUATORTYPE\",\r\n    618182010: \"IFCADDRESS\",\r\n    1635779807: \"IFCADVANCEDBREP\",\r\n    2603310189: \"IFCADVANCEDBREPWITHVOIDS\",\r\n    3406155212: \"IFCADVANCEDFACE\",\r\n    1634111441: \"IFCAIRTERMINAL\",\r\n    177149247: \"IFCAIRTERMINALBOX\",\r\n    1411407467: \"IFCAIRTERMINALBOXTYPE\",\r\n    3352864051: \"IFCAIRTERMINALTYPE\",\r\n    2056796094: \"IFCAIRTOAIRHEATRECOVERY\",\r\n    1871374353: \"IFCAIRTOAIRHEATRECOVERYTYPE\",\r\n    3087945054: \"IFCALARM\",\r\n    3001207471: \"IFCALARMTYPE\",\r\n    325726236: \"IFCALIGNMENT\",\r\n    749761778: \"IFCALIGNMENT2DHORIZONTAL\",\r\n    3199563722: \"IFCALIGNMENT2DHORIZONTALSEGMENT\",\r\n    2483840362: \"IFCALIGNMENT2DSEGMENT\",\r\n    3379348081: \"IFCALIGNMENT2DVERSEGCIRCULARARC\",\r\n    3239324667: \"IFCALIGNMENT2DVERSEGLINE\",\r\n    4263986512: \"IFCALIGNMENT2DVERSEGPARABOLICARC\",\r\n    53199957: \"IFCALIGNMENT2DVERTICAL\",\r\n    2029264950: \"IFCALIGNMENT2DVERTICALSEGMENT\",\r\n    3512275521: \"IFCALIGNMENTCURVE\",\r\n    1674181508: \"IFCANNOTATION\",\r\n    669184980: \"IFCANNOTATIONFILLAREA\",\r\n    639542469: \"IFCAPPLICATION\",\r\n    411424972: \"IFCAPPLIEDVALUE\",\r\n    130549933: \"IFCAPPROVAL\",\r\n    3869604511: \"IFCAPPROVALRELATIONSHIP\",\r\n    3798115385: \"IFCARBITRARYCLOSEDPROFILEDEF\",\r\n    1310608509: \"IFCARBITRARYOPENPROFILEDEF\",\r\n    2705031697: \"IFCARBITRARYPROFILEDEFWITHVOIDS\",\r\n    3460190687: \"IFCASSET\",\r\n    3207858831: \"IFCASYMMETRICISHAPEPROFILEDEF\",\r\n    277319702: \"IFCAUDIOVISUALAPPLIANCE\",\r\n    1532957894: \"IFCAUDIOVISUALAPPLIANCETYPE\",\r\n    4261334040: \"IFCAXIS1PLACEMENT\",\r\n    3125803723: \"IFCAXIS2PLACEMENT2D\",\r\n    2740243338: \"IFCAXIS2PLACEMENT3D\",\r\n    1967976161: \"IFCBSPLINECURVE\",\r\n    2461110595: \"IFCBSPLINECURVEWITHKNOTS\",\r\n    2887950389: \"IFCBSPLINESURFACE\",\r\n    167062518: \"IFCBSPLINESURFACEWITHKNOTS\",\r\n    753842376: \"IFCBEAM\",\r\n    2906023776: \"IFCBEAMSTANDARDCASE\",\r\n    819618141: \"IFCBEAMTYPE\",\r\n    4196446775: \"IFCBEARING\",\r\n    3649138523: \"IFCBEARINGTYPE\",\r\n    616511568: \"IFCBLOBTEXTURE\",\r\n    1334484129: \"IFCBLOCK\",\r\n    32344328: \"IFCBOILER\",\r\n    231477066: \"IFCBOILERTYPE\",\r\n    3649129432: \"IFCBOOLEANCLIPPINGRESULT\",\r\n    2736907675: \"IFCBOOLEANRESULT\",\r\n    4037036970: \"IFCBOUNDARYCONDITION\",\r\n    1136057603: \"IFCBOUNDARYCURVE\",\r\n    1560379544: \"IFCBOUNDARYEDGECONDITION\",\r\n    3367102660: \"IFCBOUNDARYFACECONDITION\",\r\n    1387855156: \"IFCBOUNDARYNODECONDITION\",\r\n    2069777674: \"IFCBOUNDARYNODECONDITIONWARPING\",\r\n    1260505505: \"IFCBOUNDEDCURVE\",\r\n    4182860854: \"IFCBOUNDEDSURFACE\",\r\n    2581212453: \"IFCBOUNDINGBOX\",\r\n    2713105998: \"IFCBOXEDHALFSPACE\",\r\n    644574406: \"IFCBRIDGE\",\r\n    963979645: \"IFCBRIDGEPART\",\r\n    4031249490: \"IFCBUILDING\",\r\n    3299480353: \"IFCBUILDINGELEMENT\",\r\n    2979338954: \"IFCBUILDINGELEMENTPART\",\r\n    39481116: \"IFCBUILDINGELEMENTPARTTYPE\",\r\n    1095909175: \"IFCBUILDINGELEMENTPROXY\",\r\n    1909888760: \"IFCBUILDINGELEMENTPROXYTYPE\",\r\n    1950629157: \"IFCBUILDINGELEMENTTYPE\",\r\n    3124254112: \"IFCBUILDINGSTOREY\",\r\n    1177604601: \"IFCBUILDINGSYSTEM\",\r\n    2938176219: \"IFCBURNER\",\r\n    2188180465: \"IFCBURNERTYPE\",\r\n    2898889636: \"IFCCSHAPEPROFILEDEF\",\r\n    635142910: \"IFCCABLECARRIERFITTING\",\r\n    395041908: \"IFCCABLECARRIERFITTINGTYPE\",\r\n    3758799889: \"IFCCABLECARRIERSEGMENT\",\r\n    3293546465: \"IFCCABLECARRIERSEGMENTTYPE\",\r\n    1051757585: \"IFCCABLEFITTING\",\r\n    2674252688: \"IFCCABLEFITTINGTYPE\",\r\n    4217484030: \"IFCCABLESEGMENT\",\r\n    1285652485: \"IFCCABLESEGMENTTYPE\",\r\n    3999819293: \"IFCCAISSONFOUNDATION\",\r\n    3203706013: \"IFCCAISSONFOUNDATIONTYPE\",\r\n    1123145078: \"IFCCARTESIANPOINT\",\r\n    574549367: \"IFCCARTESIANPOINTLIST\",\r\n    1675464909: \"IFCCARTESIANPOINTLIST2D\",\r\n    2059837836: \"IFCCARTESIANPOINTLIST3D\",\r\n    59481748: \"IFCCARTESIANTRANSFORMATIONOPERATOR\",\r\n    3749851601: \"IFCCARTESIANTRANSFORMATIONOPERATOR2D\",\r\n    3486308946: \"IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM\",\r\n    3331915920: \"IFCCARTESIANTRANSFORMATIONOPERATOR3D\",\r\n    1416205885: \"IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM\",\r\n    3150382593: \"IFCCENTERLINEPROFILEDEF\",\r\n    3902619387: \"IFCCHILLER\",\r\n    2951183804: \"IFCCHILLERTYPE\",\r\n    3296154744: \"IFCCHIMNEY\",\r\n    2197970202: \"IFCCHIMNEYTYPE\",\r\n    2611217952: \"IFCCIRCLE\",\r\n    2937912522: \"IFCCIRCLEHOLLOWPROFILEDEF\",\r\n    1383045692: \"IFCCIRCLEPROFILEDEF\",\r\n    1062206242: \"IFCCIRCULARARCSEGMENT2D\",\r\n    1677625105: \"IFCCIVILELEMENT\",\r\n    3893394355: \"IFCCIVILELEMENTTYPE\",\r\n    747523909: \"IFCCLASSIFICATION\",\r\n    647927063: \"IFCCLASSIFICATIONREFERENCE\",\r\n    2205249479: \"IFCCLOSEDSHELL\",\r\n    639361253: \"IFCCOIL\",\r\n    2301859152: \"IFCCOILTYPE\",\r\n    776857604: \"IFCCOLOURRGB\",\r\n    3285139300: \"IFCCOLOURRGBLIST\",\r\n    3264961684: \"IFCCOLOURSPECIFICATION\",\r\n    843113511: \"IFCCOLUMN\",\r\n    905975707: \"IFCCOLUMNSTANDARDCASE\",\r\n    300633059: \"IFCCOLUMNTYPE\",\r\n    3221913625: \"IFCCOMMUNICATIONSAPPLIANCE\",\r\n    400855858: \"IFCCOMMUNICATIONSAPPLIANCETYPE\",\r\n    2542286263: \"IFCCOMPLEXPROPERTY\",\r\n    3875453745: \"IFCCOMPLEXPROPERTYTEMPLATE\",\r\n    3732776249: \"IFCCOMPOSITECURVE\",\r\n    15328376: \"IFCCOMPOSITECURVEONSURFACE\",\r\n    2485617015: \"IFCCOMPOSITECURVESEGMENT\",\r\n    1485152156: \"IFCCOMPOSITEPROFILEDEF\",\r\n    3571504051: \"IFCCOMPRESSOR\",\r\n    3850581409: \"IFCCOMPRESSORTYPE\",\r\n    2272882330: \"IFCCONDENSER\",\r\n    2816379211: \"IFCCONDENSERTYPE\",\r\n    2510884976: \"IFCCONIC\",\r\n    370225590: \"IFCCONNECTEDFACESET\",\r\n    1981873012: \"IFCCONNECTIONCURVEGEOMETRY\",\r\n    2859738748: \"IFCCONNECTIONGEOMETRY\",\r\n    45288368: \"IFCCONNECTIONPOINTECCENTRICITY\",\r\n    2614616156: \"IFCCONNECTIONPOINTGEOMETRY\",\r\n    2732653382: \"IFCCONNECTIONSURFACEGEOMETRY\",\r\n    775493141: \"IFCCONNECTIONVOLUMEGEOMETRY\",\r\n    1959218052: \"IFCCONSTRAINT\",\r\n    3898045240: \"IFCCONSTRUCTIONEQUIPMENTRESOURCE\",\r\n    2185764099: \"IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE\",\r\n    1060000209: \"IFCCONSTRUCTIONMATERIALRESOURCE\",\r\n    4105962743: \"IFCCONSTRUCTIONMATERIALRESOURCETYPE\",\r\n    488727124: \"IFCCONSTRUCTIONPRODUCTRESOURCE\",\r\n    1525564444: \"IFCCONSTRUCTIONPRODUCTRESOURCETYPE\",\r\n    2559216714: \"IFCCONSTRUCTIONRESOURCE\",\r\n    2574617495: \"IFCCONSTRUCTIONRESOURCETYPE\",\r\n    3419103109: \"IFCCONTEXT\",\r\n    3050246964: \"IFCCONTEXTDEPENDENTUNIT\",\r\n    3293443760: \"IFCCONTROL\",\r\n    25142252: \"IFCCONTROLLER\",\r\n    578613899: \"IFCCONTROLLERTYPE\",\r\n    2889183280: \"IFCCONVERSIONBASEDUNIT\",\r\n    2713554722: \"IFCCONVERSIONBASEDUNITWITHOFFSET\",\r\n    4136498852: \"IFCCOOLEDBEAM\",\r\n    335055490: \"IFCCOOLEDBEAMTYPE\",\r\n    3640358203: \"IFCCOOLINGTOWER\",\r\n    2954562838: \"IFCCOOLINGTOWERTYPE\",\r\n    1785450214: \"IFCCOORDINATEOPERATION\",\r\n    1466758467: \"IFCCOORDINATEREFERENCESYSTEM\",\r\n    3895139033: \"IFCCOSTITEM\",\r\n    1419761937: \"IFCCOSTSCHEDULE\",\r\n    602808272: \"IFCCOSTVALUE\",\r\n    1973544240: \"IFCCOVERING\",\r\n    1916426348: \"IFCCOVERINGTYPE\",\r\n    3295246426: \"IFCCREWRESOURCE\",\r\n    1815067380: \"IFCCREWRESOURCETYPE\",\r\n    2506170314: \"IFCCSGPRIMITIVE3D\",\r\n    2147822146: \"IFCCSGSOLID\",\r\n    539742890: \"IFCCURRENCYRELATIONSHIP\",\r\n    3495092785: \"IFCCURTAINWALL\",\r\n    1457835157: \"IFCCURTAINWALLTYPE\",\r\n    2601014836: \"IFCCURVE\",\r\n    2827736869: \"IFCCURVEBOUNDEDPLANE\",\r\n    2629017746: \"IFCCURVEBOUNDEDSURFACE\",\r\n    1186437898: \"IFCCURVESEGMENT2D\",\r\n    3800577675: \"IFCCURVESTYLE\",\r\n    1105321065: \"IFCCURVESTYLEFONT\",\r\n    2367409068: \"IFCCURVESTYLEFONTANDSCALING\",\r\n    3510044353: \"IFCCURVESTYLEFONTPATTERN\",\r\n    1213902940: \"IFCCYLINDRICALSURFACE\",\r\n    4074379575: \"IFCDAMPER\",\r\n    3961806047: \"IFCDAMPERTYPE\",\r\n    3426335179: \"IFCDEEPFOUNDATION\",\r\n    1306400036: \"IFCDEEPFOUNDATIONTYPE\",\r\n    3632507154: \"IFCDERIVEDPROFILEDEF\",\r\n    1765591967: \"IFCDERIVEDUNIT\",\r\n    1045800335: \"IFCDERIVEDUNITELEMENT\",\r\n    2949456006: \"IFCDIMENSIONALEXPONENTS\",\r\n    32440307: \"IFCDIRECTION\",\r\n    1335981549: \"IFCDISCRETEACCESSORY\",\r\n    2635815018: \"IFCDISCRETEACCESSORYTYPE\",\r\n    1945343521: \"IFCDISTANCEEXPRESSION\",\r\n    1052013943: \"IFCDISTRIBUTIONCHAMBERELEMENT\",\r\n    1599208980: \"IFCDISTRIBUTIONCHAMBERELEMENTTYPE\",\r\n    562808652: \"IFCDISTRIBUTIONCIRCUIT\",\r\n    1062813311: \"IFCDISTRIBUTIONCONTROLELEMENT\",\r\n    2063403501: \"IFCDISTRIBUTIONCONTROLELEMENTTYPE\",\r\n    1945004755: \"IFCDISTRIBUTIONELEMENT\",\r\n    3256556792: \"IFCDISTRIBUTIONELEMENTTYPE\",\r\n    3040386961: \"IFCDISTRIBUTIONFLOWELEMENT\",\r\n    3849074793: \"IFCDISTRIBUTIONFLOWELEMENTTYPE\",\r\n    3041715199: \"IFCDISTRIBUTIONPORT\",\r\n    3205830791: \"IFCDISTRIBUTIONSYSTEM\",\r\n    1154170062: \"IFCDOCUMENTINFORMATION\",\r\n    770865208: \"IFCDOCUMENTINFORMATIONRELATIONSHIP\",\r\n    3732053477: \"IFCDOCUMENTREFERENCE\",\r\n    395920057: \"IFCDOOR\",\r\n    2963535650: \"IFCDOORLININGPROPERTIES\",\r\n    1714330368: \"IFCDOORPANELPROPERTIES\",\r\n    3242481149: \"IFCDOORSTANDARDCASE\",\r\n    526551008: \"IFCDOORSTYLE\",\r\n    2323601079: \"IFCDOORTYPE\",\r\n    445594917: \"IFCDRAUGHTINGPREDEFINEDCOLOUR\",\r\n    4006246654: \"IFCDRAUGHTINGPREDEFINEDCURVEFONT\",\r\n    342316401: \"IFCDUCTFITTING\",\r\n    869906466: \"IFCDUCTFITTINGTYPE\",\r\n    3518393246: \"IFCDUCTSEGMENT\",\r\n    3760055223: \"IFCDUCTSEGMENTTYPE\",\r\n    1360408905: \"IFCDUCTSILENCER\",\r\n    2030761528: \"IFCDUCTSILENCERTYPE\",\r\n    3900360178: \"IFCEDGE\",\r\n    476780140: \"IFCEDGECURVE\",\r\n    1472233963: \"IFCEDGELOOP\",\r\n    1904799276: \"IFCELECTRICAPPLIANCE\",\r\n    663422040: \"IFCELECTRICAPPLIANCETYPE\",\r\n    862014818: \"IFCELECTRICDISTRIBUTIONBOARD\",\r\n    2417008758: \"IFCELECTRICDISTRIBUTIONBOARDTYPE\",\r\n    3310460725: \"IFCELECTRICFLOWSTORAGEDEVICE\",\r\n    3277789161: \"IFCELECTRICFLOWSTORAGEDEVICETYPE\",\r\n    264262732: \"IFCELECTRICGENERATOR\",\r\n    1534661035: \"IFCELECTRICGENERATORTYPE\",\r\n    402227799: \"IFCELECTRICMOTOR\",\r\n    1217240411: \"IFCELECTRICMOTORTYPE\",\r\n    1003880860: \"IFCELECTRICTIMECONTROL\",\r\n    712377611: \"IFCELECTRICTIMECONTROLTYPE\",\r\n    1758889154: \"IFCELEMENT\",\r\n    4123344466: \"IFCELEMENTASSEMBLY\",\r\n    2397081782: \"IFCELEMENTASSEMBLYTYPE\",\r\n    1623761950: \"IFCELEMENTCOMPONENT\",\r\n    2590856083: \"IFCELEMENTCOMPONENTTYPE\",\r\n    1883228015: \"IFCELEMENTQUANTITY\",\r\n    339256511: \"IFCELEMENTTYPE\",\r\n    2777663545: \"IFCELEMENTARYSURFACE\",\r\n    1704287377: \"IFCELLIPSE\",\r\n    2835456948: \"IFCELLIPSEPROFILEDEF\",\r\n    1658829314: \"IFCENERGYCONVERSIONDEVICE\",\r\n    2107101300: \"IFCENERGYCONVERSIONDEVICETYPE\",\r\n    2814081492: \"IFCENGINE\",\r\n    132023988: \"IFCENGINETYPE\",\r\n    3747195512: \"IFCEVAPORATIVECOOLER\",\r\n    3174744832: \"IFCEVAPORATIVECOOLERTYPE\",\r\n    484807127: \"IFCEVAPORATOR\",\r\n    3390157468: \"IFCEVAPORATORTYPE\",\r\n    4148101412: \"IFCEVENT\",\r\n    211053100: \"IFCEVENTTIME\",\r\n    4024345920: \"IFCEVENTTYPE\",\r\n    297599258: \"IFCEXTENDEDPROPERTIES\",\r\n    4294318154: \"IFCEXTERNALINFORMATION\",\r\n    3200245327: \"IFCEXTERNALREFERENCE\",\r\n    1437805879: \"IFCEXTERNALREFERENCERELATIONSHIP\",\r\n    1209101575: \"IFCEXTERNALSPATIALELEMENT\",\r\n    2853485674: \"IFCEXTERNALSPATIALSTRUCTUREELEMENT\",\r\n    2242383968: \"IFCEXTERNALLYDEFINEDHATCHSTYLE\",\r\n    1040185647: \"IFCEXTERNALLYDEFINEDSURFACESTYLE\",\r\n    3548104201: \"IFCEXTERNALLYDEFINEDTEXTFONT\",\r\n    477187591: \"IFCEXTRUDEDAREASOLID\",\r\n    2804161546: \"IFCEXTRUDEDAREASOLIDTAPERED\",\r\n    2556980723: \"IFCFACE\",\r\n    2047409740: \"IFCFACEBASEDSURFACEMODEL\",\r\n    1809719519: \"IFCFACEBOUND\",\r\n    803316827: \"IFCFACEOUTERBOUND\",\r\n    3008276851: \"IFCFACESURFACE\",\r\n    807026263: \"IFCFACETEDBREP\",\r\n    3737207727: \"IFCFACETEDBREPWITHVOIDS\",\r\n    24185140: \"IFCFACILITY\",\r\n    1310830890: \"IFCFACILITYPART\",\r\n    4219587988: \"IFCFAILURECONNECTIONCONDITION\",\r\n    3415622556: \"IFCFAN\",\r\n    346874300: \"IFCFANTYPE\",\r\n    647756555: \"IFCFASTENER\",\r\n    2489546625: \"IFCFASTENERTYPE\",\r\n    2827207264: \"IFCFEATUREELEMENT\",\r\n    2143335405: \"IFCFEATUREELEMENTADDITION\",\r\n    1287392070: \"IFCFEATUREELEMENTSUBTRACTION\",\r\n    738692330: \"IFCFILLAREASTYLE\",\r\n    374418227: \"IFCFILLAREASTYLEHATCHING\",\r\n    315944413: \"IFCFILLAREASTYLETILES\",\r\n    819412036: \"IFCFILTER\",\r\n    1810631287: \"IFCFILTERTYPE\",\r\n    1426591983: \"IFCFIRESUPPRESSIONTERMINAL\",\r\n    4222183408: \"IFCFIRESUPPRESSIONTERMINALTYPE\",\r\n    2652556860: \"IFCFIXEDREFERENCESWEPTAREASOLID\",\r\n    2058353004: \"IFCFLOWCONTROLLER\",\r\n    3907093117: \"IFCFLOWCONTROLLERTYPE\",\r\n    4278956645: \"IFCFLOWFITTING\",\r\n    3198132628: \"IFCFLOWFITTINGTYPE\",\r\n    182646315: \"IFCFLOWINSTRUMENT\",\r\n    4037862832: \"IFCFLOWINSTRUMENTTYPE\",\r\n    2188021234: \"IFCFLOWMETER\",\r\n    3815607619: \"IFCFLOWMETERTYPE\",\r\n    3132237377: \"IFCFLOWMOVINGDEVICE\",\r\n    1482959167: \"IFCFLOWMOVINGDEVICETYPE\",\r\n    987401354: \"IFCFLOWSEGMENT\",\r\n    1834744321: \"IFCFLOWSEGMENTTYPE\",\r\n    707683696: \"IFCFLOWSTORAGEDEVICE\",\r\n    1339347760: \"IFCFLOWSTORAGEDEVICETYPE\",\r\n    2223149337: \"IFCFLOWTERMINAL\",\r\n    2297155007: \"IFCFLOWTERMINALTYPE\",\r\n    3508470533: \"IFCFLOWTREATMENTDEVICE\",\r\n    3009222698: \"IFCFLOWTREATMENTDEVICETYPE\",\r\n    900683007: \"IFCFOOTING\",\r\n    1893162501: \"IFCFOOTINGTYPE\",\r\n    263784265: \"IFCFURNISHINGELEMENT\",\r\n    4238390223: \"IFCFURNISHINGELEMENTTYPE\",\r\n    1509553395: \"IFCFURNITURE\",\r\n    1268542332: \"IFCFURNITURETYPE\",\r\n    3493046030: \"IFCGEOGRAPHICELEMENT\",\r\n    4095422895: \"IFCGEOGRAPHICELEMENTTYPE\",\r\n    987898635: \"IFCGEOMETRICCURVESET\",\r\n    3448662350: \"IFCGEOMETRICREPRESENTATIONCONTEXT\",\r\n    2453401579: \"IFCGEOMETRICREPRESENTATIONITEM\",\r\n    4142052618: \"IFCGEOMETRICREPRESENTATIONSUBCONTEXT\",\r\n    3590301190: \"IFCGEOMETRICSET\",\r\n    3009204131: \"IFCGRID\",\r\n    852622518: \"IFCGRIDAXIS\",\r\n    178086475: \"IFCGRIDPLACEMENT\",\r\n    2706460486: \"IFCGROUP\",\r\n    812098782: \"IFCHALFSPACESOLID\",\r\n    3319311131: \"IFCHEATEXCHANGER\",\r\n    1251058090: \"IFCHEATEXCHANGERTYPE\",\r\n    2068733104: \"IFCHUMIDIFIER\",\r\n    1806887404: \"IFCHUMIDIFIERTYPE\",\r\n    1484403080: \"IFCISHAPEPROFILEDEF\",\r\n    3905492369: \"IFCIMAGETEXTURE\",\r\n    3570813810: \"IFCINDEXEDCOLOURMAP\",\r\n    2571569899: \"IFCINDEXEDPOLYCURVE\",\r\n    178912537: \"IFCINDEXEDPOLYGONALFACE\",\r\n    2294589976: \"IFCINDEXEDPOLYGONALFACEWITHVOIDS\",\r\n    1437953363: \"IFCINDEXEDTEXTUREMAP\",\r\n    2133299955: \"IFCINDEXEDTRIANGLETEXTUREMAP\",\r\n    4175244083: \"IFCINTERCEPTOR\",\r\n    3946677679: \"IFCINTERCEPTORTYPE\",\r\n    3113134337: \"IFCINTERSECTIONCURVE\",\r\n    2391368822: \"IFCINVENTORY\",\r\n    3741457305: \"IFCIRREGULARTIMESERIES\",\r\n    3020489413: \"IFCIRREGULARTIMESERIESVALUE\",\r\n    2176052936: \"IFCJUNCTIONBOX\",\r\n    4288270099: \"IFCJUNCTIONBOXTYPE\",\r\n    572779678: \"IFCLSHAPEPROFILEDEF\",\r\n    3827777499: \"IFCLABORRESOURCE\",\r\n    428585644: \"IFCLABORRESOURCETYPE\",\r\n    1585845231: \"IFCLAGTIME\",\r\n    76236018: \"IFCLAMP\",\r\n    1051575348: \"IFCLAMPTYPE\",\r\n    2655187982: \"IFCLIBRARYINFORMATION\",\r\n    3452421091: \"IFCLIBRARYREFERENCE\",\r\n    4162380809: \"IFCLIGHTDISTRIBUTIONDATA\",\r\n    629592764: \"IFCLIGHTFIXTURE\",\r\n    1161773419: \"IFCLIGHTFIXTURETYPE\",\r\n    1566485204: \"IFCLIGHTINTENSITYDISTRIBUTION\",\r\n    1402838566: \"IFCLIGHTSOURCE\",\r\n    125510826: \"IFCLIGHTSOURCEAMBIENT\",\r\n    2604431987: \"IFCLIGHTSOURCEDIRECTIONAL\",\r\n    4266656042: \"IFCLIGHTSOURCEGONIOMETRIC\",\r\n    1520743889: \"IFCLIGHTSOURCEPOSITIONAL\",\r\n    3422422726: \"IFCLIGHTSOURCESPOT\",\r\n    1281925730: \"IFCLINE\",\r\n    3092502836: \"IFCLINESEGMENT2D\",\r\n    388784114: \"IFCLINEARPLACEMENT\",\r\n    1154579445: \"IFCLINEARPOSITIONINGELEMENT\",\r\n    2624227202: \"IFCLOCALPLACEMENT\",\r\n    1008929658: \"IFCLOOP\",\r\n    1425443689: \"IFCMANIFOLDSOLIDBREP\",\r\n    3057273783: \"IFCMAPCONVERSION\",\r\n    2347385850: \"IFCMAPPEDITEM\",\r\n    1838606355: \"IFCMATERIAL\",\r\n    1847130766: \"IFCMATERIALCLASSIFICATIONRELATIONSHIP\",\r\n    3708119000: \"IFCMATERIALCONSTITUENT\",\r\n    2852063980: \"IFCMATERIALCONSTITUENTSET\",\r\n    760658860: \"IFCMATERIALDEFINITION\",\r\n    2022407955: \"IFCMATERIALDEFINITIONREPRESENTATION\",\r\n    248100487: \"IFCMATERIALLAYER\",\r\n    3303938423: \"IFCMATERIALLAYERSET\",\r\n    1303795690: \"IFCMATERIALLAYERSETUSAGE\",\r\n    1847252529: \"IFCMATERIALLAYERWITHOFFSETS\",\r\n    2199411900: \"IFCMATERIALLIST\",\r\n    2235152071: \"IFCMATERIALPROFILE\",\r\n    164193824: \"IFCMATERIALPROFILESET\",\r\n    3079605661: \"IFCMATERIALPROFILESETUSAGE\",\r\n    3404854881: \"IFCMATERIALPROFILESETUSAGETAPERING\",\r\n    552965576: \"IFCMATERIALPROFILEWITHOFFSETS\",\r\n    3265635763: \"IFCMATERIALPROPERTIES\",\r\n    853536259: \"IFCMATERIALRELATIONSHIP\",\r\n    1507914824: \"IFCMATERIALUSAGEDEFINITION\",\r\n    2597039031: \"IFCMEASUREWITHUNIT\",\r\n    377706215: \"IFCMECHANICALFASTENER\",\r\n    2108223431: \"IFCMECHANICALFASTENERTYPE\",\r\n    1437502449: \"IFCMEDICALDEVICE\",\r\n    1114901282: \"IFCMEDICALDEVICETYPE\",\r\n    1073191201: \"IFCMEMBER\",\r\n    1911478936: \"IFCMEMBERSTANDARDCASE\",\r\n    3181161470: \"IFCMEMBERTYPE\",\r\n    3368373690: \"IFCMETRIC\",\r\n    2998442950: \"IFCMIRROREDPROFILEDEF\",\r\n    2706619895: \"IFCMONETARYUNIT\",\r\n    2474470126: \"IFCMOTORCONNECTION\",\r\n    977012517: \"IFCMOTORCONNECTIONTYPE\",\r\n    1918398963: \"IFCNAMEDUNIT\",\r\n    3888040117: \"IFCOBJECT\",\r\n    219451334: \"IFCOBJECTDEFINITION\",\r\n    3701648758: \"IFCOBJECTPLACEMENT\",\r\n    2251480897: \"IFCOBJECTIVE\",\r\n    4143007308: \"IFCOCCUPANT\",\r\n    590820931: \"IFCOFFSETCURVE\",\r\n    3388369263: \"IFCOFFSETCURVE2D\",\r\n    3505215534: \"IFCOFFSETCURVE3D\",\r\n    2485787929: \"IFCOFFSETCURVEBYDISTANCES\",\r\n    2665983363: \"IFCOPENSHELL\",\r\n    3588315303: \"IFCOPENINGELEMENT\",\r\n    3079942009: \"IFCOPENINGSTANDARDCASE\",\r\n    4251960020: \"IFCORGANIZATION\",\r\n    1411181986: \"IFCORGANIZATIONRELATIONSHIP\",\r\n    643959842: \"IFCORIENTATIONEXPRESSION\",\r\n    1029017970: \"IFCORIENTEDEDGE\",\r\n    144952367: \"IFCOUTERBOUNDARYCURVE\",\r\n    3694346114: \"IFCOUTLET\",\r\n    2837617999: \"IFCOUTLETTYPE\",\r\n    1207048766: \"IFCOWNERHISTORY\",\r\n    2529465313: \"IFCPARAMETERIZEDPROFILEDEF\",\r\n    2519244187: \"IFCPATH\",\r\n    1682466193: \"IFCPCURVE\",\r\n    2382730787: \"IFCPERFORMANCEHISTORY\",\r\n    3566463478: \"IFCPERMEABLECOVERINGPROPERTIES\",\r\n    3327091369: \"IFCPERMIT\",\r\n    2077209135: \"IFCPERSON\",\r\n    101040310: \"IFCPERSONANDORGANIZATION\",\r\n    3021840470: \"IFCPHYSICALCOMPLEXQUANTITY\",\r\n    2483315170: \"IFCPHYSICALQUANTITY\",\r\n    2226359599: \"IFCPHYSICALSIMPLEQUANTITY\",\r\n    1687234759: \"IFCPILE\",\r\n    1158309216: \"IFCPILETYPE\",\r\n    310824031: \"IFCPIPEFITTING\",\r\n    804291784: \"IFCPIPEFITTINGTYPE\",\r\n    3612865200: \"IFCPIPESEGMENT\",\r\n    4231323485: \"IFCPIPESEGMENTTYPE\",\r\n    597895409: \"IFCPIXELTEXTURE\",\r\n    2004835150: \"IFCPLACEMENT\",\r\n    603570806: \"IFCPLANARBOX\",\r\n    1663979128: \"IFCPLANAREXTENT\",\r\n    220341763: \"IFCPLANE\",\r\n    3171933400: \"IFCPLATE\",\r\n    1156407060: \"IFCPLATESTANDARDCASE\",\r\n    4017108033: \"IFCPLATETYPE\",\r\n    2067069095: \"IFCPOINT\",\r\n    4022376103: \"IFCPOINTONCURVE\",\r\n    1423911732: \"IFCPOINTONSURFACE\",\r\n    2924175390: \"IFCPOLYLOOP\",\r\n    2775532180: \"IFCPOLYGONALBOUNDEDHALFSPACE\",\r\n    2839578677: \"IFCPOLYGONALFACESET\",\r\n    3724593414: \"IFCPOLYLINE\",\r\n    3740093272: \"IFCPORT\",\r\n    1946335990: \"IFCPOSITIONINGELEMENT\",\r\n    3355820592: \"IFCPOSTALADDRESS\",\r\n    759155922: \"IFCPREDEFINEDCOLOUR\",\r\n    2559016684: \"IFCPREDEFINEDCURVEFONT\",\r\n    3727388367: \"IFCPREDEFINEDITEM\",\r\n    3778827333: \"IFCPREDEFINEDPROPERTIES\",\r\n    3967405729: \"IFCPREDEFINEDPROPERTYSET\",\r\n    1775413392: \"IFCPREDEFINEDTEXTFONT\",\r\n    677532197: \"IFCPRESENTATIONITEM\",\r\n    2022622350: \"IFCPRESENTATIONLAYERASSIGNMENT\",\r\n    1304840413: \"IFCPRESENTATIONLAYERWITHSTYLE\",\r\n    3119450353: \"IFCPRESENTATIONSTYLE\",\r\n    2417041796: \"IFCPRESENTATIONSTYLEASSIGNMENT\",\r\n    2744685151: \"IFCPROCEDURE\",\r\n    569719735: \"IFCPROCEDURETYPE\",\r\n    2945172077: \"IFCPROCESS\",\r\n    4208778838: \"IFCPRODUCT\",\r\n    673634403: \"IFCPRODUCTDEFINITIONSHAPE\",\r\n    2095639259: \"IFCPRODUCTREPRESENTATION\",\r\n    3958567839: \"IFCPROFILEDEF\",\r\n    2802850158: \"IFCPROFILEPROPERTIES\",\r\n    103090709: \"IFCPROJECT\",\r\n    653396225: \"IFCPROJECTLIBRARY\",\r\n    2904328755: \"IFCPROJECTORDER\",\r\n    3843373140: \"IFCPROJECTEDCRS\",\r\n    3651124850: \"IFCPROJECTIONELEMENT\",\r\n    2598011224: \"IFCPROPERTY\",\r\n    986844984: \"IFCPROPERTYABSTRACTION\",\r\n    871118103: \"IFCPROPERTYBOUNDEDVALUE\",\r\n    1680319473: \"IFCPROPERTYDEFINITION\",\r\n    148025276: \"IFCPROPERTYDEPENDENCYRELATIONSHIP\",\r\n    4166981789: \"IFCPROPERTYENUMERATEDVALUE\",\r\n    3710013099: \"IFCPROPERTYENUMERATION\",\r\n    2752243245: \"IFCPROPERTYLISTVALUE\",\r\n    941946838: \"IFCPROPERTYREFERENCEVALUE\",\r\n    1451395588: \"IFCPROPERTYSET\",\r\n    3357820518: \"IFCPROPERTYSETDEFINITION\",\r\n    492091185: \"IFCPROPERTYSETTEMPLATE\",\r\n    3650150729: \"IFCPROPERTYSINGLEVALUE\",\r\n    110355661: \"IFCPROPERTYTABLEVALUE\",\r\n    3521284610: \"IFCPROPERTYTEMPLATE\",\r\n    1482703590: \"IFCPROPERTYTEMPLATEDEFINITION\",\r\n    738039164: \"IFCPROTECTIVEDEVICE\",\r\n    2295281155: \"IFCPROTECTIVEDEVICETRIPPINGUNIT\",\r\n    655969474: \"IFCPROTECTIVEDEVICETRIPPINGUNITTYPE\",\r\n    1842657554: \"IFCPROTECTIVEDEVICETYPE\",\r\n    3219374653: \"IFCPROXY\",\r\n    90941305: \"IFCPUMP\",\r\n    2250791053: \"IFCPUMPTYPE\",\r\n    2044713172: \"IFCQUANTITYAREA\",\r\n    2093928680: \"IFCQUANTITYCOUNT\",\r\n    931644368: \"IFCQUANTITYLENGTH\",\r\n    2090586900: \"IFCQUANTITYSET\",\r\n    3252649465: \"IFCQUANTITYTIME\",\r\n    2405470396: \"IFCQUANTITYVOLUME\",\r\n    825690147: \"IFCQUANTITYWEIGHT\",\r\n    2262370178: \"IFCRAILING\",\r\n    2893384427: \"IFCRAILINGTYPE\",\r\n    3024970846: \"IFCRAMP\",\r\n    3283111854: \"IFCRAMPFLIGHT\",\r\n    2324767716: \"IFCRAMPFLIGHTTYPE\",\r\n    1469900589: \"IFCRAMPTYPE\",\r\n    1232101972: \"IFCRATIONALBSPLINECURVEWITHKNOTS\",\r\n    683857671: \"IFCRATIONALBSPLINESURFACEWITHKNOTS\",\r\n    2770003689: \"IFCRECTANGLEHOLLOWPROFILEDEF\",\r\n    3615266464: \"IFCRECTANGLEPROFILEDEF\",\r\n    2798486643: \"IFCRECTANGULARPYRAMID\",\r\n    3454111270: \"IFCRECTANGULARTRIMMEDSURFACE\",\r\n    3915482550: \"IFCRECURRENCEPATTERN\",\r\n    2433181523: \"IFCREFERENCE\",\r\n    4021432810: \"IFCREFERENT\",\r\n    3413951693: \"IFCREGULARTIMESERIES\",\r\n    1580146022: \"IFCREINFORCEMENTBARPROPERTIES\",\r\n    3765753017: \"IFCREINFORCEMENTDEFINITIONPROPERTIES\",\r\n    979691226: \"IFCREINFORCINGBAR\",\r\n    2572171363: \"IFCREINFORCINGBARTYPE\",\r\n    3027567501: \"IFCREINFORCINGELEMENT\",\r\n    964333572: \"IFCREINFORCINGELEMENTTYPE\",\r\n    2320036040: \"IFCREINFORCINGMESH\",\r\n    2310774935: \"IFCREINFORCINGMESHTYPE\",\r\n    160246688: \"IFCRELAGGREGATES\",\r\n    3939117080: \"IFCRELASSIGNS\",\r\n    1683148259: \"IFCRELASSIGNSTOACTOR\",\r\n    2495723537: \"IFCRELASSIGNSTOCONTROL\",\r\n    1307041759: \"IFCRELASSIGNSTOGROUP\",\r\n    1027710054: \"IFCRELASSIGNSTOGROUPBYFACTOR\",\r\n    4278684876: \"IFCRELASSIGNSTOPROCESS\",\r\n    2857406711: \"IFCRELASSIGNSTOPRODUCT\",\r\n    205026976: \"IFCRELASSIGNSTORESOURCE\",\r\n    1865459582: \"IFCRELASSOCIATES\",\r\n    4095574036: \"IFCRELASSOCIATESAPPROVAL\",\r\n    919958153: \"IFCRELASSOCIATESCLASSIFICATION\",\r\n    2728634034: \"IFCRELASSOCIATESCONSTRAINT\",\r\n    982818633: \"IFCRELASSOCIATESDOCUMENT\",\r\n    3840914261: \"IFCRELASSOCIATESLIBRARY\",\r\n    2655215786: \"IFCRELASSOCIATESMATERIAL\",\r\n    826625072: \"IFCRELCONNECTS\",\r\n    1204542856: \"IFCRELCONNECTSELEMENTS\",\r\n    3945020480: \"IFCRELCONNECTSPATHELEMENTS\",\r\n    4201705270: \"IFCRELCONNECTSPORTTOELEMENT\",\r\n    3190031847: \"IFCRELCONNECTSPORTS\",\r\n    2127690289: \"IFCRELCONNECTSSTRUCTURALACTIVITY\",\r\n    1638771189: \"IFCRELCONNECTSSTRUCTURALMEMBER\",\r\n    504942748: \"IFCRELCONNECTSWITHECCENTRICITY\",\r\n    3678494232: \"IFCRELCONNECTSWITHREALIZINGELEMENTS\",\r\n    3242617779: \"IFCRELCONTAINEDINSPATIALSTRUCTURE\",\r\n    886880790: \"IFCRELCOVERSBLDGELEMENTS\",\r\n    2802773753: \"IFCRELCOVERSSPACES\",\r\n    2565941209: \"IFCRELDECLARES\",\r\n    2551354335: \"IFCRELDECOMPOSES\",\r\n    693640335: \"IFCRELDEFINES\",\r\n    1462361463: \"IFCRELDEFINESBYOBJECT\",\r\n    4186316022: \"IFCRELDEFINESBYPROPERTIES\",\r\n    307848117: \"IFCRELDEFINESBYTEMPLATE\",\r\n    781010003: \"IFCRELDEFINESBYTYPE\",\r\n    3940055652: \"IFCRELFILLSELEMENT\",\r\n    279856033: \"IFCRELFLOWCONTROLELEMENTS\",\r\n    427948657: \"IFCRELINTERFERESELEMENTS\",\r\n    3268803585: \"IFCRELNESTS\",\r\n    1441486842: \"IFCRELPOSITIONS\",\r\n    750771296: \"IFCRELPROJECTSELEMENT\",\r\n    1245217292: \"IFCRELREFERENCEDINSPATIALSTRUCTURE\",\r\n    4122056220: \"IFCRELSEQUENCE\",\r\n    366585022: \"IFCRELSERVICESBUILDINGS\",\r\n    3451746338: \"IFCRELSPACEBOUNDARY\",\r\n    3523091289: \"IFCRELSPACEBOUNDARY1STLEVEL\",\r\n    1521410863: \"IFCRELSPACEBOUNDARY2NDLEVEL\",\r\n    1401173127: \"IFCRELVOIDSELEMENT\",\r\n    478536968: \"IFCRELATIONSHIP\",\r\n    816062949: \"IFCREPARAMETRISEDCOMPOSITECURVESEGMENT\",\r\n    1076942058: \"IFCREPRESENTATION\",\r\n    3377609919: \"IFCREPRESENTATIONCONTEXT\",\r\n    3008791417: \"IFCREPRESENTATIONITEM\",\r\n    1660063152: \"IFCREPRESENTATIONMAP\",\r\n    2914609552: \"IFCRESOURCE\",\r\n    2943643501: \"IFCRESOURCEAPPROVALRELATIONSHIP\",\r\n    1608871552: \"IFCRESOURCECONSTRAINTRELATIONSHIP\",\r\n    2439245199: \"IFCRESOURCELEVELRELATIONSHIP\",\r\n    1042787934: \"IFCRESOURCETIME\",\r\n    1856042241: \"IFCREVOLVEDAREASOLID\",\r\n    3243963512: \"IFCREVOLVEDAREASOLIDTAPERED\",\r\n    4158566097: \"IFCRIGHTCIRCULARCONE\",\r\n    3626867408: \"IFCRIGHTCIRCULARCYLINDER\",\r\n    2016517767: \"IFCROOF\",\r\n    2781568857: \"IFCROOFTYPE\",\r\n    2341007311: \"IFCROOT\",\r\n    2778083089: \"IFCROUNDEDRECTANGLEPROFILEDEF\",\r\n    448429030: \"IFCSIUNIT\",\r\n    3053780830: \"IFCSANITARYTERMINAL\",\r\n    1768891740: \"IFCSANITARYTERMINALTYPE\",\r\n    1054537805: \"IFCSCHEDULINGTIME\",\r\n    2157484638: \"IFCSEAMCURVE\",\r\n    2042790032: \"IFCSECTIONPROPERTIES\",\r\n    4165799628: \"IFCSECTIONREINFORCEMENTPROPERTIES\",\r\n    1862484736: \"IFCSECTIONEDSOLID\",\r\n    1290935644: \"IFCSECTIONEDSOLIDHORIZONTAL\",\r\n    1509187699: \"IFCSECTIONEDSPINE\",\r\n    4086658281: \"IFCSENSOR\",\r\n    1783015770: \"IFCSENSORTYPE\",\r\n    1329646415: \"IFCSHADINGDEVICE\",\r\n    4074543187: \"IFCSHADINGDEVICETYPE\",\r\n    867548509: \"IFCSHAPEASPECT\",\r\n    3982875396: \"IFCSHAPEMODEL\",\r\n    4240577450: \"IFCSHAPEREPRESENTATION\",\r\n    4124623270: \"IFCSHELLBASEDSURFACEMODEL\",\r\n    3692461612: \"IFCSIMPLEPROPERTY\",\r\n    3663146110: \"IFCSIMPLEPROPERTYTEMPLATE\",\r\n    4097777520: \"IFCSITE\",\r\n    1529196076: \"IFCSLAB\",\r\n    3127900445: \"IFCSLABELEMENTEDCASE\",\r\n    3027962421: \"IFCSLABSTANDARDCASE\",\r\n    2533589738: \"IFCSLABTYPE\",\r\n    2609359061: \"IFCSLIPPAGECONNECTIONCONDITION\",\r\n    3420628829: \"IFCSOLARDEVICE\",\r\n    1072016465: \"IFCSOLARDEVICETYPE\",\r\n    723233188: \"IFCSOLIDMODEL\",\r\n    3856911033: \"IFCSPACE\",\r\n    1999602285: \"IFCSPACEHEATER\",\r\n    1305183839: \"IFCSPACEHEATERTYPE\",\r\n    3812236995: \"IFCSPACETYPE\",\r\n    1412071761: \"IFCSPATIALELEMENT\",\r\n    710998568: \"IFCSPATIALELEMENTTYPE\",\r\n    2706606064: \"IFCSPATIALSTRUCTUREELEMENT\",\r\n    3893378262: \"IFCSPATIALSTRUCTUREELEMENTTYPE\",\r\n    463610769: \"IFCSPATIALZONE\",\r\n    2481509218: \"IFCSPATIALZONETYPE\",\r\n    451544542: \"IFCSPHERE\",\r\n    4015995234: \"IFCSPHERICALSURFACE\",\r\n    1404847402: \"IFCSTACKTERMINAL\",\r\n    3112655638: \"IFCSTACKTERMINALTYPE\",\r\n    331165859: \"IFCSTAIR\",\r\n    4252922144: \"IFCSTAIRFLIGHT\",\r\n    1039846685: \"IFCSTAIRFLIGHTTYPE\",\r\n    338393293: \"IFCSTAIRTYPE\",\r\n    682877961: \"IFCSTRUCTURALACTION\",\r\n    3544373492: \"IFCSTRUCTURALACTIVITY\",\r\n    2515109513: \"IFCSTRUCTURALANALYSISMODEL\",\r\n    1179482911: \"IFCSTRUCTURALCONNECTION\",\r\n    2273995522: \"IFCSTRUCTURALCONNECTIONCONDITION\",\r\n    1004757350: \"IFCSTRUCTURALCURVEACTION\",\r\n    4243806635: \"IFCSTRUCTURALCURVECONNECTION\",\r\n    214636428: \"IFCSTRUCTURALCURVEMEMBER\",\r\n    2445595289: \"IFCSTRUCTURALCURVEMEMBERVARYING\",\r\n    2757150158: \"IFCSTRUCTURALCURVEREACTION\",\r\n    3136571912: \"IFCSTRUCTURALITEM\",\r\n    1807405624: \"IFCSTRUCTURALLINEARACTION\",\r\n    2162789131: \"IFCSTRUCTURALLOAD\",\r\n    385403989: \"IFCSTRUCTURALLOADCASE\",\r\n    3478079324: \"IFCSTRUCTURALLOADCONFIGURATION\",\r\n    1252848954: \"IFCSTRUCTURALLOADGROUP\",\r\n    1595516126: \"IFCSTRUCTURALLOADLINEARFORCE\",\r\n    609421318: \"IFCSTRUCTURALLOADORRESULT\",\r\n    2668620305: \"IFCSTRUCTURALLOADPLANARFORCE\",\r\n    2473145415: \"IFCSTRUCTURALLOADSINGLEDISPLACEMENT\",\r\n    1973038258: \"IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION\",\r\n    1597423693: \"IFCSTRUCTURALLOADSINGLEFORCE\",\r\n    1190533807: \"IFCSTRUCTURALLOADSINGLEFORCEWARPING\",\r\n    2525727697: \"IFCSTRUCTURALLOADSTATIC\",\r\n    3408363356: \"IFCSTRUCTURALLOADTEMPERATURE\",\r\n    530289379: \"IFCSTRUCTURALMEMBER\",\r\n    1621171031: \"IFCSTRUCTURALPLANARACTION\",\r\n    2082059205: \"IFCSTRUCTURALPOINTACTION\",\r\n    734778138: \"IFCSTRUCTURALPOINTCONNECTION\",\r\n    1235345126: \"IFCSTRUCTURALPOINTREACTION\",\r\n    3689010777: \"IFCSTRUCTURALREACTION\",\r\n    2986769608: \"IFCSTRUCTURALRESULTGROUP\",\r\n    3657597509: \"IFCSTRUCTURALSURFACEACTION\",\r\n    1975003073: \"IFCSTRUCTURALSURFACECONNECTION\",\r\n    3979015343: \"IFCSTRUCTURALSURFACEMEMBER\",\r\n    2218152070: \"IFCSTRUCTURALSURFACEMEMBERVARYING\",\r\n    603775116: \"IFCSTRUCTURALSURFACEREACTION\",\r\n    2830218821: \"IFCSTYLEMODEL\",\r\n    3958052878: \"IFCSTYLEDITEM\",\r\n    3049322572: \"IFCSTYLEDREPRESENTATION\",\r\n    148013059: \"IFCSUBCONTRACTRESOURCE\",\r\n    4095615324: \"IFCSUBCONTRACTRESOURCETYPE\",\r\n    2233826070: \"IFCSUBEDGE\",\r\n    2513912981: \"IFCSURFACE\",\r\n    699246055: \"IFCSURFACECURVE\",\r\n    2028607225: \"IFCSURFACECURVESWEPTAREASOLID\",\r\n    3101698114: \"IFCSURFACEFEATURE\",\r\n    2809605785: \"IFCSURFACEOFLINEAREXTRUSION\",\r\n    4124788165: \"IFCSURFACEOFREVOLUTION\",\r\n    2934153892: \"IFCSURFACEREINFORCEMENTAREA\",\r\n    1300840506: \"IFCSURFACESTYLE\",\r\n    3303107099: \"IFCSURFACESTYLELIGHTING\",\r\n    1607154358: \"IFCSURFACESTYLEREFRACTION\",\r\n    1878645084: \"IFCSURFACESTYLERENDERING\",\r\n    846575682: \"IFCSURFACESTYLESHADING\",\r\n    1351298697: \"IFCSURFACESTYLEWITHTEXTURES\",\r\n    626085974: \"IFCSURFACETEXTURE\",\r\n    2247615214: \"IFCSWEPTAREASOLID\",\r\n    1260650574: \"IFCSWEPTDISKSOLID\",\r\n    1096409881: \"IFCSWEPTDISKSOLIDPOLYGONAL\",\r\n    230924584: \"IFCSWEPTSURFACE\",\r\n    1162798199: \"IFCSWITCHINGDEVICE\",\r\n    2315554128: \"IFCSWITCHINGDEVICETYPE\",\r\n    2254336722: \"IFCSYSTEM\",\r\n    413509423: \"IFCSYSTEMFURNITUREELEMENT\",\r\n    1580310250: \"IFCSYSTEMFURNITUREELEMENTTYPE\",\r\n    3071757647: \"IFCTSHAPEPROFILEDEF\",\r\n    985171141: \"IFCTABLE\",\r\n    2043862942: \"IFCTABLECOLUMN\",\r\n    531007025: \"IFCTABLEROW\",\r\n    812556717: \"IFCTANK\",\r\n    5716631: \"IFCTANKTYPE\",\r\n    3473067441: \"IFCTASK\",\r\n    1549132990: \"IFCTASKTIME\",\r\n    2771591690: \"IFCTASKTIMERECURRING\",\r\n    3206491090: \"IFCTASKTYPE\",\r\n    912023232: \"IFCTELECOMADDRESS\",\r\n    3824725483: \"IFCTENDON\",\r\n    2347447852: \"IFCTENDONANCHOR\",\r\n    3081323446: \"IFCTENDONANCHORTYPE\",\r\n    3663046924: \"IFCTENDONCONDUIT\",\r\n    2281632017: \"IFCTENDONCONDUITTYPE\",\r\n    2415094496: \"IFCTENDONTYPE\",\r\n    2387106220: \"IFCTESSELLATEDFACESET\",\r\n    901063453: \"IFCTESSELLATEDITEM\",\r\n    4282788508: \"IFCTEXTLITERAL\",\r\n    3124975700: \"IFCTEXTLITERALWITHEXTENT\",\r\n    1447204868: \"IFCTEXTSTYLE\",\r\n    1983826977: \"IFCTEXTSTYLEFONTMODEL\",\r\n    2636378356: \"IFCTEXTSTYLEFORDEFINEDFONT\",\r\n    1640371178: \"IFCTEXTSTYLETEXTMODEL\",\r\n    280115917: \"IFCTEXTURECOORDINATE\",\r\n    1742049831: \"IFCTEXTURECOORDINATEGENERATOR\",\r\n    2552916305: \"IFCTEXTUREMAP\",\r\n    1210645708: \"IFCTEXTUREVERTEX\",\r\n    3611470254: \"IFCTEXTUREVERTEXLIST\",\r\n    1199560280: \"IFCTIMEPERIOD\",\r\n    3101149627: \"IFCTIMESERIES\",\r\n    581633288: \"IFCTIMESERIESVALUE\",\r\n    1377556343: \"IFCTOPOLOGICALREPRESENTATIONITEM\",\r\n    1735638870: \"IFCTOPOLOGYREPRESENTATION\",\r\n    1935646853: \"IFCTOROIDALSURFACE\",\r\n    3825984169: \"IFCTRANSFORMER\",\r\n    1692211062: \"IFCTRANSFORMERTYPE\",\r\n    2595432518: \"IFCTRANSITIONCURVESEGMENT2D\",\r\n    1620046519: \"IFCTRANSPORTELEMENT\",\r\n    2097647324: \"IFCTRANSPORTELEMENTTYPE\",\r\n    2715220739: \"IFCTRAPEZIUMPROFILEDEF\",\r\n    2916149573: \"IFCTRIANGULATEDFACESET\",\r\n    1229763772: \"IFCTRIANGULATEDIRREGULARNETWORK\",\r\n    3593883385: \"IFCTRIMMEDCURVE\",\r\n    3026737570: \"IFCTUBEBUNDLE\",\r\n    1600972822: \"IFCTUBEBUNDLETYPE\",\r\n    1628702193: \"IFCTYPEOBJECT\",\r\n    3736923433: \"IFCTYPEPROCESS\",\r\n    2347495698: \"IFCTYPEPRODUCT\",\r\n    3698973494: \"IFCTYPERESOURCE\",\r\n    427810014: \"IFCUSHAPEPROFILEDEF\",\r\n    180925521: \"IFCUNITASSIGNMENT\",\r\n    630975310: \"IFCUNITARYCONTROLELEMENT\",\r\n    3179687236: \"IFCUNITARYCONTROLELEMENTTYPE\",\r\n    4292641817: \"IFCUNITARYEQUIPMENT\",\r\n    1911125066: \"IFCUNITARYEQUIPMENTTYPE\",\r\n    4207607924: \"IFCVALVE\",\r\n    728799441: \"IFCVALVETYPE\",\r\n    1417489154: \"IFCVECTOR\",\r\n    2799835756: \"IFCVERTEX\",\r\n    2759199220: \"IFCVERTEXLOOP\",\r\n    1907098498: \"IFCVERTEXPOINT\",\r\n    1530820697: \"IFCVIBRATIONDAMPER\",\r\n    3956297820: \"IFCVIBRATIONDAMPERTYPE\",\r\n    2391383451: \"IFCVIBRATIONISOLATOR\",\r\n    3313531582: \"IFCVIBRATIONISOLATORTYPE\",\r\n    2769231204: \"IFCVIRTUALELEMENT\",\r\n    891718957: \"IFCVIRTUALGRIDINTERSECTION\",\r\n    926996030: \"IFCVOIDINGFEATURE\",\r\n    2391406946: \"IFCWALL\",\r\n    4156078855: \"IFCWALLELEMENTEDCASE\",\r\n    3512223829: \"IFCWALLSTANDARDCASE\",\r\n    1898987631: \"IFCWALLTYPE\",\r\n    4237592921: \"IFCWASTETERMINAL\",\r\n    1133259667: \"IFCWASTETERMINALTYPE\",\r\n    3304561284: \"IFCWINDOW\",\r\n    336235671: \"IFCWINDOWLININGPROPERTIES\",\r\n    512836454: \"IFCWINDOWPANELPROPERTIES\",\r\n    486154966: \"IFCWINDOWSTANDARDCASE\",\r\n    1299126871: \"IFCWINDOWSTYLE\",\r\n    4009809668: \"IFCWINDOWTYPE\",\r\n    4088093105: \"IFCWORKCALENDAR\",\r\n    1028945134: \"IFCWORKCONTROL\",\r\n    4218914973: \"IFCWORKPLAN\",\r\n    3342526732: \"IFCWORKSCHEDULE\",\r\n    1236880293: \"IFCWORKTIME\",\r\n    2543172580: \"IFCZSHAPEPROFILEDEF\",\r\n    1033361043: \"IFCZONE\",\r\n}","import { IfcTypesMap } from '../IfcTypesMap';\r\nimport { JSONObject, pName } from '../../BaseDefinitions';\r\nimport { BasePropertyManager } from './BasePropertyManager';\r\nimport { IFCPROJECT } from 'web-ifc';\r\nimport { PropertyAPI } from './BaseDefinitions';\r\n\r\nexport class JSONPropertyManager extends BasePropertyManager implements PropertyAPI {\r\n\r\n    async getItemProperties(modelID: number, id: number, recursive = false) {\r\n        return { ...this.state.models[modelID].jsonData[id] };\r\n    }\r\n\r\n    async getSpatialStructure(modelID: number, includeProperties?: boolean) {\r\n        const chunks = await this.getSpatialTreeChunks(modelID);\r\n        const projectsIDs = await this.getAllItemsOfType(modelID, IFCPROJECT, false);\r\n        const projectID = projectsIDs[0];\r\n        const project = JSONPropertyManager.newIfcProject(projectID);\r\n        await this.getSpatialNode(modelID, project, chunks, includeProperties);\r\n        return { ...project };\r\n    }\r\n\r\n    async getAllItemsOfType(modelID: number, type: number, verbose: boolean) {\r\n        const data = this.state.models[modelID].jsonData;\r\n        const typeName = IfcTypesMap[type];\r\n        if (!typeName) {\r\n            throw new Error(`Type not found: ${type}`);\r\n        }\r\n        return this.filterItemsByType(data, typeName, verbose);\r\n    }\r\n\r\n    override async getProperty(modelID: number, elementID: number, recursive = false, propName: pName) {\r\n        const resultIDs = await this.getAllRelatedItemsOfType(modelID, elementID, propName);\r\n        const result = this.getItemsByID(modelID, resultIDs);\r\n        if (recursive) {\r\n            result.forEach(result => this.getReferencesRecursively(modelID, result));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    protected override getNodeType(modelID: number, id: number) {\r\n        return this.state.models[modelID].jsonData[id].type;\r\n    }\r\n\r\n    protected override async getChunks(modelID: number, chunks: any, propNames: pName) {\r\n        const relation = await this.getAllItemsOfType(modelID, propNames.name, true);\r\n        relation.forEach(rel => {\r\n            this.saveChunk(chunks, propNames, rel);\r\n        });\r\n    }\r\n\r\n    private filterItemsByType(data: { [id: number]: JSONObject }, typeName: string, verbose: boolean) {\r\n        const result: any[] = [];\r\n        Object.keys(data).forEach(key => {\r\n            const numKey = parseInt(key);\r\n            if (data[numKey].type.toUpperCase() === typeName) {\r\n                result.push(verbose ? { ...data[numKey] } : numKey);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    private async getAllRelatedItemsOfType(modelID: number, id: number, propNames: pName) {\r\n        const lines = await this.getAllItemsOfType(modelID, propNames.name, true);\r\n        const IDs: number[] = [];\r\n        lines.forEach(line => {\r\n            const isRelated = JSONPropertyManager.isRelated(id, line, propNames);\r\n            if (isRelated) this.getRelated(line, propNames, IDs);\r\n        });\r\n        return IDs;\r\n    }\r\n\r\n    private getItemsByID(modelID: number, ids: number[]) {\r\n        const data = this.state.models[modelID].jsonData;\r\n        const result: any[] = [];\r\n        ids.forEach(id => result.push({ ...data[id] }));\r\n        return result;\r\n    }\r\n\r\n    private getReferencesRecursively(modelID: number, jsonObject: any) {\r\n        if (jsonObject == undefined) return;\r\n        const keys = Object.keys(jsonObject);\r\n        for (let i = 0; i < keys.length; i++) {\r\n            const key = keys[i];\r\n            this.getJSONItem(modelID, jsonObject, key);\r\n        }\r\n    }\r\n\r\n    private getJSONItem(modelID: number, jsonObject: any, key: string) {\r\n        if (Array.isArray(jsonObject[key])) {\r\n            return this.getMultipleJSONItems(modelID, jsonObject, key);\r\n        }\r\n        if (jsonObject[key] && jsonObject[key].type === 5) {\r\n            jsonObject[key] = this.getItemsByID(modelID, [jsonObject[key].value])[0];\r\n            this.getReferencesRecursively(modelID, jsonObject[key]);\r\n        }\r\n    }\r\n\r\n    private getMultipleJSONItems(modelID: number, jsonObject: any, key: string) {\r\n        jsonObject[key] = jsonObject[key].map((item: any) => {\r\n            if (item.type === 5) {\r\n                item = this.getItemsByID(modelID, [item.value])[0];\r\n                this.getReferencesRecursively(modelID, item);\r\n            }\r\n            return item;\r\n        });\r\n    }\r\n}","import {\r\n    IdAttrName\r\n} from '../../BaseDefinitions';\r\nimport { IfcState } from '../../BaseDefinitions';\r\nimport { BufferGeometry } from 'three';\r\nimport { WebIfcPropertyManager } from './WebIfcPropertyManager';\r\nimport { JSONPropertyManager } from './JSONPropertyManager';\r\nimport { PropertyManagerAPI, PropertyAPI } from './BaseDefinitions';\r\nimport { IfcElements } from '../IFCElementsMap';\r\n\r\n/**\r\n * Contains the logic to get the properties of the items within an IFC model.\r\n */\r\nexport class PropertyManager implements PropertyManagerAPI {\r\n    private readonly webIfcProps: WebIfcPropertyManager;\r\n    private readonly jsonProps: JSONPropertyManager;\r\n    private currentProps: PropertyAPI;\r\n\r\n    constructor(private state: IfcState) {\r\n        this.webIfcProps = new WebIfcPropertyManager(state);\r\n        this.jsonProps = new JSONPropertyManager(state);\r\n        this.currentProps = this.webIfcProps;\r\n    }\r\n\r\n    getExpressId(geometry: BufferGeometry, faceIndex: number) {\r\n        if (!geometry.index) throw new Error('Geometry does not have index information.');\r\n        const geoIndex = geometry.index.array;\r\n        return geometry.attributes[IdAttrName].getX(geoIndex[3 * faceIndex]);\r\n    }\r\n\r\n    async getItemProperties(modelID: number, elementID: number, recursive = false) {\r\n        this.updateCurrentProps();\r\n        return this.currentProps.getItemProperties(modelID, elementID, recursive);\r\n    }\r\n\r\n    async getAllItemsOfType(modelID: number, type: number, verbose: boolean) {\r\n        this.updateCurrentProps();\r\n        return this.currentProps.getAllItemsOfType(modelID, type, verbose);\r\n    }\r\n\r\n    async getPropertySets(modelID: number, elementID: number, recursive = false) {\r\n        this.updateCurrentProps();\r\n        return this.currentProps.getPropertySets(modelID, elementID, recursive);\r\n    }\r\n\r\n    async getTypeProperties(modelID: number, elementID: number, recursive = false) {\r\n        this.updateCurrentProps();\r\n        return this.currentProps.getTypeProperties(modelID, elementID, recursive);\r\n    }\r\n\r\n    async getMaterialsProperties(modelID: number, elementID: number, recursive = false) {\r\n        this.updateCurrentProps();\r\n        return this.currentProps.getMaterialsProperties(modelID, elementID, recursive);\r\n    }\r\n\r\n    async getSpatialStructure(modelID: number, includeProperties?: boolean) {\r\n        this.updateCurrentProps();\r\n        if (!this.state.useJSON && includeProperties) {\r\n            console.warn('Including properties in getSpatialStructure with the JSON workflow disabled can lead to poor performance.');\r\n        }\r\n        return await this.currentProps.getSpatialStructure(modelID, includeProperties);\r\n    }\r\n\r\n    private updateCurrentProps() {\r\n        this.currentProps = this.state.useJSON ? this.jsonProps : this.webIfcProps;\r\n    }\r\n\r\n}\r\n","import { IfcState, SelectedItems } from '../BaseDefinitions';\r\nimport { IfcElements } from './IFCElementsMap'\r\nimport { IFCWorkerHandler } from '../web-workers/IFCWorkerHandler';\r\n\r\n/**\r\n * Contains the logic to manage the type (e. g. IfcWall, IfcWindow, IfcDoor) of\r\n * all the items within an IFC file.\r\n */\r\nexport class TypeManager {\r\n\r\n    constructor(private state: IfcState) {\r\n        this.state = state;\r\n    }\r\n\r\n    async getAllTypes(worker?: IFCWorkerHandler){\r\n        for(let modelID in this.state.models){\r\n            const types = this.state.models[modelID].types;\r\n            if(Object.keys(types).length == 0) {\r\n                await this.getAllTypesOfModel(parseInt(modelID), worker);\r\n            }\r\n        }\r\n    }\r\n\r\n    async getAllTypesOfModel(modelID: number, worker?: IFCWorkerHandler) {\r\n        const result = {};\r\n        const elements = Object.keys(IfcElements).map((e) => parseInt(e));\r\n        for(let i = 0; i < elements.length; i++) {\r\n            const element = elements[i];\r\n            const lines = await this.state.api.GetLineIDsWithType(modelID, element);\r\n            const size = lines.size();\r\n            //@ts-ignore\r\n            for (let i = 0; i < size; i++) result[lines.get(i)] = element;\r\n        }\r\n        if(this.state.worker.active && worker) {\r\n            await worker.workerState.updateModelStateTypes(modelID, result);\r\n        } else {\r\n            this.state.models[modelID].types = result;\r\n        }\r\n    }\r\n}\r\n","import { IfcState, SelectedItems } from '../BaseDefinitions';\r\nimport { BufferGeometry, Mesh } from 'three';\r\n\r\nexport class BvhManager {\r\n    private computeBoundsTree?: any;\r\n    private disposeBoundsTree?: any;\r\n    private acceleratedRaycast?: any;\r\n\r\n    initializeMeshBVH(computeBoundsTree: any, disposeBoundsTree: any, acceleratedRaycast: any) {\r\n        this.computeBoundsTree = computeBoundsTree;\r\n        this.disposeBoundsTree = disposeBoundsTree;\r\n        this.acceleratedRaycast = acceleratedRaycast;\r\n        this.setupThreeMeshBVH();\r\n    }\r\n\r\n    applyThreeMeshBVH(geometry: BufferGeometry) {\r\n        if (this.computeBoundsTree)\r\n            //@ts-ignore\r\n            geometry.computeBoundsTree();\r\n    }\r\n\r\n    private setupThreeMeshBVH() {\r\n        if (!this.computeBoundsTree || !this.disposeBoundsTree || !this.acceleratedRaycast) return;\r\n        //@ts-ignore\r\n        BufferGeometry.prototype.computeBoundsTree = this.computeBoundsTree;\r\n        //@ts-ignore\r\n        BufferGeometry.prototype.disposeBoundsTree = this.disposeBoundsTree;\r\n        Mesh.prototype.raycast = this.acceleratedRaycast;\r\n    }\r\n}","import { IfcState } from '../BaseDefinitions';\r\n\r\nexport class ItemsHider {\r\n    private state: IfcState;\r\n    private modelCoordinates: { [modelID: number]: Float32Array } = {};\r\n    private expressIDCoordinatesMap: {\r\n        [modelID: number]: {\r\n            [id: number]: number[];\r\n        }\r\n    } = {};\r\n\r\n    constructor(state: IfcState) {\r\n        this.state = state;\r\n    };\r\n\r\n    dispose() {\r\n        this.modelCoordinates = {};\r\n        this.expressIDCoordinatesMap = {};\r\n    }\r\n\r\n    processCoordinates(modelID: number) {\r\n        const attributes = this.getAttributes(modelID);\r\n        const ids = Array.from(attributes.expressID.array);\r\n        this.expressIDCoordinatesMap[modelID] = {};\r\n        for (let i = 0; i < ids.length; i++) {\r\n            if (!this.expressIDCoordinatesMap[modelID][ids[i]]) {\r\n                this.expressIDCoordinatesMap[modelID][ids[i]] = [];\r\n            }\r\n            const current = this.expressIDCoordinatesMap[modelID];\r\n            current[ids[i]].push(3 * i);\r\n        }\r\n        this.initializeCoordinates(modelID);\r\n    }\r\n\r\n    hideItems(modelID: number, ids: number[]) {\r\n        this.editCoordinates(modelID, ids, true);\r\n    }\r\n\r\n    showItems(modelID: number, ids: number[]) {\r\n        this.editCoordinates(modelID, ids, false);\r\n    }\r\n\r\n    editCoordinates(modelID: number, ids: number[], hide: boolean) {\r\n        const current = this.expressIDCoordinatesMap[modelID];\r\n        const indices: number[] = [];\r\n        ids.forEach((id: number) => {\r\n            if (current[id]) {\r\n                for (let i = 0; i < current[id].length; i++) {\r\n                    indices.push(current[id][i]);\r\n                }\r\n            }\r\n        });\r\n        const coords = this.getCoordinates(modelID);\r\n        const initial = this.modelCoordinates[modelID];\r\n        if (hide) indices.forEach(i => coords.set([0, 0, 0], i));\r\n        else indices.forEach(i => coords.set([initial[i], initial[i + 1], initial[i+2]], i));\r\n\r\n        this.getAttributes(modelID).position.needsUpdate = true;\r\n    }\r\n\r\n    showAllItems(modelID: number) {\r\n        if (this.modelCoordinates[modelID]) {\r\n            this.resetCoordinates(modelID);\r\n            this.getAttributes(modelID).position.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    hideAllItems(modelID: number) {\r\n        this.getCoordinates(modelID).fill(0);\r\n        this.getAttributes(modelID).position.needsUpdate = true;\r\n    }\r\n\r\n    private initializeCoordinates(modelID: number) {\r\n        const coordinates = this.getCoordinates(modelID);\r\n        if (!this.modelCoordinates[modelID]) {\r\n            this.modelCoordinates[modelID] = new Float32Array(coordinates);\r\n        }\r\n    }\r\n\r\n    private resetCoordinates(modelID: number) {\r\n        const initial = this.modelCoordinates[modelID];\r\n        this.getCoordinates(modelID).set(initial);\r\n    }\r\n\r\n    private getCoordinates(modelID: number) {\r\n        return this.getAttributes(modelID).position.array as Float32Array;\r\n    }\r\n\r\n    private getAttributes(modelID: number) {\r\n        return this.state.models[modelID].mesh.geometry.attributes;\r\n    }\r\n}","import { IfcModel, IfcState } from '../BaseDefinitions';\r\nimport { Mesh } from 'three';\r\n\r\nexport class MemoryCleaner {\r\n    constructor(private state: IfcState) {};\r\n\r\n    releaseAllModels() {\r\n        const models = Object.values(this.state.models);\r\n        models.forEach(model => {\r\n            this.releaseMeshModelMemory(model);\r\n            this.releaseJSONMemory(model);\r\n            this.releaseGeometryByMaterials(model);\r\n            // @ts-ignore\r\n            model.types = null;\r\n        });\r\n    }\r\n\r\n    private releaseGeometryByMaterials(model: IfcModel) {\r\n        const keys = Object.keys(model.items);\r\n        keys.forEach(key => {\r\n            const geomsByMat = model.items[key];\r\n            geomsByMat.material.dispose();\r\n            // @ts-ignore\r\n            geomsByMat.material = null;\r\n\r\n            Object.values(geomsByMat.geometries).forEach(geom => geom.dispose());\r\n            // @ts-ignore\r\n            geomsByMat.geometries = null;\r\n        });\r\n        // @ts-ignore\r\n        model.items = null;\r\n    }\r\n\r\n    private releaseJSONMemory(model: IfcModel) {\r\n        const keys = Object.keys(model.jsonData);\r\n        keys.forEach((key) => delete model.jsonData[parseInt(key)]);\r\n        // @ts-ignore\r\n        model.jsonData = null;\r\n    }\r\n\r\n    private releaseMeshModelMemory(model: IfcModel) {\r\n        this.releaseMeshMemory(model.mesh);\r\n        // @ts-ignore\r\n        model.mesh = null;\r\n    }\r\n\r\n    private releaseMeshMemory(mesh: Mesh) {\r\n        if (mesh.geometry) {\r\n            mesh.geometry.dispose();\r\n        }\r\n        if (mesh.parent) {\r\n            mesh.parent.remove(mesh);\r\n        }\r\n        if (mesh.material) {\r\n            Array.isArray(mesh.material) ?\r\n                mesh.material.forEach(mat => mat.dispose()) :\r\n                mesh.material.dispose();\r\n        }\r\n        if(mesh.children.length > 0) {\r\n            mesh.children.forEach(child => {\r\n                if(child.type === \"Mesh\") this.releaseMeshMemory(child as Mesh);\r\n                mesh.remove(child);\r\n            })\r\n        }\r\n    }\r\n}","import { HighlightConfigOfModel, IfcState, WebIfcAPI } from '../BaseDefinitions';\r\nimport { BvhManager } from '../components/BvhManager';\r\nimport { Material, Object3D } from 'three';\r\n\r\nexport interface IfcWorkerAPI {\r\n    post: (data: any) => void;\r\n    initializeAPI: (api: WebIfcAPI) => void;\r\n    state?: IfcState;\r\n    postCallback: (data: any, result: any, serializer?: any) => void;\r\n}\r\n\r\nexport enum WorkerActions {\r\n    // Worker State Actions\r\n    updateStateUseJson = 'updateStateUseJson',\r\n    updateStateWebIfcSettings = 'updateStateWebIfcSettings',\r\n    updateModelStateTypes = 'updateModelStateTypes',\r\n    updateModelStateJsonData = 'updateModelStateJsonData',\r\n    loadJsonDataFromWorker = 'loadJsonDataFromWorker',\r\n\r\n    // WebIFC Actions\r\n    Close = 'Close',\r\n    Init = 'Init',\r\n    OpenModel = 'OpenModel',\r\n    CreateModel = 'CreateModel',\r\n    ExportFileAsIFC = 'ExportFileAsIFC',\r\n    GetGeometry = 'GetGeometry',\r\n    GetLine = 'GetLine',\r\n    GetAndClearErrors = 'GetAndClearErrors',\r\n    WriteLine = 'WriteLine',\r\n    FlattenLine = 'FlattenLine',\r\n    GetRawLineData = 'GetRawLineData',\r\n    WriteRawLineData = 'WriteRawLineData',\r\n    GetLineIDsWithType = 'GetLineIDsWithType',\r\n    GetAllLines = 'GetAllLines',\r\n    SetGeometryTransformation = 'SetGeometryTransformation',\r\n    GetCoordinationMatrix = 'GetCoordinationMatrix',\r\n    GetVertexArray = 'GetVertexArray',\r\n    GetIndexArray = 'GetIndexArray',\r\n    getSubArray = 'getSubArray',\r\n    CloseModel = 'CloseModel',\r\n    StreamAllMeshes = 'StreamAllMeshes',\r\n    StreamAllMeshesWithTypes = 'StreamAllMeshesWithTypes',\r\n    IsModelOpen = 'IsModelOpen',\r\n    LoadAllGeometry = 'LoadAllGeometry',\r\n    GetFlatMesh = 'GetFlatMesh',\r\n    SetWasmPath = 'SetWasmPath',\r\n\r\n    // Parser\r\n    parse = 'parse',\r\n    setupOptionalCategories = 'setupOptionalCategories',\r\n\r\n    // Properties\r\n    getExpressId = 'getExpressId',\r\n    initializeProperties = 'initializeProperties',\r\n    getAllItemsOfType = 'getAllItemsOfType',\r\n    getItemProperties = 'getItemProperties',\r\n    getMaterialsProperties = 'getMaterialsProperties',\r\n    getPropertySets = 'getPropertySets',\r\n    getSpatialStructure = 'getSpatialStructure',\r\n    getTypeProperties = 'getTypeProperties'\r\n}\r\n\r\nexport enum WorkerAPIs {\r\n    workerState = 'workerState',\r\n    webIfc = 'webIfc',\r\n    properties = 'properties',\r\n    parser = 'parser',\r\n}\r\n\r\nexport interface IfcEventData {\r\n    worker: WorkerAPIs;\r\n    action: WorkerActions;\r\n    args: any;\r\n    id: number;\r\n    result: any;\r\n    onProgress: boolean;\r\n}\r\n\r\nexport interface RootWorker {\r\n    [WorkerAPIs.workerState]: WorkerStateAPI;\r\n    [WorkerAPIs.webIfc]: WebIfcWorkerAPI;\r\n    [WorkerAPIs.properties]: PropertyWorkerAPI;\r\n}\r\n\r\nexport interface BaseWorkerAPI {\r\n    API: WorkerAPIs;\r\n}\r\n\r\nexport type IfcWorkerEventHandler = (data: IfcEventData) => void;\r\n\r\nexport interface WorkerStateAPI extends BaseWorkerAPI {\r\n    [WorkerActions.updateStateUseJson]: IfcWorkerEventHandler;\r\n    [WorkerActions.updateStateWebIfcSettings]: IfcWorkerEventHandler;\r\n    [WorkerActions.updateModelStateTypes]: IfcWorkerEventHandler;\r\n    [WorkerActions.updateModelStateJsonData]: IfcWorkerEventHandler;\r\n    [WorkerActions.loadJsonDataFromWorker]: IfcWorkerEventHandler;\r\n}\r\n\r\nexport interface PropertyWorkerAPI extends BaseWorkerAPI {\r\n    [WorkerActions.getAllItemsOfType]: IfcWorkerEventHandler;\r\n    [WorkerActions.getItemProperties]: IfcWorkerEventHandler;\r\n    [WorkerActions.getMaterialsProperties]: IfcWorkerEventHandler;\r\n    [WorkerActions.getPropertySets]: IfcWorkerEventHandler;\r\n    [WorkerActions.getSpatialStructure]: IfcWorkerEventHandler;\r\n    [WorkerActions.getTypeProperties]: IfcWorkerEventHandler;\r\n}\r\n\r\nexport interface ParserWorkerAPI extends BaseWorkerAPI {\r\n    [WorkerActions.parse]: IfcWorkerEventHandler;\r\n    [WorkerActions.setupOptionalCategories]: IfcWorkerEventHandler;\r\n}\r\n\r\nexport interface WebIfcWorkerAPI extends BaseWorkerAPI {\r\n    [WorkerActions.Init]: IfcWorkerEventHandler;\r\n    [WorkerActions.Close]: IfcWorkerEventHandler;\r\n    [WorkerActions.OpenModel]: IfcWorkerEventHandler;\r\n    [WorkerActions.CreateModel]: IfcWorkerEventHandler;\r\n    [WorkerActions.ExportFileAsIFC]: IfcWorkerEventHandler;\r\n    [WorkerActions.GetGeometry]: IfcWorkerEventHandler;\r\n    [WorkerActions.GetLine]: IfcWorkerEventHandler;\r\n    [WorkerActions.GetAndClearErrors]: IfcWorkerEventHandler;\r\n    [WorkerActions.WriteLine]: IfcWorkerEventHandler;\r\n    [WorkerActions.FlattenLine]: IfcWorkerEventHandler;\r\n    [WorkerActions.GetRawLineData]: IfcWorkerEventHandler;\r\n    [WorkerActions.WriteRawLineData]: IfcWorkerEventHandler;\r\n    [WorkerActions.GetLineIDsWithType]: IfcWorkerEventHandler;\r\n    [WorkerActions.GetAllLines]: IfcWorkerEventHandler;\r\n    [WorkerActions.SetGeometryTransformation]: IfcWorkerEventHandler;\r\n    [WorkerActions.GetCoordinationMatrix]: IfcWorkerEventHandler;\r\n    [WorkerActions.GetVertexArray]: IfcWorkerEventHandler;\r\n    [WorkerActions.GetIndexArray]: IfcWorkerEventHandler;\r\n    [WorkerActions.getSubArray]: IfcWorkerEventHandler;\r\n    [WorkerActions.CloseModel]: IfcWorkerEventHandler;\r\n    [WorkerActions.StreamAllMeshes]: IfcWorkerEventHandler;\r\n    [WorkerActions.StreamAllMeshesWithTypes]: IfcWorkerEventHandler;\r\n    [WorkerActions.IsModelOpen]: IfcWorkerEventHandler;\r\n    [WorkerActions.LoadAllGeometry]: IfcWorkerEventHandler;\r\n    [WorkerActions.GetFlatMesh]: IfcWorkerEventHandler;\r\n    [WorkerActions.SetWasmPath]: IfcWorkerEventHandler;\r\n}\r\n\r\nexport interface SerializedVector {\r\n    [key: number]: any;\r\n\r\n    size: number;\r\n}\r\n\r\nexport interface SerializedIfcGeometry {\r\n    GetVertexData: number;\r\n    GetVertexDataSize: number;\r\n    GetIndexData: number;\r\n    GetIndexDataSize: number;\r\n}\r\n\r\nexport interface SerializedFlatMesh {\r\n    geometries: SerializedVector;\r\n    expressID: number;\r\n}\r\n\r\nexport const ErrorStateNotAvailable = 'The state of the worker does not exist';\r\nexport const ErrorRootStateNotAvailable = 'The root worker does not have any state';\r\nexport const ErrorPropertiesNotAvailable = 'Error: Properties not available from web worker';\r\nexport const ErrorParserNotAvailable = 'Error: Parser not available from web worker';\r\nexport const ErrorBadJsonPath = 'Error: Model not available from web worker';\r\nexport const ErrorBadJson = 'Error: The given Json could not be read as a JS object';","import { SerializedVector } from '../BaseDefinitions';\r\nimport { Vector as WebIfcVector } from 'web-ifc';\r\n\r\nexport class Vector<T> implements WebIfcVector<T> {\r\n    private readonly _size: number;\r\n    private _data: { [key: number]: T } = {};\r\n\r\n    constructor(vector: SerializedVector) {\r\n        this._size = vector.size;\r\n        const keys = Object.keys(vector).filter((key) => key.indexOf('size') === -1).map(key => parseInt(key));\r\n        keys.forEach((key) => this._data[key] = vector[key]);\r\n    }\r\n\r\n    size() {\r\n        return this._size;\r\n    }\r\n\r\n    get(index: number) {\r\n        return this._data[index];\r\n    }\r\n}","import { SerializedIfcGeometry } from '../BaseDefinitions';\r\nimport { IfcGeometry as WebIfcIfcGeometry } from 'web-ifc';\r\n\r\nexport class IfcGeometry implements WebIfcIfcGeometry {\r\n    private readonly _GetVertexData: number;\r\n    private readonly _GetVertexDataSize: number;\r\n    private readonly _GetIndexData: number;\r\n    private readonly _GetIndexDataSize: number;\r\n\r\n    constructor(vector: SerializedIfcGeometry) {\r\n        this._GetVertexData = vector.GetVertexData;\r\n        this._GetVertexDataSize = vector.GetVertexDataSize;\r\n        this._GetIndexData = vector.GetIndexData;\r\n        this._GetIndexDataSize = vector.GetIndexDataSize;\r\n    }\r\n\r\n    GetVertexData() {\r\n        return this._GetVertexData;\r\n    }\r\n\r\n    GetVertexDataSize() {\r\n        return this._GetVertexDataSize;\r\n    }\r\n\r\n    GetIndexData() {\r\n        return this._GetIndexData;\r\n    }\r\n\r\n    GetIndexDataSize() {\r\n        return this._GetIndexDataSize;\r\n    }\r\n}","import { SerializedFlatMesh } from '../BaseDefinitions';\r\nimport { FlatMesh as WebIfcFlatMesh, PlacedGeometry } from 'web-ifc';\r\nimport { Vector } from './Vector';\r\nimport { Serializer } from './Serializer';\r\n\r\nexport class FlatMesh implements WebIfcFlatMesh {\r\n    geometries: Vector<PlacedGeometry>;\r\n    expressID: number;\r\n\r\n    constructor(serializer: Serializer, flatMesh: SerializedFlatMesh) {\r\n        this.expressID = flatMesh.expressID;\r\n        this.geometries = serializer.reconstructVector(flatMesh.geometries);\r\n    }\r\n}","import { SerializedVector } from '../BaseDefinitions';\r\nimport { FlatMesh as WebIfcFlatMesh, Vector as WebIfcVector } from 'web-ifc';\r\nimport { Serializer } from './Serializer';\r\n\r\nexport class FlatMeshVector implements WebIfcVector<WebIfcFlatMesh> {\r\n    private readonly _size: number;\r\n    private _data: { [key: number]: WebIfcFlatMesh } = {};\r\n\r\n    constructor(serializer: Serializer, vector: SerializedVector) {\r\n        this._size = vector.size;\r\n        const keys = Object.keys(vector).filter((key) => key.indexOf('size') === -1).map(key => parseInt(key));\r\n        keys.forEach(key => this._data[key] = serializer.reconstructFlatMesh(vector[key]));\r\n    }\r\n\r\n    size() {\r\n        return this._size;\r\n    }\r\n\r\n    get(index: number) {\r\n        return this._data[index];\r\n    }\r\n}","import { Color, MeshLambertMaterial } from 'three';\r\n\r\nexport class SerializedMaterial {\r\n    color: number[];\r\n    opacity: number;\r\n    transparent: boolean;\r\n\r\n    constructor(material: MeshLambertMaterial) {\r\n        this.color = [material.color.r, material.color.g, material.color.b];\r\n        this.opacity = material.opacity;\r\n        this.transparent = material.transparent;\r\n    }\r\n}\r\n\r\nexport class MaterialReconstructor {\r\n    static new(material: SerializedMaterial) {\r\n        return new MeshLambertMaterial({\r\n            color: new Color(material.color[0], material.color[1], material.color[2]),\r\n            opacity: material.opacity,\r\n            transparent: material.transparent\r\n        })\r\n    }\r\n}","import { BufferAttribute, BufferGeometry } from 'three';\r\nimport { IFCModel } from '../../components/IFCModel';\r\n\r\nexport class SerializedGeometry {\r\n    position: ArrayLike<number>;\r\n    normal: ArrayLike<number>;\r\n    expressID: ArrayLike<number>;\r\n    index: ArrayLike<number>;\r\n    groups: { start: number, count: number, materialIndex?: number }[];\r\n\r\n    constructor(geometry: BufferGeometry) {\r\n        this.position = geometry.attributes.position?.array || [];\r\n        this.normal = geometry.attributes.normal?.array || [];\r\n        this.expressID = geometry.attributes.expressID?.array || [];\r\n        this.index = geometry.index?.array || [];\r\n        this.groups = geometry.groups;\r\n    }\r\n}\r\n\r\nexport class GeometryReconstructor {\r\n    static new(serialized: SerializedGeometry) {\r\n        const geom = new BufferGeometry();\r\n        GeometryReconstructor.set(geom, 'expressID', new Uint32Array(serialized.expressID), 1);\r\n        GeometryReconstructor.set(geom, 'position', new Float32Array(serialized.position), 3);\r\n        GeometryReconstructor.set(geom, 'normal', new Float32Array(serialized.normal), 3);\r\n        geom.setIndex(Array.from(serialized.index));\r\n        geom.groups = serialized.groups;\r\n        return geom;\r\n    }\r\n\r\n    private static set(geom: BufferGeometry, name: string, data: ArrayLike<number>, size: number) {\r\n        if(data.length > 0) {\r\n            geom.setAttribute(name, new BufferAttribute(data, size));\r\n        }\r\n    }\r\n}","import { IFCModel } from '../../components/IFCModel';\r\nimport { Material, MeshLambertMaterial } from 'three';\r\nimport { MaterialReconstructor, SerializedMaterial } from './Material';\r\nimport { GeometryReconstructor, SerializedGeometry } from './Geometry';\r\n\r\nexport class SerializedMesh {\r\n\r\n    modelID: number;\r\n    geometry: SerializedGeometry;\r\n    materials: SerializedMaterial [] = [];\r\n\r\n    constructor(model: IFCModel) {\r\n        this.modelID = model.modelID;\r\n        this.geometry = new SerializedGeometry(model.geometry);\r\n        if (Array.isArray(model.material)) {\r\n            model.material.forEach(mat => {\r\n                this.materials.push(new SerializedMaterial(mat as MeshLambertMaterial));\r\n            });\r\n        } else {\r\n            this.materials.push(new SerializedMaterial(model.material as MeshLambertMaterial));\r\n        }\r\n    }\r\n}\r\n\r\nexport class MeshReconstructor {\r\n\r\n    static new(serialized: SerializedMesh) {\r\n        const model = new IFCModel();\r\n        model.modelID = serialized.modelID;\r\n        model.geometry = GeometryReconstructor.new(serialized.geometry);\r\n        MeshReconstructor.getMaterials(serialized, model);\r\n        return model;\r\n    }\r\n\r\n    private static getMaterials(serialized: SerializedMesh, model: IFCModel) {\r\n        model.material = [];\r\n        const mats = model.material as Material[];\r\n        serialized.materials.forEach(mat => {\r\n            mats.push(MaterialReconstructor.new(mat));\r\n        });\r\n    }\r\n}","import { GeometriesByMaterials } from '../../BaseDefinitions';\r\nimport { MaterialReconstructor, SerializedMaterial } from './Material';\r\nimport { GeometryReconstructor, SerializedGeometry } from './Geometry';\r\nimport { MeshLambertMaterial } from 'three';\r\n\r\nexport interface SerializedGeomsByMat {\r\n    [materialID: string]: {\r\n        material: SerializedMaterial,\r\n        geometries: {[expressID: number]: SerializedGeometry}\r\n    }\r\n}\r\n\r\nexport class SerializedGeomsByMaterials implements SerializedGeomsByMat {\r\n\r\n    constructor(geoms: GeometriesByMaterials) {\r\n        const matIDs = Object.keys(geoms);\r\n        matIDs.forEach(id => {\r\n            this[id] = {} as any;\r\n            this[id].material = new SerializedMaterial(geoms[id].material as MeshLambertMaterial);\r\n            this[id].geometries = {};\r\n            const expressIDs = Object.keys(geoms[id].geometries).map(key => parseInt(key));\r\n            expressIDs.forEach(expressID => {\r\n                this[id].geometries[expressID] = new SerializedGeometry(geoms[id].geometries[expressID]);\r\n            })\r\n        })\r\n    }\r\n\r\n    [materialID: string]: { material: SerializedMaterial; geometries: { [expressID: number]: SerializedGeometry; }; };\r\n}\r\n\r\nexport class GeomsByMaterialsReconstructor {\r\n    static new(serialized: SerializedGeomsByMaterials) {\r\n        const geomsByMat: GeometriesByMaterials = {}\r\n        const matIDs = Object.keys(serialized);\r\n        matIDs.forEach(id => {\r\n            geomsByMat[id] = {} as any;\r\n            geomsByMat[id].material = MaterialReconstructor.new(serialized[id].material);\r\n            geomsByMat[id].geometries = {};\r\n            const expressIDs = Object.keys(serialized[id].geometries).map(id => parseInt(id));\r\n            expressIDs.forEach(expressID => {\r\n                geomsByMat[id].geometries[expressID] = GeometryReconstructor.new(serialized[id].geometries[expressID]);\r\n            })\r\n        })\r\n        return geomsByMat;\r\n    }\r\n}","import { Vector as WebIfcVector, IfcGeometry as WebIfcIfcGeometry, FlatMesh as WebIfcFlatMesh } from 'web-ifc';\r\nimport { SerializedFlatMesh, SerializedIfcGeometry, SerializedVector } from '../BaseDefinitions';\r\nimport { Vector } from './Vector';\r\nimport { IfcGeometry } from './IfcGeometry';\r\nimport { FlatMesh } from './FlatMesh';\r\nimport { FlatMeshVector } from './FlatMeshVector';\r\nimport { IFCModel } from '../../components/IFCModel';\r\nimport { MeshReconstructor, SerializedMesh } from './Mesh';\r\nimport { GeometriesByMaterials } from '../../BaseDefinitions';\r\nimport { GeomsByMaterialsReconstructor, SerializedGeomsByMaterials } from './GeomsByMaterials';\r\n\r\nexport class Serializer {\r\n\r\n    serializeVector<T>(vector: WebIfcVector<T>) {\r\n        const size = vector.size();\r\n        const serialized: SerializedVector = { size };\r\n        for (let i = 0; i < size; i++) {\r\n            serialized[i] = vector.get(i);\r\n        }\r\n        return serialized;\r\n    }\r\n\r\n    reconstructVector(vector: SerializedVector): Vector<any> {\r\n        return new Vector(vector);\r\n    }\r\n\r\n    serializeIfcGeometry(geometry: WebIfcIfcGeometry) {\r\n        const GetVertexData = geometry.GetVertexData();\r\n        const GetVertexDataSize = geometry.GetVertexDataSize();\r\n        const GetIndexData = geometry.GetIndexData();\r\n        const GetIndexDataSize = geometry.GetIndexDataSize();\r\n        return {\r\n            GetVertexData,\r\n            GetVertexDataSize,\r\n            GetIndexData,\r\n            GetIndexDataSize\r\n        } as SerializedIfcGeometry;\r\n    }\r\n\r\n    reconstructIfcGeometry(geometry: SerializedIfcGeometry) {\r\n        return new IfcGeometry(geometry);\r\n    }\r\n\r\n    serializeFlatMesh(flatMesh: WebIfcFlatMesh) {\r\n        return {\r\n            expressID: flatMesh.expressID,\r\n            geometries: this.serializeVector(flatMesh.geometries)\r\n        } as SerializedFlatMesh;\r\n    }\r\n\r\n    reconstructFlatMesh(flatMesh: SerializedFlatMesh) {\r\n        return new FlatMesh(this, flatMesh);\r\n    }\r\n\r\n    serializeFlatMeshVector(vector: WebIfcVector<WebIfcFlatMesh>) {\r\n        const size = vector.size();\r\n        const serialized: SerializedVector = { size };\r\n        for (let i = 0; i < size; i++) {\r\n            const flatMesh = vector.get(i);\r\n            serialized[i] = this.serializeFlatMesh(flatMesh);\r\n        }\r\n        return serialized;\r\n    }\r\n\r\n    reconstructFlatMeshVector(vector: SerializedVector): WebIfcVector<WebIfcFlatMesh> {\r\n        return new FlatMeshVector(this, vector);\r\n    }\r\n\r\n    serializeIfcModel(model: IFCModel) {\r\n        return new SerializedMesh(model);\r\n    }\r\n\r\n    reconstructIfcModel(model: SerializedMesh) {\r\n        return MeshReconstructor.new(model);\r\n    }\r\n\r\n    serializeGeometriesByMaterials(geoms: GeometriesByMaterials) {\r\n        return new SerializedGeomsByMaterials(geoms);\r\n    }\r\n\r\n    reconstructGeometriesByMaterials(geoms: SerializedGeomsByMaterials) {\r\n        return GeomsByMaterialsReconstructor.new(geoms);\r\n    }\r\n}","import { PropertyAPI, PropertyManagerAPI } from '../../components/properties/BaseDefinitions';\r\nimport { IFCWorkerHandler } from '../IFCWorkerHandler';\r\nimport { WorkerActions, WorkerAPIs } from '../BaseDefinitions';\r\nimport { BufferGeometry } from 'three';\r\nimport { IdAttrName } from '../../BaseDefinitions';\r\n\r\nexport class PropertyHandler implements PropertyManagerAPI {\r\n\r\n    API = WorkerAPIs.properties;\r\n\r\n    constructor(private handler: IFCWorkerHandler) {\r\n    }\r\n\r\n    getExpressId(geometry: BufferGeometry, faceIndex: number) {\r\n        if (!geometry.index) throw new Error('Geometry does not have index information.');\r\n        const geoIndex = geometry.index.array;\r\n        return geometry.attributes[IdAttrName].getX(geoIndex[3 * faceIndex]);\r\n    }\r\n\r\n    getAllItemsOfType(modelID: number, type: number, verbose: boolean): Promise<any[]> {\r\n        return this.handler.request(this.API, WorkerActions.getAllItemsOfType, { modelID, type, verbose });\r\n    }\r\n\r\n    getItemProperties(modelID: number, elementID: number, recursive: boolean): Promise<any> {\r\n        return this.handler.request(this.API, WorkerActions.getItemProperties, { modelID, elementID, recursive });\r\n    }\r\n\r\n    getMaterialsProperties(modelID: number, elementID: number, recursive: boolean): Promise<any[]> {\r\n        return this.handler.request(this.API, WorkerActions.getMaterialsProperties, { modelID, elementID, recursive });\r\n    }\r\n\r\n    getPropertySets(modelID: number, elementID: number, recursive: boolean): Promise<any[]> {\r\n        return this.handler.request(this.API, WorkerActions.getPropertySets, { modelID, elementID, recursive });\r\n    }\r\n\r\n    getTypeProperties(modelID: number, elementID: number, recursive: boolean): Promise<any[]> {\r\n        return this.handler.request(this.API, WorkerActions.getTypeProperties, { modelID, elementID, recursive });\r\n    }\r\n\r\n    getSpatialStructure(modelID: number, includeProperties?: boolean): Promise<any> {\r\n        return this.handler.request(this.API, WorkerActions.getSpatialStructure, { modelID, includeProperties });\r\n    }\r\n}","import { WebIfcAPI } from '../../BaseDefinitions';\r\nimport {\r\n    SerializedFlatMesh,\r\n    SerializedIfcGeometry,\r\n    SerializedVector,\r\n    WorkerActions,\r\n    WorkerAPIs\r\n} from '../BaseDefinitions';\r\nimport { FlatMesh, IfcGeometry, LoaderError, LoaderSettings, RawLineData, Vector } from 'web-ifc';\r\nimport { IFCWorkerHandler } from '../IFCWorkerHandler';\r\nimport { Serializer } from '../serializer/Serializer';\r\n\r\nexport class WebIfcHandler implements WebIfcAPI {\r\n\r\n    wasmModule: any;\r\n    API = WorkerAPIs.webIfc;\r\n\r\n    constructor(private handler: IFCWorkerHandler, private serializer: Serializer) {\r\n    }\r\n\r\n    async Init(): Promise<void> {\r\n        this.wasmModule = true;\r\n        return this.handler.request(this.API, WorkerActions.Init);\r\n    }\r\n\r\n    async OpenModel(data: string | Uint8Array, settings?: LoaderSettings): Promise<number> {\r\n        return this.handler.request(this.API, WorkerActions.OpenModel, { data, settings });\r\n    }\r\n\r\n    async CreateModel(settings?: LoaderSettings): Promise<number> {\r\n        return this.handler.request(this.API, WorkerActions.CreateModel, { settings });\r\n    }\r\n\r\n    async ExportFileAsIFC(modelID: number): Promise<Uint8Array> {\r\n        return this.handler.request(this.API, WorkerActions.ExportFileAsIFC, { modelID });\r\n    }\r\n\r\n    async GetGeometry(modelID: number, geometryExpressID: number): Promise<IfcGeometry> {\r\n        this.handler.serializeHandlers[this.handler.requestID] = (geom: SerializedIfcGeometry) => {\r\n            return this.serializer.reconstructIfcGeometry(geom);\r\n        }\r\n        return this.handler.request(this.API, WorkerActions.GetGeometry, { modelID, geometryExpressID });\r\n    }\r\n\r\n    async GetLine(modelID: number, expressID: number, flatten?: boolean): Promise<any> {\r\n        return this.handler.request(this.API, WorkerActions.GetLine, { modelID, expressID, flatten });\r\n    }\r\n\r\n    async GetAndClearErrors(modelID: number): Promise<Vector<LoaderError>> {\r\n        this.handler.serializeHandlers[this.handler.requestID] = (vector: SerializedVector) => {\r\n            return this.serializer.reconstructVector(vector);\r\n        }\r\n        return this.handler.request(this.API, WorkerActions.GetAndClearErrors, { modelID });\r\n    }\r\n\r\n    async WriteLine(modelID: number, lineObject: any): Promise<void> {\r\n        return this.handler.request(this.API, WorkerActions.WriteLine, { modelID, lineObject });\r\n    }\r\n\r\n    async FlattenLine(modelID: number, line: any): Promise<void> {\r\n        return this.handler.request(this.API, WorkerActions.FlattenLine, { modelID, line });\r\n    }\r\n\r\n    async GetRawLineData(modelID: number, expressID: number): Promise<RawLineData> {\r\n        return this.handler.request(this.API, WorkerActions.GetRawLineData, { modelID, expressID });\r\n    }\r\n\r\n    async WriteRawLineData(modelID: number, data: RawLineData): Promise<any> {\r\n        return this.handler.request(this.API, WorkerActions.WriteRawLineData, { modelID, data });\r\n    }\r\n\r\n    async GetLineIDsWithType(modelID: number, type: number): Promise<Vector<number>> {\r\n        this.handler.serializeHandlers[this.handler.requestID] = (vector: SerializedVector) => {\r\n            return this.serializer.reconstructVector(vector);\r\n        }\r\n        return this.handler.request(this.API, WorkerActions.GetLineIDsWithType, { modelID, type });\r\n    }\r\n\r\n    async GetAllLines(modelID: number): Promise<Vector<number>> {\r\n        this.handler.serializeHandlers[this.handler.requestID] = (vector: SerializedVector) => {\r\n            return this.serializer.reconstructVector(vector);\r\n        }\r\n        return this.handler.request(this.API, WorkerActions.GetAllLines, { modelID });\r\n    }\r\n\r\n    async SetGeometryTransformation(modelID: number, transformationMatrix: number[]): Promise<void> {\r\n        return this.handler.request(this.API, WorkerActions.SetGeometryTransformation, {\r\n            modelID,\r\n            transformationMatrix\r\n        });\r\n    }\r\n\r\n    async GetCoordinationMatrix(modelID: number): Promise<number[]> {\r\n        return this.handler.request(this.API, WorkerActions.GetCoordinationMatrix, { modelID });\r\n    }\r\n\r\n    async GetVertexArray(ptr: number, size: number): Promise<Float32Array> {\r\n        return this.handler.request(this.API, WorkerActions.GetVertexArray, { ptr, size });\r\n    }\r\n\r\n    async GetIndexArray(ptr: number, size: number): Promise<Uint32Array> {\r\n        return this.handler.request(this.API, WorkerActions.GetIndexArray, { ptr, size });\r\n    }\r\n\r\n    async getSubArray(heap: any, startPtr: any, sizeBytes: any): Promise<any> {\r\n        return this.handler.request(this.API, WorkerActions.getSubArray, { heap, startPtr, sizeBytes });\r\n    }\r\n\r\n    async CloseModel(modelID: number): Promise<void> {\r\n        return this.handler.request(this.API, WorkerActions.CloseModel, { modelID });\r\n    }\r\n\r\n    async StreamAllMeshes(modelID: number, meshCallback: (mesh: FlatMesh) => void): Promise<void> {\r\n        this.handler.callbackHandlers[this.handler.requestID] = {\r\n            action: meshCallback,\r\n            serializer: this.serializer.reconstructFlatMesh\r\n        };\r\n        return this.handler.request(this.API, WorkerActions.StreamAllMeshes, { modelID });\r\n    }\r\n\r\n    async StreamAllMeshesWithTypes(modelID: number, types: number[], meshCallback: (mesh: FlatMesh) => void): Promise<void> {\r\n        this.handler.callbackHandlers[this.handler.requestID] = {\r\n            action: meshCallback,\r\n            serializer: this.serializer.reconstructFlatMesh\r\n        };\r\n        return this.handler.request(this.API, WorkerActions.StreamAllMeshesWithTypes, { modelID, types });\r\n    }\r\n\r\n    async IsModelOpen(modelID: number): Promise<boolean> {\r\n        return this.handler.request(this.API, WorkerActions.IsModelOpen, { modelID });\r\n    }\r\n\r\n    async LoadAllGeometry(modelID: number): Promise<Vector<FlatMesh>> {\r\n        this.handler.serializeHandlers[this.handler.requestID] = (vector: SerializedVector) => {\r\n            return this.serializer.reconstructFlatMeshVector(vector);\r\n        }\r\n        return this.handler.request(this.API, WorkerActions.LoadAllGeometry, { modelID });\r\n    }\r\n\r\n    async GetFlatMesh(modelID: number, expressID: number): Promise<FlatMesh> {\r\n        this.handler.serializeHandlers[this.handler.requestID] = (flatMesh: SerializedFlatMesh) => {\r\n            return this.serializer.reconstructFlatMesh(flatMesh);\r\n        }\r\n        return this.handler.request(this.API, WorkerActions.GetFlatMesh, { modelID, expressID });\r\n    }\r\n\r\n    async SetWasmPath(path: string): Promise<void> {\r\n        return this.handler.request(this.API, WorkerActions.SetWasmPath, { path });\r\n    }\r\n}","import { WorkerActions, WorkerAPIs } from '../BaseDefinitions';\r\nimport { IFCWorkerHandler } from '../IFCWorkerHandler';\r\nimport { IfcState } from '../../BaseDefinitions';\r\n\r\nexport class WorkerStateHandler {\r\n    API = WorkerAPIs.workerState;\r\n    state: IfcState;\r\n\r\n    constructor(private handler: IFCWorkerHandler) {\r\n        this.state = this.handler.state;\r\n    }\r\n\r\n    async updateStateUseJson() {\r\n        const useJson = this.state.useJSON;\r\n        return this.handler.request(this.API, WorkerActions.updateStateUseJson, { useJson });\r\n    }\r\n\r\n    async updateStateWebIfcSettings() {\r\n        const webIfcSettings = this.state.webIfcSettings;\r\n        return this.handler.request(this.API, WorkerActions.updateStateWebIfcSettings, { webIfcSettings });\r\n    }\r\n\r\n    async updateModelStateTypes (modelID: number, types: any) {\r\n        return this.handler.request(this.API, WorkerActions.updateModelStateTypes, { modelID, types });\r\n    }\r\n\r\n    async updateModelStateJsonData(modelID: number, jsonData: any) {\r\n        return this.handler.request(this.API, WorkerActions.updateModelStateJsonData, { modelID, jsonData });\r\n    }\r\n\r\n    async loadJsonDataFromWorker(modelID: number, path: string) {\r\n        return this.handler.request(this.API, WorkerActions.loadJsonDataFromWorker, { modelID, path });\r\n    }\r\n}","export enum DBOperation {\r\n    transferIfcModel,\r\n    transferIndividualItems\r\n}\r\n\r\nexport class IndexedDatabase {\r\n    async save(item: any, id: DBOperation) {\r\n        const open = IndexedDatabase.openOrCreateDB(id);\r\n        this.createSchema(open, id)\r\n        return new Promise<any>((resolve, reject) => {\r\n            open.onsuccess = () => this.saveItem(item, open, id, resolve);\r\n        });\r\n    }\r\n\r\n    async load(id: number) {\r\n        const open = IndexedDatabase.openOrCreateDB(id);\r\n        return new Promise<any>((resolve, reject) => {\r\n            open.onsuccess = () => this.loadItem(open, id, resolve);\r\n        })\r\n    }\r\n\r\n    private createSchema(open: IDBOpenDBRequest, id: DBOperation) {\r\n        open.onupgradeneeded = function () {\r\n            const db = open.result;\r\n            db.createObjectStore(id.toString(), {keyPath: \"id\"});\r\n        };\r\n    }\r\n\r\n    private saveItem(item: any, open: IDBOpenDBRequest, id: DBOperation, resolve: (value: any) => void ) {\r\n        const {db, tx, store} = IndexedDatabase.getDBItems(open, id);\r\n        item.id = id;\r\n        store.put(item);\r\n        tx.oncomplete = () => IndexedDatabase.closeDB(db, tx, resolve);\r\n    }\r\n\r\n    private loadItem(open: IDBOpenDBRequest, id: DBOperation, resolve: (value: any) => void ) {\r\n        const {db, tx, store} = IndexedDatabase.getDBItems(open, id);\r\n        const item = store.get(id);\r\n        const callback = () => {\r\n            delete item.result.id;\r\n            resolve(item.result)\r\n        };\r\n        tx.oncomplete = () => IndexedDatabase.closeDB(db, tx, callback);\r\n    }\r\n\r\n    private static getDBItems(open: IDBOpenDBRequest, id: DBOperation) {\r\n        const db = open.result;\r\n        const tx = db.transaction(id.toString(), \"readwrite\");\r\n        const store = tx.objectStore(id.toString());\r\n        return {db, tx, store};\r\n    }\r\n\r\n    private static openOrCreateDB(id: DBOperation) {\r\n        return indexedDB.open(id.toString(), 1);\r\n    }\r\n\r\n    private static closeDB(db: IDBDatabase, tx: IDBTransaction, resolve: (value: any) => void) {\r\n        db.close();\r\n        resolve(\"success\");\r\n    }\r\n}","import {OptionalCategories, ParserAPI, ParserProgress } from '../../components/IFCParser';\r\nimport { WorkerActions, WorkerAPIs } from '../BaseDefinitions';\r\nimport { IFCWorkerHandler } from '../IFCWorkerHandler';\r\nimport { IFCModel } from '../../components/IFCModel';\r\nimport { Serializer } from '../serializer/Serializer';\r\nimport { ParserResult } from '../workers/ParserWorker';\r\nimport { BvhManager } from '../../components/BvhManager';\r\nimport { DBOperation, IndexedDatabase } from '../../indexedDB/IndexedDatabase';\r\nimport { Matrix4 } from 'three';\r\n\r\nexport class ParserHandler implements ParserAPI {\r\n\r\n    API = WorkerAPIs.parser;\r\n\r\n    constructor(private handler: IFCWorkerHandler,\r\n                private serializer: Serializer,\r\n                private BVH: BvhManager,\r\n                private IDB: IndexedDatabase) {\r\n    }\r\n\r\n    async setupOptionalCategories(config: OptionalCategories) {\r\n        return this.handler.request(this.API, WorkerActions.setupOptionalCategories, {config});\r\n    }\r\n\r\n    async parse(buffer: any, coordinationMatrix?: number[]): Promise<IFCModel> {\r\n        this.handler.onprogressHandlers[this.handler.requestID] = (progress: ParserProgress) => {\r\n            if (this.handler.state.onProgress) this.handler.state.onProgress(progress);\r\n        };\r\n        this.handler.serializeHandlers[this.handler.requestID] = async (result: ParserResult) => {\r\n            this.updateState(result.modelID);\r\n            await this.getItems(result.modelID);\r\n            return this.getModel();\r\n        };\r\n        return this.handler.request(this.API, WorkerActions.parse, {buffer, coordinationMatrix});\r\n    }\r\n\r\n    getAndClearErrors(_modelId: number): void {\r\n    }\r\n\r\n    private updateState(modelID: number) {\r\n        this.handler.state.models[modelID] = {\r\n            modelID: modelID,\r\n            mesh: {} as any,\r\n            items: {},\r\n            types: {},\r\n            jsonData: {}\r\n        };\r\n    }\r\n\r\n    private async getItems(modelID: number) {\r\n        const items = await this.IDB.load(DBOperation.transferIndividualItems);\r\n        this.handler.state.models[modelID].items = this.serializer.reconstructGeometriesByMaterials(items);\r\n    }\r\n\r\n    private async getModel() {\r\n        const serializedModel = await this.IDB.load(DBOperation.transferIfcModel);\r\n        const model = this.serializer.reconstructIfcModel(serializedModel);\r\n        this.BVH.applyThreeMeshBVH(model.geometry);\r\n        this.handler.state.models[model.modelID].mesh = model;\r\n        return model;\r\n    }\r\n}","import {IfcEventData, WorkerActions, WorkerAPIs} from './BaseDefinitions';\r\nimport {Serializer} from './serializer/Serializer';\r\nimport {PropertyHandler} from './handlers/PropertyHandler';\r\nimport {WebIfcHandler} from './handlers/WebIfcHandler';\r\nimport {IfcState} from '../BaseDefinitions';\r\nimport {WorkerStateHandler} from './handlers/WorkerStateHandler';\r\nimport {ParserHandler} from './handlers/ParserHandler';\r\nimport {BVH} from 'three/examples/jsm/loaders/BVHLoader';\r\nimport {BvhManager} from '../components/BvhManager';\r\nimport {IndexedDatabase} from \"../indexedDB/IndexedDatabase\";\r\n\r\nexport class IFCWorkerHandler {\r\n\r\n    requestID = 0;\r\n    rejectHandlers: any = {};\r\n    resolveHandlers: any = {};\r\n    serializeHandlers: any = {};\r\n    callbackHandlers: { [id: number]: { action: any, serializer: any } } = {};\r\n    onprogressHandlers: any = {};\r\n\r\n    readonly IDB: IndexedDatabase;\r\n    readonly workerState: WorkerStateHandler;\r\n    readonly webIfc: WebIfcHandler;\r\n    readonly properties: PropertyHandler;\r\n    readonly parser: ParserHandler;\r\n\r\n    private ifcWorker: Worker;\r\n    private readonly serializer = new Serializer();\r\n    private readonly workerPath: string;\r\n\r\n    constructor(public state: IfcState, private BVH: BvhManager) {\r\n        this.IDB = new IndexedDatabase();\r\n        this.workerPath = this.state.worker.path;\r\n        this.ifcWorker = new Worker(this.workerPath);\r\n        this.ifcWorker.onmessage = (data: any) => this.handleResponse(data);\r\n        this.properties = new PropertyHandler(this);\r\n        this.parser = new ParserHandler(this, this.serializer, this.BVH, this.IDB);\r\n        this.webIfc = new WebIfcHandler(this, this.serializer);\r\n        this.workerState = new WorkerStateHandler(this);\r\n    }\r\n\r\n    request(worker: WorkerAPIs, action: WorkerActions, args?: any) {\r\n        const data: IfcEventData = {worker, action, args, id: this.requestID, result: undefined, onProgress: false};\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n            this.resolveHandlers[this.requestID] = resolve;\r\n            this.rejectHandlers[this.requestID] = reject;\r\n            this.requestID++;\r\n            this.ifcWorker.postMessage(data);\r\n        });\r\n    }\r\n\r\n    async Close(): Promise<void> {\r\n        await this.request(WorkerAPIs.webIfc, WorkerActions.Close);\r\n    }\r\n\r\n    private handleResponse(event: MessageEvent) {\r\n        const data = event.data as IfcEventData;\r\n        if (data.onProgress) {\r\n            this.resolveOnProgress(data);\r\n            return;\r\n        }\r\n        this.callHandlers(data);\r\n        delete this.resolveHandlers[data.id];\r\n        delete this.rejectHandlers[data.id];\r\n        delete this.onprogressHandlers[data.id];\r\n    }\r\n\r\n    private callHandlers(data: IfcEventData) {\r\n        try {\r\n            this.resolveSerializations(data);\r\n            this.resolveCallbacks(data);\r\n            this.resolveHandlers[data.id](data.result);\r\n        } catch (error) {\r\n            this.rejectHandlers[data.id](error);\r\n        }\r\n    }\r\n\r\n    private resolveOnProgress(data: IfcEventData) {\r\n        if (this.onprogressHandlers[data.id]) {\r\n            data.result = this.onprogressHandlers[data.id](data.result);\r\n        }\r\n    }\r\n\r\n    private resolveSerializations(data: IfcEventData) {\r\n        if (this.serializeHandlers[data.id]) {\r\n            data.result = this.serializeHandlers[data.id](data.result);\r\n            delete this.serializeHandlers[data.id];\r\n        }\r\n    }\r\n\r\n    private resolveCallbacks(data: IfcEventData) {\r\n        if (this.callbackHandlers[data.id]) {\r\n            let callbackParameter = data.result;\r\n            if (this.callbackHandlers[data.id].serializer) {\r\n                callbackParameter = this.callbackHandlers[data.id].serializer(data.result);\r\n            }\r\n            this.callbackHandlers[data.id].action(callbackParameter);\r\n        }\r\n    }\r\n}","import * as WebIFC from 'web-ifc';\r\nimport { IFCParser, ParserAPI, ParserProgress } from './IFCParser';\r\nimport { SubsetManager } from './SubsetManager';\r\nimport { PropertyManager } from './properties/PropertyManager';\r\nimport { IfcElements } from './IFCElementsMap';\r\nimport { TypeManager } from './TypeManager';\r\nimport { HighlightConfigOfModel, IfcState, JSONObject } from '../BaseDefinitions';\r\nimport {BufferGeometry, Material, Matrix4, Object3D, Scene} from 'three';\r\nimport { IFCModel } from './IFCModel';\r\nimport { BvhManager } from './BvhManager';\r\nimport { ItemsHider } from './ItemsHider';\r\nimport { LoaderSettings } from 'web-ifc';\r\nimport { MemoryCleaner } from './MemoryCleaner';\r\nimport { IFCWorkerHandler } from '../web-workers/IFCWorkerHandler';\r\nimport { PropertyManagerAPI } from './properties/BaseDefinitions';\r\n\r\n/**\r\n * Contains all the logic to work with the loaded IFC files (select, edit, etc).\r\n */\r\nexport class IFCManager {\r\n    private state: IfcState = {\r\n        models: [],\r\n        api: new WebIFC.IfcAPI(),\r\n        useJSON: false,\r\n        worker: { active: false, path: '' }\r\n    };\r\n\r\n    private BVH = new BvhManager();\r\n    parser: ParserAPI = new IFCParser(this.state, this.BVH);\r\n    private subsets = new SubsetManager(this.state, this.BVH);\r\n    private properties: PropertyManagerAPI = new PropertyManager(this.state);\r\n    private types = new TypeManager(this.state);\r\n    private hider = new ItemsHider(this.state);\r\n    private cleaner = new MemoryCleaner(this.state);\r\n    private worker?: IFCWorkerHandler;\r\n\r\n    /**\r\n     * Returns the underlying web-ifc API.\r\n     */\r\n    get ifcAPI() {\r\n        return this.state.api;\r\n    }\r\n\r\n    // SETUP - all the logic regarding the configuration of web-ifc-three\r\n\r\n    async parse(buffer: ArrayBuffer) {\r\n        const model = await this.parser.parse(buffer, this.state.coordinationMatrix?.toArray()) as IFCModel;\r\n        model.setIFCManager(this);\r\n        this.state.useJSON ? await this.disposeMemory() : await this.types.getAllTypes(this.worker);\r\n        this.hider.processCoordinates(model.modelID);\r\n        return model;\r\n    }\r\n\r\n    /**\r\n     * Sets the relative path of web-ifc.wasm file in the project.\r\n     * Beware: you **must** serve this file in your page; this means\r\n     * that you have to copy this files from *node_modules/web-ifc*\r\n     * to your deployment directory.\r\n     *\r\n     * If you don't use this methods,\r\n     * IFC.js assumes that you are serving it in the root directory.\r\n     *\r\n     * Example if web-ifc.wasm is in dist/wasmDir:\r\n     * `ifcLoader.setWasmPath(\"dist/wasmDir/\");`\r\n     *\r\n     * @path Relative path to web-ifc.wasm.\r\n     */\r\n    async setWasmPath(path: string) {\r\n        this.state.api.SetWasmPath(path);\r\n    }\r\n\r\n    /**\r\n     * Makes object picking a lot faster\r\n     * Courtesy of gkjohnson's [work](https://github.com/gkjohnson/three-mesh-bvh).\r\n     * Import these objects from his library and pass them as arguments. IFC.js takes care of the rest!\r\n     */\r\n    setupThreeMeshBVH(computeBoundsTree: any, disposeBoundsTree: any, acceleratedRaycast: any) {\r\n        this.BVH.initializeMeshBVH(computeBoundsTree, disposeBoundsTree, acceleratedRaycast);\r\n    }\r\n\r\n    /**\r\n     * Sets a callback function that is called every 10% of IFC loaded.\r\n     * @onProgress callback function\r\n     */\r\n    setOnProgress(onProgress: (event: ParserProgress) => void) {\r\n        this.state.onProgress = onProgress;\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets a coordination matrix to be applied when loading geometry.\r\n     * @matrix THREE.Matrix4\r\n     */\r\n    setupCoordinationMatrix(matrix: Matrix4){\r\n        this.state.coordinationMatrix = matrix;\r\n    }\r\n\r\n    /**\r\n     * Clears the coordination matrix that is applied when loading geometry.\r\n     */\r\n    clearCoordinationMatrix(){\r\n        delete this.state.coordinationMatrix;\r\n    }\r\n\r\n    /**\r\n     * Applies a configuration for [web-ifc](https://ifcjs.github.io/info/docs/Guide/web-ifc/Introduction).\r\n     */\r\n    async applyWebIfcConfig(settings: LoaderSettings) {\r\n        this.state.webIfcSettings = settings;\r\n        if (this.state.worker.active && this.worker) {\r\n            await this.worker.workerState.updateStateWebIfcSettings();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Uses web workers, making the loader non-blocking.\r\n     * @active Wether to use web workers or not.\r\n     * @path Relative path to the web worker file. Necessary if active=true.\r\n     */\r\n    async useWebWorkers(active: boolean, path?: string) {\r\n        if (this.state.worker.active === active) return;\r\n        // @ts-ignore\r\n        this.state.api = null;\r\n        if (active) {\r\n            if (!path) throw new Error('You must provide a path to the web worker.');\r\n            this.state.worker.active = active;\r\n            this.state.worker.path = path;\r\n            await this.initializeWorkers();\r\n        } else {\r\n            this.state.api = new WebIFC.IfcAPI();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enables the JSON mode (which consumes way less memory) and eliminates the WASM data.\r\n     * Only use this in the following scenarios:\r\n     * - If you don't need to access the properties of the IFC\r\n     * - If you will provide the properties as JSON.\r\n     * @useJSON: Wether to use the JSON mode or not.\r\n     */\r\n    async useJSONData(useJSON = true) {\r\n        this.state.useJSON = useJSON;\r\n        if (useJSON) {\r\n            await this.worker?.workerState.updateStateUseJson();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds the properties of a model as JSON data. If you are using web workers, use\r\n     * `loadJsonDataFromWorker()` instead to avoid overheads.\r\n     * @modelID ID of the IFC model.\r\n     * @data: data as an object where the keys are the expressIDs and the values the properties.\r\n     */\r\n    async addModelJSONData(modelID: number, data: { [id: number]: JSONObject }) {\r\n        const model = this.state.models[modelID];\r\n        if (!model) throw new Error('The specified model for the JSON data does not exist');\r\n        if (this.state.worker.active) {\r\n            await this.worker?.workerState.updateModelStateJsonData(modelID, data);\r\n        } else {\r\n            model.jsonData = data;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads the data of an IFC model from a JSON file directly from a web worker. If you are not using\r\n     * web workers, use `addModelJSONData()` instead.\r\n     * @modelID ID of the IFC model.\r\n     * @path: the path to the JSON file **relative to the web worker file**.\r\n     */\r\n    async loadJsonDataFromWorker(modelID: number, path: string) {\r\n        if (this.state.worker.active) {\r\n            await this.worker?.workerState.loadJsonDataFromWorker(modelID, path);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Closes the specified model and deletes it from the [scene](https://threejs.org/docs/#api/en/scenes/Scene).\r\n     * @modelID ID of the IFC model.\r\n     * @scene Scene where the model is (if it's located in a scene).\r\n     */\r\n    close(modelID: number, scene?: Scene) {\r\n        this.state.api.CloseModel(modelID);\r\n        if (scene) scene.remove(this.state.models[modelID].mesh);\r\n        delete this.state.models[modelID];\r\n    }\r\n\r\n    /**\r\n     * Gets the **Express ID** to which the given face belongs.\r\n     * This ID uniquely identifies this entity within this IFC file.\r\n     * @geometry The geometry of the IFC model.\r\n     * @faceIndex The index of the face of a geometry.You can easily get this index using the [Raycaster](https://threejs.org/docs/#api/en/core/Raycaster).\r\n     */\r\n    getExpressId(geometry: BufferGeometry, faceIndex: number) {\r\n        return this.properties.getExpressId(geometry, faceIndex);\r\n    }\r\n\r\n    /**\r\n     * Returns all items of the specified type. You can import\r\n     * the types from *web-ifc*.\r\n     *\r\n     * Example to get all the standard walls of a project:\r\n     * ```js\r\n     * import { IFCWALLSTANDARDCASE } from 'web-ifc';\r\n     * const walls = ifcLoader.getAllItemsOfType(IFCWALLSTANDARDCASE);\r\n     * ```\r\n     * @modelID ID of the IFC model.\r\n     * @type type of IFC items to get.\r\n     * @verbose If false (default), this only gets IDs. If true, this also gets the native properties of all the fetched items.\r\n     */\r\n    getAllItemsOfType(modelID: number, type: number, verbose: boolean) {\r\n        return this.properties.getAllItemsOfType(modelID, type, verbose);\r\n    }\r\n\r\n    /**\r\n     * Gets the native properties of the given element.\r\n     * @modelID ID of the IFC model.\r\n     * @id Express ID of the element.\r\n     * @recursive Wether you want to get the information of the referenced elements recursively.\r\n     */\r\n    getItemProperties(modelID: number, id: number, recursive = false) {\r\n        return this.properties.getItemProperties(modelID, id, recursive);\r\n    }\r\n\r\n    /**\r\n     * Gets the [property sets](https://standards.buildingsmart.org/IFC/DEV/IFC4_2/FINAL/HTML/schema/ifckernel/lexical/ifcpropertyset.htm)\r\n     * assigned to the given element.\r\n     * @modelID ID of the IFC model.\r\n     * @id Express ID of the element.\r\n     * @recursive If true, this gets the native properties of the referenced elements recursively.\r\n     */\r\n    getPropertySets(modelID: number, id: number, recursive = false) {\r\n        return this.properties.getPropertySets(modelID, id, recursive);\r\n    }\r\n\r\n    /**\r\n     * Gets the properties of the type assigned to the element.\r\n     * For example, if applied to a wall (IfcWall), this would get back the information\r\n     * contained in the IfcWallType assigned to it, if any.\r\n     * @modelID ID of the IFC model.\r\n     * @id Express ID of the element.\r\n     * @recursive If true, this gets the native properties of the referenced elements recursively.\r\n     */\r\n    getTypeProperties(modelID: number, id: number, recursive = false) {\r\n        return this.properties.getTypeProperties(modelID, id, recursive);\r\n    }\r\n\r\n    /**\r\n     * Gets the materials assigned to the given element.\r\n     * @modelID ID of the IFC model.\r\n     * @id Express ID of the element.\r\n     * @recursive If true, this gets the native properties of the referenced elements recursively.\r\n     */\r\n    getMaterialsProperties(modelID: number, id: number, recursive = false) {\r\n        return this.properties.getMaterialsProperties(modelID, id, recursive);\r\n    }\r\n\r\n    /**\r\n     * Gets the ifc type of the specified item.\r\n     * @modelID ID of the IFC model.\r\n     * @id Express ID of the element.\r\n     */\r\n    getIfcType(modelID: number, id: number) {\r\n        const typeID = this.state.models[modelID].types[id];\r\n        return IfcElements[typeID];\r\n    }\r\n\r\n    /**\r\n     * Gets the spatial structure of the project. The\r\n     * [spatial structure](https://standards.buildingsmart.org/IFC/DEV/IFC4_2/FINAL/HTML/schema/ifcproductextension/lexical/ifcspatialstructureelement.htm)\r\n     * is the hierarchical structure that organizes every IFC project (all physical items\r\n     * are referenced to an element of the spatial structure). It is formed by\r\n     * one IfcProject that contains one or more IfcSites, that contain one or more\r\n     * IfcBuildings, that contain one or more IfcBuildingStoreys, that contain\r\n     * one or more IfcSpaces.\r\n     * @modelID ID of the IFC model.\r\n     */\r\n    getSpatialStructure(modelID: number, includeProperties?: boolean) {\r\n        return this.properties.getSpatialStructure(modelID, includeProperties);\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh of the subset with the specified [material](https://threejs.org/docs/#api/en/materials/Material).\r\n     * If no material is given, this returns the subset with the original materials.\r\n     * @modelID ID of the IFC model.\r\n     * @material Material assigned to the subset (if any).\r\n     * @customId Optional identifier of the subset.\r\n     */\r\n    getSubset(modelID: number, material?: Material, customId?: string) {\r\n        return this.subsets.getSubset(modelID, material, customId);\r\n    }\r\n\r\n    /**\r\n     * Removes the specified subset.\r\n     * @modelID ID of the IFC model.\r\n     * @parent The parent where the subset is (can be any `THREE.Object3D`).\r\n     * @material Material assigned to the subset, if any.\r\n     */\r\n    removeSubset(modelID: number, parent?: Object3D, material?: Material, customId?: string) {\r\n        this.subsets.removeSubset(modelID, parent, material, customId);\r\n    }\r\n\r\n    /**\r\n     * Creates a new geometric subset.\r\n     * @config A configuration object with the following options:\r\n     * - **scene**: `THREE.Object3D` where the model is located.\r\n     * - **modelID**: ID of the model.\r\n     * - **ids**: Express IDs of the items of the model that will conform the subset.\r\n     * - **removePrevious**: wether to remove the previous subset of this model with this material.\r\n     * - **material**: (optional) wether to apply a material to the subset\r\n     */\r\n    createSubset(config: HighlightConfigOfModel) {\r\n        return this.subsets.createSubset(config);\r\n    }\r\n\r\n    /**\r\n     * Hides the selected items in the specified model\r\n     * @modelID ID of the IFC model.\r\n     * @ids Express ID of the elements.\r\n     */\r\n    hideItems(modelID: number, ids: number[]) {\r\n        this.hider.hideItems(modelID, ids);\r\n    }\r\n\r\n    /**\r\n     * Hides all the items of the specified model\r\n     * @modelID ID of the IFC model.\r\n     */\r\n    hideAllItems(modelID: number) {\r\n        this.hider.hideAllItems(modelID);\r\n    }\r\n\r\n    /**\r\n     * Shows all the items of the specified model\r\n     * @modelID ID of the IFC model.\r\n     * @ids Express ID of the elements.\r\n     */\r\n    showItems(modelID: number, ids: number[]) {\r\n        this.hider.showItems(modelID, ids);\r\n    }\r\n\r\n    /**\r\n     * Shows all the items of the specified model\r\n     * @modelID ID of the IFC model.\r\n     */\r\n    showAllItems(modelID: number) {\r\n        this.hider.showAllItems(modelID);\r\n    }\r\n\r\n    // MISC - Miscelaneus logic for various purposes\r\n\r\n    /**\r\n     * Deletes all data, releasing all memory\r\n     * Work in progress: this doesn't remove all the memory\r\n     * Page reloading recommended to avoid heap overload\r\n     */\r\n    releaseAllMemory() {\r\n        this.subsets.dispose();\r\n        this.hider.dispose();\r\n        this.cleaner.releaseAllModels();\r\n        // @ts-ignore\r\n        this.state.api = null;\r\n        // @ts-ignore\r\n        this.state.models = null;\r\n        // @ts-ignore\r\n        this.state = null;\r\n    }\r\n\r\n    /**\r\n     * Completely releases the WASM memory, thus drastically decreasing the memory use of the app.\r\n     * Only use this in the following scenarios:\r\n     * - If you don't need to access the properties of the IFC\r\n     * - If you will provide the properties as JSON.\r\n     */\r\n    async disposeMemory() {\r\n        if (this.state.worker.active) {\r\n            await this.worker?.Close();\r\n        } else {\r\n            // @ts-ignore\r\n            this.state.api = null;\r\n            this.state.api = new WebIFC.IfcAPI();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * For internal use of IFC.js dev team and testers\r\n     */\r\n    getAndClearErrors(modelID: number) {\r\n        return this.parser.getAndClearErrors(modelID);\r\n    }\r\n\r\n    private async initializeWorkers() {\r\n        this.worker = new IFCWorkerHandler(this.state, this.BVH);\r\n        this.state.api = this.worker.webIfc;\r\n        this.properties = this.worker.properties;\r\n        this.parser = this.worker.parser;\r\n        await this.worker.workerState.updateStateUseJson();\r\n        await this.worker.workerState.updateStateWebIfcSettings();\r\n    }\r\n}\r\n","import { IFCManager } from './IFC/components/IFCManager';\r\nimport {FileLoader, Loader, LoadingManager, Matrix4} from 'three';\r\nimport { IFCModel } from './IFC/components/IFCModel';\r\n\r\nclass IFCLoader extends Loader {\r\n    ifcManager: IFCManager;\r\n    private onProgress?: (event: ProgressEvent) => void;\r\n\r\n    constructor(manager?: LoadingManager) {\r\n        super(manager);\r\n        this.ifcManager = new IFCManager();\r\n    }\r\n\r\n    load(\r\n        url: any,\r\n        onLoad: (ifc: IFCModel) => void,\r\n        onProgress?: (event: ProgressEvent) => void,\r\n        onError?: (event: ErrorEvent) => void\r\n    ) {\r\n        const scope = this;\r\n\r\n        const loader = new FileLoader(scope.manager);\r\n        this.onProgress = onProgress;\r\n        loader.setPath(scope.path);\r\n        loader.setResponseType('arraybuffer');\r\n        loader.setRequestHeader(scope.requestHeader);\r\n        loader.setWithCredentials(scope.withCredentials);\r\n        loader.load(\r\n            url,\r\n            async function (buffer) {\r\n                try {\r\n                    if (typeof buffer == 'string') {\r\n                        throw new Error('IFC files must be given as a buffer!');\r\n                    }\r\n                    onLoad(await scope.parse(buffer));\r\n                } catch (e: any) {\r\n                    if (onError) {\r\n                        onError(e);\r\n                    } else {\r\n                        console.error(e);\r\n                    }\r\n\r\n                    scope.manager.itemError(url);\r\n                }\r\n            },\r\n            onProgress,\r\n            onError\r\n        );\r\n    }\r\n\r\n    parse(buffer: ArrayBuffer) {\r\n        return this.ifcManager.parse(buffer);\r\n    }\r\n}\r\n\r\nexport { IFCLoader };\r\n"]},"metadata":{},"sourceType":"module"}