import { Camera, Mesh, OrthographicCamera, PerspectiveCamera, Vector3 } from 'three';
import { CameraProjections, Context, IfcComponent, MouseButtons, NavigationMode, NavigationModes, NavModeManager } from '../../../base-types';
import { LiteEvent } from '../../../utils/LiteEvent';
export declare class IfcCamera extends IfcComponent {
    perspectiveCamera: PerspectiveCamera;
    orthographicCamera: OrthographicCamera;
    navMode: NavModeManager;
    currentNavMode: NavigationMode;
    readonly onChange: LiteEvent<any>;
    readonly onUnlock: LiteEvent<any>;
    readonly onChangeProjection: LiteEvent<Camera>;
    private readonly context;
    constructor(context: Context);
    get target(): Vector3;
    get activeCamera(): Camera;
    get projection(): CameraProjections;
    set projection(projection: CameraProjections);
    updateAspect(): void;
    /**
     * @deprecated Use onChange.on() instead.
     */
    submitOnChange(action: (event: any) => void): void;
    /**
     * @deprecated Use onUnlock.on() instead.
     */
    submitOnUnlock(action: (event: any) => void): void;
    setNavigationMode(mode: NavigationModes): void;
    setOrbitControlsButtons(buttons: MouseButtons): void;
    toggleCameraControls(active: boolean, options?: any): void;
    toggleProjection(): void;
    targetItem(mesh: Mesh, duration?: number): void;
    goTo(position: Vector3, target: Vector3, duration?: number): void;
    goToHomeView(): void;
    setHomeView(camera: Vector3, target: Vector3): void;
    unlock(): void;
    private setOrbitControls;
    private setupCamera;
}
