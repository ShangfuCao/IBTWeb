"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Helpers = void 0;
const fast_xml_parser_1 = __importDefault(require("fast-xml-parser"));
var Helpers;
(function (Helpers) {
    const xmlParserOptions = {
        attributeNamePrefix: "@_",
        ignoreAttributes: false,
        ignoreNameSpace: true,
        allowBooleanAttributes: true,
        parseNodeValue: true,
        parseAttributeValue: true,
        trimValues: true,
    };
    function GetMarkup(xmlString) {
        const { Markup } = fast_xml_parser_1.default.parse(xmlString, xmlParserOptions);
        return {
            topic: {
                guid: Markup.Topic['@_Guid'],
                topic_type: Markup.Topic["@_TopicType"],
                topic_status: Markup.Topic["@_TopicStatus"],
                reference_link: Markup.Topic["ReferenceLink"] && Helpers.ObjectToArray(Markup.Topic["ReferenceLink"]),
                title: Markup.Topic["Title"],
                priority: Markup.Topic["Priority"],
                index: Markup.Topic["Index"],
                labels: Markup.Topic["Labels"] && Helpers.ObjectToArray(Markup.Topic["Labels"]),
                creation_date: Markup.Topic["CreationDate"],
                creation_author: Markup.Topic["CreationAuthor"],
                modified_date: Markup.Topic["ModifiedDate"],
                modified_author: Markup.Topic["ModifiedAuthor"],
                assigned_to: Markup.Topic["AssignedTo"],
                description: Markup.Topic["Description"],
            },
            comments: Helpers.GetComments(Markup.Comment),
            viewpoints: Helpers.GetViewpoints(Markup.Viewpoints)
        };
    }
    Helpers.GetMarkup = GetMarkup;
    function GetVisInfoComponent(xmlData) {
        return {
            ifc_guid: xmlData["@_IfcGuid"]
        };
    }
    Helpers.GetVisInfoComponent = GetVisInfoComponent;
    function GetViewpoint(xmlString) {
        const { VisualizationInfo } = fast_xml_parser_1.default.parse(xmlString, xmlParserOptions);
        const Vis = VisualizationInfo;
        //Camera
        const orthogonal_camera = Vis["OrthogonalCamera"];
        const perspective_camera = Vis["PerspectiveCamera"];
        //Extras
        const lines = Vis["Lines"];
        const clipping_planes = Vis["ClippingPlanes"];
        const GetComponents = () => {
            if (!Vis["Components"])
                return undefined;
            const components = Vis["Components"];
            const GetViewSetupHints = () => {
                if (!components["ViewSetupHints"])
                    return undefined;
                const view_setup_hints = components["ViewSetupHints"];
                return {
                    spaces_visible: view_setup_hints["@_SpacesVisible"],
                    spaces_boundaries_visible: view_setup_hints["@_SpacesBoundariesVisible"],
                    openings_visible: view_setup_hints["@_OpeningsVisible"]
                };
            };
            const GetVisibility = () => {
                var _a;
                if (!components["Visibility"])
                    throw new Error("Visibility not found.");
                const visibility = components["Visibility"];
                return {
                    default_visibility: visibility["@_DefaultVisibility"],
                    exceptions: visibility["Exceptions"] &&
                        visibility["Exceptions"]["Component"] && ((_a = Helpers.ObjectToArray(visibility["Exceptions"]["Component"])) === null || _a === void 0 ? void 0 : _a.map((exception) => {
                        return Helpers.GetVisInfoComponent(exception);
                    }))
                };
            };
            const GetSelection = () => {
                if (!components["Selection"])
                    return undefined;
                const selection = components["Selection"];
                const arr = Helpers.ObjectToArray(selection["Component"]);
                return arr === null || arr === void 0 ? void 0 : arr.map((exception) => {
                    return Helpers.GetVisInfoComponent(exception);
                });
            };
            const GetColoring = () => {
                if (!components["Coloring"])
                    return undefined;
                const coloring = components["Coloring"];
                const colors = coloring["Color"];
                if (!colors)
                    return undefined;
                return Helpers.ObjectToArray(colors).map((color) => ({
                    color: color["@_Color"],
                    components: Helpers.ObjectToArray(color["Component"])
                        .map((exception) => {
                        return Helpers.GetVisInfoComponent(exception);
                    })
                }));
            };
            return {
                view_setup_hints: GetViewSetupHints(),
                visibility: GetVisibility(),
                selection: GetSelection(),
                coloring: GetColoring()
            };
        };
        // Helpers.WriteJsonToFile("./parsed/viewpoint" + Vis["@_Guid"] + ".json", Vis);
        return {
            guid: Vis["@_Guid"],
            components: GetComponents(),
            orthogonal_camera: orthogonal_camera && {
                camera_view_point: ParsePoint(orthogonal_camera["CameraViewPoint"]),
                camera_direction: ParsePoint(orthogonal_camera["CameraDirection"]),
                camera_up_vector: ParsePoint(orthogonal_camera["CameraUpVector"]),
                view_to_world_scale: orthogonal_camera["ViewToWorldScale"]
            },
            perspective_camera: perspective_camera && {
                camera_view_point: ParsePoint(perspective_camera["CameraViewPoint"]),
                camera_direction: ParsePoint(perspective_camera["CameraDirection"]),
                camera_up_vector: ParsePoint(perspective_camera["CameraUpVector"]),
                field_of_view: perspective_camera["FieldOfView"]
            },
        };
    }
    Helpers.GetViewpoint = GetViewpoint;
    function GetViewpoints(data) {
        if (!data)
            return;
        const constructViewpoint = (data) => {
            return {
                guid: data["@_Guid"],
                viewpoint: data["Viewpoint"],
                snapshot: data["Snapshot"]
            };
        };
        const viewpoints = [];
        if (Array.isArray(data)) {
            data.forEach((x) => {
                viewpoints.push(constructViewpoint(x));
            });
        }
        else {
            viewpoints.push(constructViewpoint(data));
        }
        return viewpoints;
    }
    Helpers.GetViewpoints = GetViewpoints;
    function GetComments(data) {
        if (!data)
            return;
        const constructComment = (data) => {
            var _a;
            return {
                guid: data["@_Guid"],
                date: data["Date"],
                author: data["Author"],
                comment: data["Comment"],
                viewpoint: (_a = data === null || data === void 0 ? void 0 : data.Viewpoint) === null || _a === void 0 ? void 0 : _a["@_Guid"],
                modified_date: data["ModifiedDate"],
                modified_author: data["ModifiedAuthor"]
            };
        };
        const viewpoints = [];
        if (Array.isArray(data)) {
            data.forEach((x) => {
                viewpoints.push(constructComment(x));
            });
        }
        else {
            viewpoints.push(constructComment(data));
        }
        return viewpoints;
    }
    Helpers.GetComments = GetComments;
    /**
     * Returns an object as an array
     * Can also accept array and returns new array if type is unknown
     *
     * @return data as an array
     * @param data
     */
    function ObjectToArray(data) {
        return Array.isArray(data) ? data : [data];
    }
    Helpers.ObjectToArray = ObjectToArray;
    function ParsePoint(point) {
        return {
            x: point.X,
            y: point.Y,
            z: point.Z
        };
    }
    Helpers.ParsePoint = ParsePoint;
})(Helpers = exports.Helpers || (exports.Helpers = {}));
//# sourceMappingURL=Helpers.js.map