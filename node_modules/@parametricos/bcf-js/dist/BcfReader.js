"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Topic = exports.BcfReader = void 0;
const Helpers_1 = require("./Helpers");
const unzipit_1 = require("unzipit");
class BcfReader {
    constructor() {
        this.topics = [];
        this.read = (src) => __awaiter(this, void 0, void 0, function* () {
            try {
                const topics = [];
                this.bcf_archive = yield unzipit_1.unzip(src);
                const { entries } = this.bcf_archive;
                for (const [name, entry] of Object.entries(entries)) {
                    if (name.endsWith('.bcf')) {
                        topics.push(entry);
                    }
                }
                for (let i = 0; i < topics.length; i++) {
                    const t = topics[i];
                    const topic = new Topic(this, t);
                    yield topic.read();
                    this.topics.push(topic);
                }
            }
            catch (e) {
                console.log("Error in loading BCF archive. The error below was thrown.");
                console.error(e);
            }
        });
        this.getEntry = (name) => {
            var _a;
            return (_a = this.bcf_archive) === null || _a === void 0 ? void 0 : _a.entries[name];
        };
    }
}
exports.BcfReader = BcfReader;
class Topic {
    constructor(reader, markup) {
        this.viewpoints = [];
        this.read = () => __awaiter(this, void 0, void 0, function* () {
            yield this.parseMarkup();
            yield this.parseViewpoints();
        });
        this.parseMarkup = () => __awaiter(this, void 0, void 0, function* () {
            this.markup = Helpers_1.Helpers.GetMarkup(yield this.markup_file.text());
        });
        this.parseViewpoints = () => __awaiter(this, void 0, void 0, function* () {
            if (!this.markup)
                return;
            if (this.markup.viewpoints) {
                const viewpoints = this.markup.viewpoints;
                for (let i = 0; i < viewpoints.length; i++) {
                    const entry = viewpoints[i];
                    const key = this.markup.topic.guid + "/" + entry.viewpoint;
                    const file = this.reader.getEntry(key);
                    if (!file)
                        throw new Error("Missing Visualization Info");
                    const viewpoint = Helpers_1.Helpers.GetViewpoint(yield file.text());
                    this.viewpoints.push(viewpoint);
                    // Helpers.WriteJsonToFile(`./output/${name}/${id}/${entry.viewpoint}.json`, viewpoint);
                }
            }
        });
        this.getViewpointSnapshot = (viewpoint) => __awaiter(this, void 0, void 0, function* () {
            if (!viewpoint || !this.markup)
                return;
            const entry = this.reader.getEntry(`${this.markup.topic.guid}/${viewpoint.snapshot}`);
            if (entry) {
                return yield entry.blob();
            }
        });
        this.reader = reader;
        this.markup_file = markup;
    }
}
exports.Topic = Topic;
//# sourceMappingURL=BcfReader.js.map